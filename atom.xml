<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[graham gilbert]]></title>
  <link href="http://grahamgilbert.com/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2014-02-18T07:12:18+00:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Plugins for Sal: Part 3]]></title>
    <link href="http://grahamgilbert.com/blog/2014/02/17/writing-plugins-for-sal-part-3/"/>
    <updated>2014-02-17T21:12:36+00:00</updated>
    <id>http://grahamgilbert.com/blog/2014/02/17/writing-plugins-for-sal-part-3</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve already got a fairly decent plugin &ndash; it shows us how many machines we have that aren&rsquo;t able to run 10.9. However, quite a few people won&rsquo;t have any machines that fall into this category, and just want to know when one manages to sneak under the radar, so let&rsquo;s hide the plugin if we don&rsquo;t need to see it.</p>

<h2>Previously on Lost</h2>

<p>In the first part, you might remember that we had to tell Sal how much space our plugin needed. Well, we&rsquo;re going to cover the eventuality of it not needing any space. First off, <code>mavcompatibility.py</code>.</p>

<figure class='code'><figcaption><span>grahamgilbert/mavcompatibility/mavcompatibility.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">yapsy.IPlugin</span> <span class="kn">import</span> <span class="n">IPlugin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">yapsy.PluginManager</span> <span class="kn">import</span> <span class="n">PluginManager</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">loader</span><span class="p">,</span> <span class="n">Context</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Count</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">server.models</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MavCompatibility</span><span class="p">(</span><span class="n">IPlugin</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show_widget</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">page</span><span class="p">,</span> <span class="n">machines</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">theid</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;front&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/front.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;bu_dashboard&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/id.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;group_dashboard&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/id.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">not_compatible</span> <span class="o">=</span> <span class="n">machines</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">,</span> <span class="n">condition__condition_data__contains</span><span class="o">=</span><span class="s">&#39;10.9&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">not_compatible</span><span class="p">:</span>
</span><span class='line'>            <span class="n">size</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">Context</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;10.9 Compatibility&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;not_compatible&#39;</span><span class="p">:</span> <span class="n">not_compatible</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;page&#39;</span><span class="p">:</span> <span class="n">page</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;theid&#39;</span><span class="p">:</span> <span class="n">theid</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">size</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">filter_machines</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">machines</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span> <span class="o">==</span> <span class="s">&#39;notcompatible&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">machines</span> <span class="o">=</span> <span class="n">machines</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">,</span> <span class="n">condition__condition_data__contains</span><span class="o">=</span><span class="s">&#39;10.9&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">title</span> <span class="o">=</span> <span class="s">&#39;Macs not compatible with OS X 10.9&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">machines</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="n">title</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">machines</span><span class="p">,</span> <span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take a look at lines 22 &ndash; 25. If we get any results from the query on line 20, we&rsquo;re going to be showing the plugin. If there aren&rsquo;t any applicable machines in our inventory, we don&rsquo;t need to show the plugin. We are returning the size to Sal on line 33.  Easy so far.</p>

<p>All that&rsquo;s left to do now is make our templates not do anything if they don&rsquo;t need to.</p>

<figure class='code'><figcaption><span>grahamgilbert/mavcompatibility/templates/front.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html+django'><span class='line'><span class="cp">{%</span> <span class="k">if</span> <span class="nv">not_compatible</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="cp">%}</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;legend&gt;</span><span class="cp">{{</span> <span class="nv">title</span> <span class="cp">}}</span><span class="nt">&lt;/legend&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;</span><span class="cp">{%</span> <span class="k">url</span> <span class="s1">&#39;machine_list_front&#39;</span> <span class="s1">&#39;MavCompatibility&#39;</span> <span class="s1">&#39;notcompatible&#39;</span> <span class="cp">%}</span><span class="s">&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-danger&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;bigger&quot;</span><span class="nt">&gt;</span> <span class="cp">{{</span> <span class="nv">not_compatible</span> <span class="cp">}}</span> <span class="nt">&lt;/span&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>            Not Compatible
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the if statement on line 1? If the number of machines is 0, we don&rsquo;t need to show anything. You&rsquo;ll need to make a similar change on <code>grahamgilbert/mavcompatibility/templates/id.html</code>.</p>

<p>That&rsquo;s it &ndash; a simple plugin for Sal. You can find this completed plugin in my <a href="https://github.com/grahamgilbert/sal-plugins">sal-plugins repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Plugins for Sal: Part 2]]></title>
    <link href="http://grahamgilbert.com/blog/2014/02/07/writing-plugins-for-sal-part-2/"/>
    <updated>2014-02-07T11:34:24+00:00</updated>
    <id>http://grahamgilbert.com/blog/2014/02/07/writing-plugins-for-sal-part-2</id>
    <content type="html"><![CDATA[<p>And now, time for the shocking second part of our series on how to write plugins for Sal.</p>

<p>In the previous part, we got our basic widget working. This time, we&rsquo;re going to link it up so we can get lists of those pesky non-10.9 compatible Macs when we click on the button.</p>

<h2>It&rsquo;s a list, Jim</h2>

<p>When displaying the list of machines, Sal will call the <code>filter_machines</code> function in your plugin. I&rsquo;m sure you don&rsquo;t want to disappoint, so here&rsquo;s that function added on to the plugin we wrote last time.</p>

<figure class='code'><figcaption><span>grahamgilbert/mavcompatibility/mavcompatibility.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">yapsy.IPlugin</span> <span class="kn">import</span> <span class="n">IPlugin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">yapsy.PluginManager</span> <span class="kn">import</span> <span class="n">PluginManager</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">loader</span><span class="p">,</span> <span class="n">Context</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Count</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">server.models</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MavCompatibility</span><span class="p">(</span><span class="n">IPlugin</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show_widget</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">page</span><span class="p">,</span> <span class="n">machines</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">theid</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;front&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/front.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;bu_dashboard&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/id.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;group_dashboard&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/id.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">not_compatible</span> <span class="o">=</span> <span class="n">machines</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">,</span> <span class="n">condition__condition_data__contains</span><span class="o">=</span><span class="s">&#39;10.9&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">Context</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;10.9 Compatibility&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;not_compatible&#39;</span><span class="p">:</span> <span class="n">not_compatible</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;page&#39;</span><span class="p">:</span> <span class="n">page</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;theid&#39;</span><span class="p">:</span> <span class="n">theid</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">filter_machines</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">machines</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span> <span class="o">==</span> <span class="s">&#39;notcompatible&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">machines</span> <span class="o">=</span> <span class="n">machines</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">,</span> <span class="n">condition__condition_data__contains</span><span class="o">=</span><span class="s">&#39;10.9&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">title</span> <span class="o">=</span> <span class="s">&#39;Macs not compatible with OS X 10.9&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">machines</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="n">title</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">machines</span><span class="p">,</span> <span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that our filter on the machines is pretty much identical to what we were looking for before &ndash; that&rsquo;s because we&rsquo;re looking for the same machines. We&rsquo;re taking some input (a bunch of machines, and a string that we&rsquo;ll come back to), and giving back the machine that fit our search and a title to show at the top of the page.</p>

<h2>More templating</h2>

<p>So, how did we pass that string? How do we even get to the page where a list of the machines is shown?</p>

<p>We need to edit the templates. First off, the template that is show on the front page of Sal:</p>

<figure class='code'><figcaption><span>grahamgilbert/mavcompatibility/templates/front.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html+django'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;legend&gt;</span><span class="cp">{{</span> <span class="nv">title</span> <span class="cp">}}</span><span class="nt">&lt;/legend&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;</span><span class="cp">{%</span> <span class="k">url</span> <span class="s1">&#39;machine_list_front&#39;</span> <span class="s1">&#39;MavCompatibility&#39;</span> <span class="s1">&#39;notcompatible&#39;</span> <span class="cp">%}</span><span class="s">&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-danger&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;bigger&quot;</span><span class="nt">&gt;</span> <span class="cp">{{</span> <span class="nv">not_compatible</span> <span class="cp">}}</span> <span class="nt">&lt;/span&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>            Not Compatible
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference here from last time is we&rsquo;ve filled out the URL. The options for the first part are <code>machine_list_front</code> or <code>machine_list_id</code> &ndash; depending on whether you are coming from the front page (all of the Business Units) or from deeper in the application (the machines are limited), then we&rsquo;re just passing the name of our plugin.</p>

<p>There isn&rsquo;t a huge amount you need to change for the other template &ndash; just tell Sal what type of page you came from (group or business unit) and the ID of the page you came from.</p>

<figure class='code'><figcaption><span>grahamgilbert/mavcompatibility/templates/id.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html+django'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;legend&gt;</span><span class="cp">{{</span> <span class="nv">title</span> <span class="cp">}}</span><span class="nt">&lt;/legend&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;</span><span class="cp">{%</span> <span class="k">url</span> <span class="s1">&#39;machine_list_id&#39;</span> <span class="s1">&#39;MavCompatibility&#39;</span> <span class="s1">&#39;notcompatible&#39;</span> <span class="nv">page</span> <span class="nv">theid</span> <span class="cp">%}</span><span class="s">&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-danger&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;bigger&quot;</span><span class="nt">&gt;</span> <span class="cp">{{</span> <span class="nv">not_compatible</span> <span class="cp">}}</span> <span class="nt">&lt;/span&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>            Not Compatible
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you go &ndash; a simple plugin for Sal. But don&rsquo;t go away thinking we&rsquo;re done. Whilst this is functional, it certainly leaves a fair bit to be desired. In the last part of this series, we&rsquo;ll tidy everything up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing plugins for Sal: Part 1]]></title>
    <link href="http://grahamgilbert.com/blog/2014/01/26/writing-plugins-for-sal-part-1/"/>
    <updated>2014-01-26T10:01:26+00:00</updated>
    <id>http://grahamgilbert.com/blog/2014/01/26/writing-plugins-for-sal-part-1</id>
    <content type="html"><![CDATA[<p>Writing a plugin for Sal isn&rsquo;t hard. In fact, I&rsquo;d go so far as to say it&rsquo;s easy. We&rsquo;re going to make a plugin that will flag up any machines that aren&rsquo;t compatible with Mavericks, by using <a href="https://github.com/timsutton/munki-conditions/blob/master/supported_major_os_upgrades">Tim Sutton&rsquo;s script</a>. To start off with, you&rsquo;re going to need to get that script onto your Macs at <code>/usr/local/munki/conditions</code>. I&rsquo;d personally use Puppet for that, but if you&rsquo;re a purely Munki shop, you&rsquo;ll be using a package. <a href="https://github.com/grahamgilbert/macscripts/raw/master/Munki/Condtion%20Packages/supported_major_os_upgrades/supported_major_os_upgrades.pkg">And handily, I&rsquo;ve made one</a>.</p>

<p><img class="center" src="http://grahamgilbert.com/images/posts/2014-01-26/mavcompatibility.png" width="297" height="131"></p>

<p>The convention I&rsquo;d like everyone to follow is to drop your plugins into the <code>plugins</code> directory, in a subdirectory named after yourself &ndash; mine are going in <code>plugins/grahamgilbert</code>. The plugin we&rsquo;re making today is going in <code>plugins/grahamgilbert/mavcompatibility</code>.</p>

<h2>Metadata</h2>

<p>The first piece you&rsquo;ll need is a <code>.yapsy-plugin</code> file. This contains the metadata for your plugin. It&rsquo;s all pretty self explanatory. This is <code>plugins/grahamgilbert/mavcompatibility/mavcompatibility.yapsy-plugin</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Core]
</span><span class='line'>Name = MavCompatibility
</span><span class='line'>Module = mavcompatibility
</span><span class='line'>
</span><span class='line'>[Documentation]
</span><span class='line'>Author = Graham Gilbert
</span><span class='line'>Version = 0.1
</span><span class='line'>Website = http://grahamgilbert.com
</span><span class='line'>Description = Displays macs that aren't compatible with 10.9.</span></code></pre></td></tr></table></div></figure>


<h2>Now for the meat</h2>

<p>Onto the actual plugin. Your plugin is going to be sent at least two pieces of information, possibly three.</p>

<ul>
<li><code>page</code>: This will be the page the plugin is going to be shown on. This will either be <code>front</code>, <code>bu_dashboard</code> or <code>group_dashboard</code>. You will need this information later on.</li>
<li><code>machines</code>: This a collection of machines you are going to need to work on. Depending on the page, this might be all of them, or just a subset from a Business Unit or Machine Group.</li>
<li><code>theid</code>: If you are displaying your plugin on either a Business Unit page or a Machine Group page, this is the unique ID of that Business Unit or Machine Group.</li>
</ul>


<p>And in return, your plugin is expected to return two things:</p>

<ul>
<li>Some HTML: You plugin needs to return it&rsquo;s output.</li>
<li>The width of the output: Sal uses <a href="http://getbootstrap.com/2.3.2/">Bootstrap</a>, and it uses a grid system. So Sal can wrap lines properly, you need to tell Sal how many columns your plugin needs. This should be an integer.</li>
</ul>


<p>That&rsquo;s the 50,000 ft view of a Sal plugin, let&rsquo;s make one. The main thing to remember is that Sal is written in Django, so if you have any problems, looking at <a href="https://docs.djangoproject.com/en/1.5/">their documentation</a> will help. You can also enable debug logging on your Sal install by uncommenting lines 24 and 25 in <code>server/views.py</code> (turn it off when you&rsquo;re done though, it is VERY verbose).</p>

<p>First off, a little about how Sal stores the data you send it. Sal stores Munki&rsquo;s conditions in the Condition table, and for each one, the name and it&rsquo;s data is stored (this is the same for Facts). Munki&rsquo;s conditions can consist of a variety of data types (strings, dates, arrays), so Sal will flatten any arrays it is given into a comma separated list. Each machine will have multiple Conditions and Facts associated with it.</p>

<p>When displaying the plugin, Sal will look for a function called show_widget, passing the information mentioned previously. Don&rsquo;t worry too much about the templates, we&rsquo;ll cover them later.</p>

<figure class='code'><figcaption><span>grahamgilbert/mavcompatibility/mavcompatibility.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">yapsy.IPlugin</span> <span class="kn">import</span> <span class="n">IPlugin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">yapsy.PluginManager</span> <span class="kn">import</span> <span class="n">PluginManager</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">loader</span><span class="p">,</span> <span class="n">Context</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Count</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">server.models</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MavCompatibility</span><span class="p">(</span><span class="n">IPlugin</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show_widget</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">page</span><span class="p">,</span> <span class="n">machines</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">theid</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;front&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/front.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;bu_dashboard&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/id.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">page</span> <span class="o">==</span> <span class="s">&#39;group_dashboard&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;grahamgilbert/mavcompatibility/templates/id.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">not_compatible</span> <span class="o">=</span> <span class="n">machines</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="n">condition__condition_name</span><span class="o">=</span><span class="s">&#39;supported_major_os_upgrades&#39;</span><span class="p">,</span> <span class="n">condition__condition_data__contains</span><span class="o">=</span><span class="s">&#39;10.9&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">Context</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;10.9 Compatibility&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;not_compatible&#39;</span><span class="p">:</span> <span class="n">not_compatible</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;page&#39;</span><span class="p">:</span> <span class="n">page</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;theid&#39;</span><span class="p">:</span> <span class="n">theid</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Skip to line 20 &ndash; this is where the real work starts. All we&rsquo;re doing is taking the machines we were passed and first off finding the machines that have the condition we&rsquo;re looking for. We then want to remove those that contain 10.9 in that data.</p>

<h2>Templates</h2>

<p>Then it&rsquo;s just a case of passing those variables to our template. As we aren&rsquo;t linking our buttons to anything for now, both of our templates will be the same, but we will still make two separate ones as we&rsquo;re going to need them next time.</p>

<figure class='code'><figcaption><span>grahamgilbert/mavcompatibility/templates/front.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html+django'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;legend&gt;</span><span class="cp">{{</span> <span class="nv">title</span> <span class="cp">}}</span><span class="nt">&lt;/legend&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-danger&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;bigger&quot;</span><span class="nt">&gt;</span> <span class="cp">{{</span> <span class="nv">not_compatible</span> <span class="cp">}}</span> <span class="nt">&lt;/span&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>            Not Compatible
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make a file in <code>templates</code> called <code>id.html</code> with the same content for now &ndash; we&rsquo;ll make them different in part two.</p>

<p>We return our plugin on line 28 of <code>mavcompatibility.py</code>. First we render the appropriate template, passing it our data, and we return how wide our plugin is &ndash; in this case it will take up three columns.</p>

<p>That&rsquo;s it for a basic plugin &ndash; we&rsquo;ve taken a bunch of machines, filtered them based on a Munki condition, and we&rsquo;ve returned the data. But this obviously is lacking &ndash; the button doesn&rsquo;t do anything and we still see a big fat zero when all of our machines are 10.9 capable. Anyway, you can get the code so far in my <a href="https://github.com/grahamgilbert/sal-plugins/tree/master/mavcompatibility">sal-plugins repository</a>.</p>

<p>Tune in to part two for the thrilling conclusion!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sal: The Munki Puppet]]></title>
    <link href="http://grahamgilbert.com/blog/2014/01/17/sal-the-munki-puppet/"/>
    <updated>2014-01-17T10:51:46+00:00</updated>
    <id>http://grahamgilbert.com/blog/2014/01/17/sal-the-munki-puppet</id>
    <content type="html"><![CDATA[<p>At <a href="http://pebbleit.com">pebble.it</a>, we always wanted to have an easy dashboard to look at to visualise the information we could collect from Puppet and Munki. We tried a few options, but didn&rsquo;t like any of them, so we made our own.</p>

<p>Say hi to Sal &ndash; the Munki Puppet. It&rsquo;s a multi-tenanted reporting solution for Munki and optionally, Facter.  You can find all of the details <a href="https://github.com/grahamgilbert/sal">over on GitHub</a>, including installation instructions and a package to send out to your clients.</p>

<p><img class="center" src="http://grahamgilbert.com/images/posts/2014-01-17/Sal.png"></p>

<p>There is a plugin system built in to Sal, and over the next few days I will have a couple of posts covering how to make your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing the Authorization Database with Munki]]></title>
    <link href="http://grahamgilbert.com/blog/2013/12/22/managing-the-authorization-database-with-munki/"/>
    <updated>2013-12-22T15:25:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/12/22/managing-the-authorization-database-with-munki</id>
    <content type="html"><![CDATA[<p>Have you ever wished you didn&rsquo;t have to take calls from your users to unlock various parts of System Preferences? That standard users could unlock Energy Saver or Date and Time preferences? Well dear reader, this is the article for you.</p>

<p>If, for some strange reason you can&rsquo;t be bothered to read this overly long article (I do love to procrastinate), you can head over to my <a href="https://github.com/grahamgilbert/macscripts/tree/master/Munki">macscripts repo on GitHub</a> for the scripts and resulting pkginfo files I&rsquo;ve made for this.</p>

<p>Before we start, let&rsquo;s get one thing out of the way &ndash; Munki isn&rsquo;t at heart a configuration management system. I&rsquo;ve traditionally preferred Puppet for these tasks, but as there is at the time of writing a <a href="https://projects.puppetlabs.com/issues/22830">bug open</a> on modifying this with Puppet, I took it upon myself to make this work in my environment. I spent a couple of days trying to get my sub-par Ruby skills to match my aspirations, so I moved onto a much more comfortable technology for me: Python and Munki.</p>

<p>To tackle this issue, I&rsquo;m going to be using the same Philosophy as Puppet:</p>

<ul>
<li>Check if the resource exists and what it&rsquo;s current value is</li>
<li>If required, change the value</li>
<li>And be able to revert back to how things were</li>
</ul>


<p>These translate quite nicely into <code>installcheck_script</code>, <code>postinstall_script</code> and <code>uninstall_script</code> rolled into a <code>nopkg</code> pkginfo (for a good intro into how nopkg pkginfos work, see how to manage printers with them over on the <a href="https://code.google.com/p/munki/wiki/ManagingPrintersWithMunki">Munki wiki</a>). We could do this with a payload free package and an installcheck_script just as easily, but as we&rsquo;re already putting code into our pkginfo, we might as well keep it all in one place.</p>

<p>This isn&rsquo;t intended to be a tutorial on the theory of OS X&rsquo;s authorization database &ndash; there are already <a href="http://mattsmacblog.wordpress.com/2012/01/05/making-use-of-the-etcauthorization-file-in-lion-10-7-x/">excellent resources available</a>.</p>

<h2>installcheck_script</h2>

<p>Our <code>installcheck_script</code> is going to be very basic. To first open up the root <code>system.preferences</code> right, we just need to make sure that the group is set to <code>everyone</code> rather than <code>admin</code>. If you want to use another group, just substitute it in the <code>group</code> variable in the installcheck_script and the postinstall_script.</p>

<figure class='code'><figcaption><span>installcheck.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">plistlib</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Group System Preferences should be opened to</span>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="s">&#39;everyone&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;/usr/bin/security&#39;</span><span class="p">,</span> <span class="s">&#39;authorizationdb&#39;</span><span class="p">,</span> <span class="s">&#39;read&#39;</span><span class="p">,</span> <span class="s">&#39;system.preferences&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">formatted</span> <span class="o">=</span> <span class="n">plistlib</span><span class="o">.</span><span class="n">readPlistFromString</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'><span class="c"># if group matches, exit 1 as we don&#39;t need to install</span>
</span><span class='line'><span class="k">if</span> <span class="n">formatted</span><span class="p">[</span><span class="s">&#39;group&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># if it doesn&#39;t we&#39;re exiting with 0 as we need to perform the install</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>postinstall_script</h2>

<p>The <code>postinstall_script</code> is just an extension of the <code>installcheck_script</code> &ndash; but we&rsquo;re going to make use of Python&rsquo;s built-in <code>plistlib</code> to modify the plist and feed it back into <code>security authorizationdb</code> to set our desired settings.</p>

<figure class='code'><figcaption><span>postinstall.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">plistlib</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Group System Preferences should be opened to</span>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="s">&#39;everyone&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;/usr/bin/security&#39;</span><span class="p">,</span> <span class="s">&#39;authorizationdb&#39;</span><span class="p">,</span> <span class="s">&#39;read&#39;</span><span class="p">,</span> <span class="s">&#39;system.preferences&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'><span class="n">formatted</span> <span class="o">=</span> <span class="n">plistlib</span><span class="o">.</span><span class="n">readPlistFromString</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If the group doesn&#39;t match, we&#39;re going to correct it.</span>
</span><span class='line'><span class="k">if</span> <span class="n">formatted</span><span class="p">[</span><span class="s">&#39;group&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>    <span class="c">#input_plist = {}</span>
</span><span class='line'>    <span class="n">formatted</span><span class="p">[</span><span class="s">&#39;group&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">group</span>
</span><span class='line'>    <span class="c"># Convert back to plist</span>
</span><span class='line'>    <span class="n">input_plist</span> <span class="o">=</span> <span class="n">plistlib</span><span class="o">.</span><span class="n">writePlistToString</span><span class="p">(</span><span class="n">formatted</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Write the plist back to the authorizationdb</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;/usr/bin/security&#39;</span><span class="p">,</span> <span class="s">&#39;authorizationdb&#39;</span><span class="p">,</span> <span class="s">&#39;write&#39;</span><span class="p">,</span> <span class="s">&#39;system.preferences&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">input_plist</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>uninstall_script</h2>

<p>We should be good admins and clean up after ourselves, so we&rsquo;ll include an uninstall script.</p>

<figure class='code'><figcaption><span>uninstall.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">plistlib</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set the group back to admin</span>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="s">&#39;admin&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;/usr/bin/security&#39;</span><span class="p">,</span> <span class="s">&#39;authorizationdb&#39;</span><span class="p">,</span> <span class="s">&#39;read&#39;</span><span class="p">,</span> <span class="s">&#39;system.preferences&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'><span class="n">formatted</span> <span class="o">=</span> <span class="n">plistlib</span><span class="o">.</span><span class="n">readPlistFromString</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If the group doesn&#39;t match, we&#39;re going to correct it.</span>
</span><span class='line'><span class="k">if</span> <span class="n">formatted</span><span class="p">[</span><span class="s">&#39;group&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>    <span class="n">formatted</span><span class="p">[</span><span class="s">&#39;group&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">group</span>
</span><span class='line'>    <span class="c"># Convert back to plist</span>
</span><span class='line'>    <span class="n">input_plist</span> <span class="o">=</span> <span class="n">plistlib</span><span class="o">.</span><span class="n">writePlistToString</span><span class="p">(</span><span class="n">formatted</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Write the plist back to the authorizationdb</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;/usr/bin/security&#39;</span><span class="p">,</span> <span class="s">&#39;authorizationdb&#39;</span><span class="p">,</span> <span class="s">&#39;write&#39;</span><span class="p">,</span> <span class="s">&#39;system.preferences&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="nb">input</span><span class="o">=</span><span class="n">input_plist</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Getting it into Munki</h2>

<p>Now we&rsquo;ve got our three scripts, we need to get them together into a pkginfo file. Assuming the scripts you&rsquo;ve just made live in <code>~/src/macscripts/Munki/Auth</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/src/macscripts/Munki/Auth
</span><span class='line'>$ /usr/local/munki/makepkginfo --installcheck_script=installcheck.py --postinstall_script=postinstall.py --uninstall_script=uninstall.py > OpenSysPrefs-1.0.plist</span></code></pre></td></tr></table></div></figure>


<p>Which will produce the bare bones of a pkginfo file, but there are a few other things we need to add into it. Modify OpenSysPref-1.0.plist to look like the below. For further documentation on what we&rsquo;re doing here, have a look at the <a href="https://code.google.com/p/munki/wiki/PkginfoFiles">Munki wiki</a>. The important parts you&rsquo;ll need to add / modify are:</p>

<ul>
<li>autoremove</li>
<li>catalog</li>
<li>description</li>
<li>display_name</li>
<li>name</li>
<li>installer_type</li>
<li>minimum_os_version</li>
<li>version</li>
<li>unattended_install (if you want it to apply in the background)</li>
<li>uninstall_method</li>
<li>uninstallable</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>autoremove<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;false/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>catalogs<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>production<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>description<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>Opens System Preferences to Everyone<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>display_name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>Open System Preferences<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>OpenSysPrefs<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>installer_type<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>nopkg<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>minimum_os_version<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>10.8.0<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>unattended_install<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>version<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>1.0<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>installcheck_script<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>#!/usr/bin/env python
</span><span class='line'>
</span><span class='line'>import subprocess
</span><span class='line'>import sys
</span><span class='line'>import plistlib
</span><span class='line'>
</span><span class='line'># Group System Preferences should be opened to
</span><span class='line'>group = &#39;everyone&#39;
</span><span class='line'>
</span><span class='line'>command = [&#39;/usr/bin/security&#39;, &#39;authorizationdb&#39;, &#39;read&#39;, &#39;system.preferences&#39;]
</span><span class='line'>
</span><span class='line'>task = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</span><span class='line'>(out, err) = task.communicate()
</span><span class='line'>
</span><span class='line'>formatted = plistlib.readPlistFromString(out)
</span><span class='line'>
</span><span class='line'># if group matches, exit 1 as we don&#39;t need to install
</span><span class='line'>if formatted[&#39;group&#39;] == group:
</span><span class='line'>    sys.exit(1)
</span><span class='line'>else:
</span><span class='line'>    # if it doesn&#39;t we&#39;re exiting with 0 as we need to perform the install
</span><span class='line'>    sys.exit(0)<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>postinstall_script<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>#!/usr/bin/env python
</span><span class='line'>
</span><span class='line'>import subprocess
</span><span class='line'>import sys
</span><span class='line'>import plistlib
</span><span class='line'>
</span><span class='line'># Group System Preferences should be opened to
</span><span class='line'>group = &#39;everyone&#39;
</span><span class='line'>
</span><span class='line'>command = [&#39;/usr/bin/security&#39;, &#39;authorizationdb&#39;, &#39;read&#39;, &#39;system.preferences&#39;]
</span><span class='line'>
</span><span class='line'>task = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</span><span class='line'>(out, err) = task.communicate()
</span><span class='line'>formatted = plistlib.readPlistFromString(out)
</span><span class='line'>
</span><span class='line'># If the group doesn&#39;t match, we&#39;re going to correct it.
</span><span class='line'>if formatted[&#39;group&#39;] != group:
</span><span class='line'>    #input_plist = {}
</span><span class='line'>    formatted[&#39;group&#39;] = group
</span><span class='line'>    # Convert back to plist
</span><span class='line'>    input_plist = plistlib.writePlistToString(formatted)
</span><span class='line'>    # Write the plist back to the authorizationdb
</span><span class='line'>    command = [&#39;/usr/bin/security&#39;, &#39;authorizationdb&#39;, &#39;write&#39;, &#39;system.preferences&#39;]
</span><span class='line'>    task = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</span><span class='line'>    (out, err) = task.communicate(input=input_plist)<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>uninstall_method<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>uninstall_script<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>uninstallable<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>uninstall_script<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>#!/usr/bin/env python
</span><span class='line'>
</span><span class='line'>import subprocess
</span><span class='line'>import sys
</span><span class='line'>import plistlib
</span><span class='line'>
</span><span class='line'># Set the group back to admin
</span><span class='line'>group = &#39;admin&#39;
</span><span class='line'>
</span><span class='line'>command = [&#39;/usr/bin/security&#39;, &#39;authorizationdb&#39;, &#39;read&#39;, &#39;system.preferences&#39;]
</span><span class='line'>
</span><span class='line'>task = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</span><span class='line'>(out, err) = task.communicate()
</span><span class='line'>formatted = plistlib.readPlistFromString(out)
</span><span class='line'>
</span><span class='line'># If the group doesn&#39;t match, we&#39;re going to correct it.
</span><span class='line'>if formatted[&#39;group&#39;] != group:
</span><span class='line'>    formatted[&#39;group&#39;] = group
</span><span class='line'>    # Convert back to plist
</span><span class='line'>    input_plist = plistlib.writePlistToString(formatted)
</span><span class='line'>    # Write the plist back to the authorizationdb
</span><span class='line'>    command = [&#39;/usr/bin/security&#39;, &#39;authorizationdb&#39;, &#39;write&#39;, &#39;system.preferences&#39;]
</span><span class='line'>    task = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</span><span class='line'>    (out, err) = task.communicate(input=input_plist)<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, you should be able to add this pkginfo to your Munki repository, include it in a manifest and &ndash; well, nothing will happen, as this only unlocks the top level of System Preferences. If you want to do more, you&rsquo;ll need to unlock additional parts as well &ndash; the scripts to do this can be found in my <a href="https://github.com/grahamgilbert/macscripts/tree/master/Munki">macscripts repository</a>. I&rsquo;ve specified that <code>OpenSysPrefs</code> is required in all of these &ndash; this means I can include only the needed modifications in the manifest and not worry about the top level being unlocked.</p>

<p>Also remember that Munki has conditional items built right in &ndash; you might only want to unlock the Network pane on laptops so they can install VPN profiles etc using something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;key&gt;</span>conditional_items<span class="nt">&lt;/key&gt;</span>
</span><span class='line'><span class="nt">&lt;array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>condition<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>machine_type == &quot;laptop&quot;<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>managed_installs<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>UnlockNetwork<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/array&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crypt 0.5 released]]></title>
    <link href="http://grahamgilbert.com/blog/2013/11/19/crypt-0-dot-5-released/"/>
    <updated>2013-11-19T11:29:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/11/19/crypt-0-dot-5-released</id>
    <content type="html"><![CDATA[<p>I just pushed up version 0.5 of Crypt &ndash; the <a href="https://github.com/grahamgilbert/Crypt/releases/tag/0.5">release details are over at GitHub</a>. This is the last version that will be compatibile with the current version of <a href="https://github.com/grahamgilbert/Crypt-server">Crypt-Server</a> &ndash; which has also been updated to be compatible with Django 1.5.</p>

<p>This is fully tested (in my environment!) with Mavericks, so go forth and escrow FileVault keys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFP548 Podcast Episode 4: Don't Stab Yourself in the Leg, Then]]></title>
    <link href="http://grahamgilbert.com/blog/2013/11/13/afp548-podcast-episode-4-dont-stab-yourself-in-the-leg-then/"/>
    <updated>2013-11-13T11:46:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/11/13/afp548-podcast-episode-4-dont-stab-yourself-in-the-leg-then</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago, I had a chat with Ed Marczak for the AFP548 Podcast. We discussed packaging, community and convincing clients that they shouldn&rsquo;t stab themselves in the leg. <a href="https://soundcloud.com/afp548/episode-four-dont-stab-yourself-in-the-leg-then">Go listen.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting a desktop picture in Mavericks]]></title>
    <link href="http://grahamgilbert.com/blog/2013/10/28/setting-a-desktop-picture-in-mavericks/"/>
    <updated>2013-10-28T14:48:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/10/28/setting-a-desktop-picture-in-mavericks</id>
    <content type="html"><![CDATA[<p>Sometimes we are asked by clients to set a default desktop picture for new users &ndash; sometimes we are deleting home directories on logout, so need to warn the users, other times the client just wants their corporate wallpaper to be the default.</p>

<p>If you are lazy and don&rsquo;t want to read this post then the script that changes the desktop picture <a href="https://github.com/grahamgilbert/macscripts/tree/master/set_desktops">is on GitHub</a>.</p>

<p>Whatever, here&rsquo;s what we used to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/defaults write com.apple.desktop Background <span class="s1">&#39;{default = {ImageFilePath = &quot;/Library/Desktop Pictures/Black &amp; White/Lightning.jpg&quot;; };}&#39;</span>
</span><span class='line'>/usr/bin/killall Dock
</span></code></pre></td></tr></table></div></figure>


<p>Nothing earth shattering there if you&rsquo;ve managed Macs for any length of time.</p>

<p>But then 10.9 changed things &ndash; this stopped working.</p>

<p>I ran fs_usage to see what was happening whilst I changed the desktop picture on my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo fs_usage -w | grep desktop
</span></code></pre></td></tr></table></div></figure>


<p>Obviously there was a metic buttload of information, but this line caught my eye.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>15:25:06.884820    WrData<span class="o">[</span>A<span class="o">]</span>       <span class="nv">D</span><span class="o">=</span>0x0b2d1d90  <span class="nv">B</span><span class="o">=</span>0x1000   /dev/disk1  /Users/grahamgilbert/Library/Application Support/Dock/desktoppicture.db
</span></code></pre></td></tr></table></div></figure>


<p>Bingo! I opened up the database in the <a href="https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/">SQLite Manager Firefox extension</a> (the only thing I use Firefox for these days) and had a peek. And then I got half a brain and googled the path of the desktoppicture.db file and found that there was a <a href="https://gist.github.com/gregneagle/6225747">gist from Greg Neagle</a>. Perfect!</p>

<p>Of course, he&rsquo;d already improved upon this script and written a proof of concept to <a href="https://gist.github.com/gregneagle/6957826">set a random desktop picture using PyObjC</a>. This got me 90% of the way there, so this is my modified version of his script. The full code and usage instructions are <a href="https://github.com/grahamgilbert/macscripts/tree/master/set_desktops">over on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZNC: An IRC Bouncer]]></title>
    <link href="http://grahamgilbert.com/blog/2013/10/13/znc-an-irc-bouncer/"/>
    <updated>2013-10-13T08:35:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/10/13/znc-an-irc-bouncer</id>
    <content type="html"><![CDATA[<p>Yes,  it&rsquo;s true. The most interesting conversations in the Mac admin world take place using technology from the 1980&rsquo;s &ndash; <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a> (##osx-server on <a href="http://freenode.net/">freenode</a>). Those of you who know me will know that I&rsquo;m borderline OCD. In this instance, my major annoyance was that I&rsquo;d only get half of the conversation and I&rsquo;d miss private messages when I had to put my laptop to sleep. I needed to somehow keep a persistient conenction to IRC without having to sit infront of my computer 24/7.</p>

<p>I&rsquo;d heard of IRC bouncers before &ndash; an app that runs on a server, saving the messages in the rooms you specify for you until you are able to read them, but always assumed they were much more difficult to set up than it turned out to be.</p>

<p>This is set up on a box running Ubuntu 12.04, with port 6666 opened on your firewall and forwarded to the box if you want to access it from outside the network. Mine is running on an <a href="http://aws.amazon.com/free/">Amazon EC2 Micro instance</a> &ndash; available for free for one year if you don&rsquo;t already have a server to run it on.</p>

<p>Right, let&rsquo;s get started. All of these commands are to be run as your normal user (<code>graham</code> in this case &ndash; <strong>not root</strong>). First we&rsquo;re going to enable backports in Ubuntu. I like editing text files in <code>nano</code> so I&rsquo;m going to install that first, but feel free to use Vi or whatever you like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install -y nano
</span><span class='line'><span class="nv">$ </span>sudo nano /etc/apt/sources.list
</span></code></pre></td></tr></table></div></figure>


<p>Find the two backports lines commented out (lines 44-45 on my test box) and unomment them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
</span><span class='line'>deb-src http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
</span></code></pre></td></tr></table></div></figure>


<p>If you are using nano, hit <code>CTRL+O</code> and press return to save it, then <code>CTRL-X</code> to exit.</p>

<p>To install ZNC, issue the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install -y znc/precise-backports znc-dbg/precise-backports znc-dev/precise-backports znc-extra/precise-backports znc-perl/precise-backports znc-python/precise-backports znc-tcl/precise-backports
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Thankfully there is a easy wizard to follow to configure ZNC. Below is a transcript of my settings, but feel free to adjust them to your tastes (make sure you are running this as your normal user, not sudo/root). Do not be scared by the masses of text, you have to type in very little.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>znc --makeconf
</span><span class='line'><span class="o">[</span> ok <span class="o">]</span> Checking <span class="k">for </span>list of available modules...
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> Building new config
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> First <span class="nb">let</span><span class="s1">&#39;s start with some global settings...</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ?? ] What port would you like ZNC to listen on? (1025 to 65535): 6666</span>
</span><span class='line'><span class="s1">[ ?? ] Would you like ZNC to listen using SSL? (yes/no) [no]: yes</span>
</span><span class='line'><span class="s1">[ ** ] Unable to locate pem file: [/home/graham/.znc/znc.pem]</span>
</span><span class='line'><span class="s1">[ ?? ] Would you like to create a new pem file now? (yes/no) [yes]: yes</span>
</span><span class='line'><span class="s1">[ ok ] Writing Pem file [/home/graham/.znc/znc.pem]...</span>
</span><span class='line'><span class="s1">[ ?? ] Would you like ZNC to listen using ipv6? (yes/no) [yes]: no</span>
</span><span class='line'><span class="s1">[ ?? ] Listen Host (Blank for all ips):</span>
</span><span class='line'><span class="s1">[ ok ] Verifying the listener...</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ** ] -- Global Modules --</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ** ] +-----------+----------------------------------------------------------+</span>
</span><span class='line'><span class="s1">[ ** ] | Name      | Description                                              |</span>
</span><span class='line'><span class="s1">[ ** ] +-----------+----------------------------------------------------------+</span>
</span><span class='line'><span class="s1">[ ** ] | partyline | Internal channels and queries for users connected to znc |</span>
</span><span class='line'><span class="s1">[ ** ] | webadmin  | Web based administration module                          |</span>
</span><span class='line'><span class="s1">[ ** ] +-----------+----------------------------------------------------------+</span>
</span><span class='line'><span class="s1">[ ** ] And 12 other (uncommon) modules. You can enable those later.</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ?? ] Load global module &lt;partyline&gt;? (yes/no) [no]:</span>
</span><span class='line'><span class="s1">[ ?? ] Load global module &lt;webadmin&gt;? (yes/no) [no]:</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ** ] Now we need to set up a user...</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ?? ] Username (AlphaNumeric): grahamgilbert</span>
</span><span class='line'><span class="s1">[ ?? ] Enter Password:</span>
</span><span class='line'><span class="s1">[ ?? ] Confirm Password:</span>
</span><span class='line'><span class="s1">[ ?? ] Would you like this user to be an admin? (yes/no) [yes]: yes</span>
</span><span class='line'><span class="s1">[ ?? ] Nick [grahamgilbert]:</span>
</span><span class='line'><span class="s1">[ ?? ] Alt Nick [grahamgilbert_]:</span>
</span><span class='line'><span class="s1">[ ?? ] Ident [grahamgilbert]:</span>
</span><span class='line'><span class="s1">[ ?? ] Real Name [Got ZNC?]: Graham Gilbert</span>
</span><span class='line'><span class="s1">[ ?? ] Bind Host (optional):</span>
</span><span class='line'><span class="s1">[ ?? ] Number of lines to buffer per channel [50]: 1000</span>
</span><span class='line'><span class="s1">[ ?? ] Would you like to clear channel buffers after replay? (yes/no) [yes]: yes</span>
</span><span class='line'><span class="s1">[ ?? ] Default channel modes [+stn]:</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ** ] -- User Modules --</span>
</span><span class='line'><span class="s1">[ ** ]</span>
</span><span class='line'><span class="s1">[ ** ] +--------------+------------------------------------------------------------------------------------------+</span>
</span><span class='line'><span class="s1">[ ** ] | Name         | Description                                                                              |</span>
</span><span class='line'><span class="s1">[ ** ] +--------------+------------------------------------------------------------------------------------------+</span>
</span><span class='line'><span class="s1">[ ** ] | chansaver    | Keep config up-to-date when user joins/parts                                             |</span>
</span><span class='line'><span class="s1">[ ** ] | controlpanel | Dynamic configuration through IRC. Allows editing only yourself if you&#39;</span>re not ZNC admin. |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | perform      | Keeps a list of commands to be executed when ZNC connects to IRC.                        |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> +--------------+------------------------------------------------------------------------------------------+
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> And 22 other <span class="o">(</span>uncommon<span class="o">)</span> modules. You can <span class="nb">enable </span>those later.
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;chansaver&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: yes
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;controlpanel&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>:
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;perform&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>:
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Would you like to <span class="nb">set </span>up a network? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: yes
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Network <span class="o">(</span>e.g. <span class="sb">`</span>freenode<span class="s1">&#39; or `efnet&#39;</span><span class="o">)</span>: freenode
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> -- Network Modules --
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> +-------------+-------------------------------------------------------------------------------------------------+
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | Name        | Description                                                                                     |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> +-------------+-------------------------------------------------------------------------------------------------+
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | chansaver   | Keep config up-to-date when user joins/parts                                                    |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | keepnick    | Keep trying <span class="k">for </span>your primary nick                                                               |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | kickrejoin  | Autorejoin on kick                                                                              |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | nickserv    | Auths you with NickServ                                                                         |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | perform     | Keeps a list of commands to be executed when ZNC connects to IRC.                               |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> | simple_away | This module will automatically <span class="nb">set </span>you away on IRC <span class="k">while </span>you are disconnected from the bouncer. |
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> +-------------+-------------------------------------------------------------------------------------------------+
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> And 17 other <span class="o">(</span>uncommon<span class="o">)</span> modules. You can <span class="nb">enable </span>those later.
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;chansaver&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: yes
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;keepnick&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;kickrejoin&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;nickserv&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;perform&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Load module &lt;simple_away&gt;? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: yes
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> -- IRC Servers --
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> Only add servers from the same IRC network.
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> If a server from the list can<span class="err">&#39;</span>t be reached, another server will be used.
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> IRC server <span class="o">(</span>host only<span class="o">)</span>: irc.freenode.net
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> <span class="o">[</span>irc.freenode.net<span class="o">]</span> Port <span class="o">(</span>1 to 65535<span class="o">)</span> <span class="o">[</span>6667<span class="o">]</span>:
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> <span class="o">[</span>irc.freenode.net<span class="o">]</span> Password <span class="o">(</span>probably empty<span class="o">)</span>:
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Does this server use SSL? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>:
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Would you like to add another server <span class="k">for </span>this IRC network? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>:
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> -- Channels --
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Would you like to add a channel <span class="k">for </span>ZNC to automatically join? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>yes<span class="o">]</span>: yes
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Channel name: <span class="c">##osx-server</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Would you like to add another channel? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Would you like to <span class="nb">set </span>up another network? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Would you like to <span class="nb">set </span>up another user? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>no<span class="o">]</span>: no
</span><span class='line'><span class="o">[</span> ok <span class="o">]</span> Writing config <span class="o">[</span>/home/vagrant/.znc/configs/znc.conf<span class="o">]</span>...
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> To connect to this ZNC you need to connect to it as your IRC server
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> using the port that you supplied.  You have to supply your login info
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> as the IRC server password like this: user/network:pass.
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> Try something like this in your IRC client...
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> /server &lt;znc_server_ip&gt; +6666 grahamgilbert:&lt;pass&gt;
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> And this in your browser...
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span> https://&lt;znc_server_ip&gt;:6666/
</span><span class='line'><span class="o">[</span> ** <span class="o">]</span>
</span><span class='line'><span class="o">[</span> ?? <span class="o">]</span> Launch ZNC now? <span class="o">(</span>yes/no<span class="o">)</span> <span class="o">[</span>yes<span class="o">]</span>: no
</span></code></pre></td></tr></table></div></figure>


<p>Still with me? One last thing to do &ndash; make sure ZNC starts and keeps running. We&rsquo;ll use Upstart (hat-tip to <a href="https://twitter.com/natewalck/status/389345376811356160">@natewalck</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo nano /etc/init/znc.conf
</span></code></pre></td></tr></table></div></figure>


<p>And pop in the following, replacing <code>sudo -u graham</code> with your own username.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># znc - IRC Bouncer</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;IRC Bouncer&quot;</span>
</span><span class='line'>
</span><span class='line'>start on runlevel <span class="o">[</span>2345<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>stop on runlevel <span class="o">[</span>016<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>respawn limit 15 5
</span><span class='line'>
</span><span class='line'>script
</span><span class='line'>  <span class="nb">exec </span>sudo -u graham /usr/bin/znc
</span><span class='line'>end script
</span></code></pre></td></tr></table></div></figure>


<p>Then finally start it up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo start znc
</span></code></pre></td></tr></table></div></figure>


<p>Configuring each IRC client is different, but for Textual (my prefered client), it&rsquo;s pretty straightforward. Go to the Server menu and choose Add Server. Make the settings look like below, obviously replaing the hostname and password with the ones you chose.</p>

<p><img class="center" src="http://grahamgilbert.com/images/posts/2013-10-13/textual_settings.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an OS X base box for Vagrant with Packer]]></title>
    <link href="http://grahamgilbert.com/blog/2013/08/23/creating-an-os-x-base-box-for-vagrant-with-packer/"/>
    <updated>2013-08-23T11:30:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/08/23/creating-an-os-x-base-box-for-vagrant-with-packer</id>
    <content type="html"><![CDATA[<p>A while ago, the chaps over at the <a href="http://www.vagrantup.com/">Vagrant</a> project have recently released a <a href="http://www.vagrantup.com/vmware">plugin to let Vagrant work with VMWare Fusion</a> &ndash; this means we can finally use Vagrant to provision OS X VMs.</p>

<p>Why is this a good thing? Do you NetBoot VMWare to test your builds? Or maybe you still have that test Mac on your desk to test your builds. Either way, it&rsquo;s going to be several minutes to restore an image, even if you&rsquo;re thin imaging. With the VM already on your machine, you&rsquo;re ready to go in seconds. Another bonus is that Vagrant isn&rsquo;t only limited to OS X virtual machines &ndash; for example, I have a Vagrant configuration that spins up an Ubuntu box configured as a Munki server, with a copy of my repository on an external drive. This allows me to test deployments from anywhere, with everything local to my Mac (have you ever tried testing a Final Cut Studio package from home? 48GB takes a while to download.). I&rsquo;ll go into more detail on this setup in a future post, but for now here&rsquo;s how to get a Mac base box into Vagrant.<!--more--></p>

<h2>Pre-requisites</h2>

<ul>
<li><a href="https://itunes.apple.com/gb/app/os-x-mountain-lion/id537386512?mt=12">Install OS X Mountain Lion.app from the App Store</a></li>
<li><a href="http://www.vmware.com/products/fusion/overview.html">VMWare Fusion</a></li>
<li><a href="http://downloads.vagrantup.com/">Vagrant</a> (this was written using Vagrant 1.2.7)</li>
<li><a href="http://www.vagrantup.com/vmware">Vagrant VMWare plugin</a></li>
<li><a href="http://www.packer.io/downloads.html">Packer</a> (I&rsquo;m using Packer 0.3.1)</li>
<li>Git (Install the Command Line Tools from within <a href="https://itunes.apple.com/gb/app/xcode/id497799835?mt=12">Xcode&rsquo;s</a> preferences if you don&rsquo;t have it).</li>
</ul>


<h2>Get set up with Packer</h2>

<p>Before we install Packer, you&rsquo;re going to need to download it. No, really, you need it.</p>

<p>Assuming you&rsquo;ve downloaded it to <code>~/Downloads</code>, extract the zip file so you will be left with something like this: <code>~/Downloads/0.3.1_darwin_amd</code>. Everything prefaced with a <code>$</code> should be entered in your terminal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo mv ~/Downloads/0.3.1_darwin_amd64 /usr/local/packer
</span><span class='line'><span class="nv">$ </span>sudo chown <span class="nv">$USER</span> /usr/local/packer
</span></code></pre></td></tr></table></div></figure>


<p>You now have a choice: you can refer to the <code>packer</code> binary by it&rsquo;s full path every time (<code>/usr/local/packer/packer</code>), or you can modify your path. The next step is entirely optional, but I highly recommend it. You need to edit <code>~/.profile</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nano ~/.profile
</span></code></pre></td></tr></table></div></figure>


<p>And add this line to the file, then save it (<code>CTRL-O</code> then <code>CTRL-X</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/usr/local/packer:$PATH&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then quit and re-open Terminal.app.</p>

<h2>Templates</h2>

<p>Packer uses template files to define how it should build the VM for you. Fortunately, <a href="http://macops.ca">Tim Sutton</a> has created a template file that can be used with Packer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># I keep other people&#39;s code in ~/src/Others</span>
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/timsutton/osx-vm-templates.git ~/src/Others
</span></code></pre></td></tr></table></div></figure>


<p>There are a couple of prep steps we need to do before we can instruct Packer to make our box. First off it&rsquo;s going to need installation media. There is a script that will prepare the Install OS X Mountain Lion.app so it can be used with Packer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/Others/osx-vm-templates
</span><span class='line'><span class="nv">$ </span>sudo prepare_iso/prepare_iso.sh <span class="s2">&quot;/Applications/Install OS X Mountain Lion.app&quot;</span> out
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll see some activity in your terminal, and then you&rsquo;ll be given the filename of your installation DMG and the checksum. You&rsquo;ll need these in the next step.</p>

<p>Open up <code>packer/template.json</code> in your favourite editor. Paste in the checksum you were given in the last step (yours will probably be different from mine), and specify the path to your installation DMG (obviously use the path to your home directory, not mine!). You can also edit the size of the disk, the memory etc in this file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;iso_checksum&quot;</span><span class="err">:</span> <span class="s2">&quot;14cd20f75c7c0405198fa98006a4442e&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;iso_url&quot;</span><span class="err">:</span> <span class="s2">&quot;file:///Users/grahamgilbert/src/Others/osx-vm-templates/out/OSX_InstallESD_10.8.4_12E55.dmg&quot;</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prepare the build!</h2>

<p>You&rsquo;re ready to go. This next step will take <strong>AGES</strong> so go and make a cup of coffee (or tea), as this is going to install OS X, run through the scripts to install the bits Vagrant needs (like Puppet), then make a Vagrant base box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Make sure we&#39;re in the right directory</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/Others/osx-vm-templates/packer
</span><span class='line'><span class="nv">$ </span>packer build template.json
</span></code></pre></td></tr></table></div></figure>


<p>After you hit return, VMware will open up and OS X will start installing. Once everything is done, and Packer tells you it&rsquo;s done in your terminal window, you just need to add it to Vagrant and then you&rsquo;re ready to use it.</p>

<h2>Adding the VM to Vagrant</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box add osx ~/src/Others/osx-vm-templates/packer/packer_vmware_vmware.box
</span></code></pre></td></tr></table></div></figure>


<h2>Using the VM in Vagrant</h2>

<p>We&rsquo;re going to make a quick Vagrant configuration using your newly built box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p ~/Desktop/osx_test
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Desktop/osx_test
</span><span class='line'><span class="nv">$ </span>vagrant init osx
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;re probaly going to want a GUI when it boots, so open up <code>~/Desktop/osx_test/Vagrantfile</code> in your text editor of choice and find the next section.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.vm.provider :virtualbox do |vb|</span>
</span><span class='line'><span class="c1">#   # Don&#39;t boot with headless mode</span>
</span><span class='line'><span class="c1">#   vb.gui = true</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   # Use VBoxManage to customize the VM. For example to change memory:</span>
</span><span class='line'><span class="c1">#   vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;1024&quot;]</span>
</span><span class='line'><span class="c1"># end</span>
</span></code></pre></td></tr></table></div></figure>


<p>  And change it to read</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:vmware_fusion</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'><span class="c1">#   # Don&#39;t boot with headless mode</span>
</span><span class='line'>   <span class="n">v</span><span class="o">.</span><span class="n">gui</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   # Use VBoxManage to customize the VM. For example to change memory:</span>
</span><span class='line'><span class="c1">#   vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;1024&quot;]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately there isn&rsquo;t any support for OS X in the official Vagrant release (yet), but good old Tim Sutton has sorted that out for us. We&rsquo;re going to clone his repository, switch to the branch with his changes and copy the needed files into the main Vagrant installation. Hopefully his changes will be merged into a future of Vagrant, but for now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/Others
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/timsutton/vagrant.git timsutton-vagrant
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/Others/timsutton-vagrant
</span><span class='line'><span class="nv">$ </span>git checkout guest-plugin-osx
</span><span class='line'><span class="nv">$ </span>sudo cp -R ~/src/Others/timsutton-vagrant/plugins/guests/osx /Applications/Vagrant/embedded/gems/gems/vagrant-1.2.7/plugins/guests/osx
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re ready to boot the thing now &ndash; make it so, number one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Desktop/osx_test
</span><span class='line'><span class="nv">$ </span>vagrant up --provider vmware_fusion
</span></code></pre></td></tr></table></div></figure>


<p>You should see VMWare Fusion open if it&rsquo;s not already running and your VM boot after a little while.</p>

<h2>What&rsquo;s next?</h2>

<p>You can configure this box with a script, or using Puppet or Chef (can you guess which I&rsquo;d do?)?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Luggage: Further automation]]></title>
    <link href="http://grahamgilbert.com/blog/2013/08/19/the-luggage-further-automation/"/>
    <updated>2013-08-19T11:33:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/08/19/the-luggage-further-automation</id>
    <content type="html"><![CDATA[<p>As promised in my previous post, today we&rsquo;re going to look at how we can further refine our workflow, with the aim of cutting out as many manual steps as possible (every IT person knows it&rsquo;s not computer that make mistakes, it&rsquo;s the idiots in front of them) and making as much of our code re-usable in other packages.</p>

<p>If you&rsquo;ve not read the <a href="http://grahamgilbert.com/blog/2013/08/09/the-luggage-an-introduction/">previous article</a>, you will need to before carrying on with this, unless you&rsquo;re already familiar with The Luggage. If you get stuck, all of the code from this post is <a href="https://github.com/grahamgilbert/the-luggage-post-201308">up on Github</a>.<!--more--></p>

<h2>Getting scriptRunner</h2>

<p>Anyone who uses our Makefile will need a copy of scriptRunner before they can build the script, so we&rsquo;ll cut out that step. Our Makefile becomes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>USE_PKGBUILD=1
</span><span class='line'>include /usr/local/share/luggage/luggage.make
</span><span class='line'>TITLE=scriptRunnerPkg
</span><span class='line'>REVERSE_DOMAIN=com.grahamgilbert
</span><span class='line'>PAYLOAD=\
</span><span class='line'>  pack-scriptRunner\
</span><span class='line'>  pack-Library-LaunchAgents-com.grahamgilbert.scriptrunner.plist
</span><span class='line'>
</span><span class='line'>REPO_URL=https://github.com/natewalck/Scripts.git
</span><span class='line'>
</span><span class='line'>pack-scriptRunner: l_usr_local_bin
</span><span class='line'>  @sudo git clone ${REPO_URL} natewalck-scripts
</span><span class='line'>  @sudo ${CP} natewalck-scripts/scriptRunner.py ${WORK_D}/usr/local/bin/scriptRunner.py
</span><span class='line'>  @sudo chmod 755 ${WORK_D}/usr/local/bin/scriptRunner.py
</span><span class='line'>  @sudo chown root:wheel ${WORK_D}/usr/local/bin/scriptRunner.py
</span><span class='line'>  @sudo rm -rf natewalck-scripts</span></code></pre></td></tr></table></div></figure>


<p>All we&rsquo;ve done is moved the manual <code>git clone</code> we were performing on the command line into our Makefile, as this is a step that is required for our package to build successfully. Our aim is to be able to give someone else our code and for them to be able to run <code>make pkg</code> and get the package out of the other end.</p>

<h2>The real work</h2>

<p>Whilst we are now successfully installing <code>scriptRunner.py</code>, it&rsquo;s not actually going to do anything. <code>scriptRunner.py</code> is passed the paths of two directories &ndash; one of scripts it runs every time a user logs in, and another of scripts that it runs once for each user. We specified those directories in the Launch Agent: <code>/Library/Management/scriptRunner/once</code> and <code>/Library/Management/scriptRunner/every</code>.</p>

<p>This time we&rsquo;re going to build a package that will drop a shortcut to a file server (an <code>.afploc</code>) on each person&rsquo;s desktop as they log in, but do it once only (so they can delete it if they wish). We could do this by modifying the default user template, but this would only affect new users, if there are existing users on the machine they won&rsquo;t get our lovely shortcut. Our package will do the following:</p>

<ul>
<li>Install our .afploc file to <code>/Library/Management/Desktop_Icons</code></li>
<li>Install our script to copy the .afploc to <code>~/Desktop</code> when the user logs in</li>
</ul>


<p>Our Makefile should look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>USE_PKGBUILD=1
</span><span class='line'>include /usr/local/share/luggage/luggage.make
</span><span class='line'>
</span><span class='line'>TITLE=Desktop_Icons
</span><span class='line'>PACKAGE_NAME=Desktop_Icons
</span><span class='line'>REVERSE_DOMAIN=com.grahamgilbert
</span><span class='line'>PAYLOAD=\
</span><span class='line'>  pack-server\
</span><span class='line'>  pack-script
</span><span class='line'>  
</span><span class='line'>pack-server:
</span><span class='line'>  @sudo mkdir -p ${WORK_D}/Library/Management/Desktop_Icons
</span><span class='line'>  @sudo ${CP} forpeople\ Server.afploc ${WORK_D}/Library/Management/Desktop_Icons/File\ Server.afploc
</span><span class='line'>  @sudo chown -R root:wheel ${WORK_D}/Library/Management/Desktop_Icons
</span><span class='line'>  @sudo chmod -R 755 ${WORK_D}/Library/Management/Desktop_Icons
</span><span class='line'>  
</span><span class='line'>pack-script:
</span><span class='line'>  @sudo mkdir -p ${WORK_D}/Library/Management/scriptRunner/once
</span><span class='line'>  @sudo ${CP} forpeople_Desktop_Icons_20130729 ${WORK_D}/Library/Management/scriptRunner/once/Desktop_Icons_201308
</span><span class='line'>  @sudo chown root:wheel ${WORK_D}/Library/Management/scriptRunner/once/Desktop_Icons_201308
</span><span class='line'>  @sudo chmod 755 ${WORK_D}/Library/Management/scriptRunner/once/Desktop_Icons_201308</span></code></pre></td></tr></table></div></figure>


<p>And the script that does the work (<code>Desktop_Icons_201308</code>) will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -e ~/Desktop/File<span class="se">\ </span>Server.afploc <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">    </span>rm -f ~/Desktop/File<span class="se">\ </span>Server.afploc
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>cp /Library/Management/Desktop_Icons/File<span class="se">\ </span>Server.afploc ~/Desktop/File<span class="se">\ </span>Server.afploc
</span></code></pre></td></tr></table></div></figure>


<p>The script is pretty simple &ndash; if the shortcut already exists (maybe they&rsquo;ve got a previous version pointing to an old server) it gets removed, and then a new one is copied onto the desktop. I&rsquo;ve dated the script as scriptRunner only stores the name of the script to know what it&rsquo;s run &ndash; if you replace the script with an updated version but keep the same name, it won&rsquo;t run again (obviously this only applies to scripts that are in the &lsquo;once&rsquo; directory).</p>

<p>Great, it works. But what happens if you want to put another script on the machine to run with scriptRunner? Or maybe you want some more icons &ndash; you&rsquo;re about to do a lot of copying and pasting. Wouldn&rsquo;t it be great if we could store the parts that are creating directories and performing common operations in a shared place so multiple Makefiles could use them?</p>

<p>Enter <code>/usr/local/share/luggage/luggage.local</code> .</p>

<p>When you run <code>make pkg</code>, The Luggage will check for the existence of <code>/usr/local/share/luggage/luggage.local</code>, and use any additions you&rsquo;ve put in there. We&rsquo;re definitely going to be putting scripts into <code>/Library/Management/scriptRunner/once</code> and <code>/Library/Management/scriptRunner/every</code>quite often, so we should automate this.</p>

<p>Here&rsquo;s what my <code>luggage.local</code> file looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>l_Library_Management: l_Library
</span><span class='line'>  @sudo mkdir -p <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management
</span><span class='line'>  @sudo chown root:wheel <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management
</span><span class='line'>  @sudo chmod 755 <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management
</span><span class='line'>
</span><span class='line'>l_Library_Management_scriptRunner: l_Library_Management
</span><span class='line'>  @sudo mkdir -p <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner
</span><span class='line'>  @sudo chown root:wheel <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner
</span><span class='line'>  @sudo chmod 755 <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner
</span><span class='line'>
</span><span class='line'>l_Library_Management_scriptRunner_once: l_Library_Management_scriptRunner
</span><span class='line'>  @sudo mkdir -p <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/once
</span><span class='line'>  @sudo chown root:wheel <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/once
</span><span class='line'>  @sudo chmod 755 <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/once
</span><span class='line'>  
</span><span class='line'>l_Library_Management_scriptRunner_every: l_Library_Management_scriptRunner
</span><span class='line'>  @sudo mkdir -p <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/every
</span><span class='line'>  @sudo chown root:wheel <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/every
</span><span class='line'>  @sudo chmod 755 <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/every
</span><span class='line'>
</span><span class='line'>pack-Library-Management-scriptRunner-once-%: % l_Library_Management_scriptRunner_once
</span><span class='line'>  @sudo <span class="k">${</span><span class="nv">INSTALL</span><span class="k">}</span> -m 755 -g wheel -o root <span class="s2">&quot;${&lt;}&quot;</span> <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/once
</span><span class='line'>  
</span><span class='line'>pack-Library-Management-scriptRunner-every-%: % l_Library_Management_scriptRunner_every
</span><span class='line'>  @sudo <span class="k">${</span><span class="nv">INSTALL</span><span class="k">}</span> -m 755 -g wheel -o root <span class="s2">&quot;${&lt;}&quot;</span> <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/scriptRunner/every
</span></code></pre></td></tr></table></div></figure>


<p>The first few parts should be pretty obvious to you &ndash; we&rsquo;re just making some directories and setting ownership and permissions. The last two sections are of more interest. We&rsquo;re using the <code>INSTALL</code> variable, which is set to <code>/usr/bin/install</code> in <code>luggage.make</code> to move a file and set ownership and permissions. We&rsquo;re using the same technique as we used last time to install the Launch Agent. This means that our Makefile can become:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">USE_PKGBUILD</span><span class="o">=</span>1
</span><span class='line'>include /usr/local/share/luggage/luggage.make
</span><span class='line'>
</span><span class='line'><span class="nv">TITLE</span><span class="o">=</span>Desktop_Icons
</span><span class='line'><span class="nv">PACKAGE_NAME</span><span class="o">=</span>Desktop_Icons
</span><span class='line'><span class="nv">REVERSE_DOMAIN</span><span class="o">=</span>com.grahamgilbert
</span><span class='line'><span class="nv">PAYLOAD</span><span class="o">=</span><span class="se">\</span>
</span><span class='line'>  pack-server<span class="se">\</span>
</span><span class='line'>  pack-Library-Management-scriptRunner-once-Desktop_Icons_201308
</span><span class='line'>  
</span><span class='line'>pack-server:
</span><span class='line'>  @sudo mkdir -p <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/Desktop_Icons
</span><span class='line'>  @sudo <span class="k">${</span><span class="nv">CP</span><span class="k">}</span> File<span class="se">\ </span>Server.afploc <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/Desktop_Icons/File<span class="se">\ </span>Server.afploc
</span><span class='line'>  @sudo chown root:wheel <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/Desktop_Icons/File<span class="se">\ </span>Server.afploc
</span><span class='line'>  @sudo chmod 644 <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/Library/Management/Desktop_Icons/File<span class="se">\ </span>Server.afploc
</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;re not only cutting out cruft from our Makefile for this package, but it makes future packages much faster to create, eliminating the problem between the keyboard and chair. You could (should!) even put your <code>luggage.local</code> file under source control (mine is <a href="https://github.com/grahamgilbert/luggage_local">on my Github account</a>), so your changes are tracked, and you can collaborate with your colleagues .</p>

<p>You&rsquo;ll notice there is still the section for copying the .afploc. You have two choices here: maybe this is the only time you&rsquo;re ever going to install a file in this directory, in which case this is perfectly fine to leave in the Makefile. However, if you are going to be putting lots of files here, as we are with <code>/Library/Management/scriptRunner</code>, you might want to move this into your <code>luggage.local</code> file so it is available across all of your Makefiles. You homework, should you choose to accept it, is to generalise that section so it can be reused and move it to <code>luggage.local</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Luggage: An Introduction]]></title>
    <link href="http://grahamgilbert.com/blog/2013/08/09/the-luggage-an-introduction/"/>
    <updated>2013-08-09T18:00:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/08/09/the-luggage-an-introduction</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve managed OS X for any amount of time, chances are you&rsquo;ve needed to deploy software. And chances also are that you&rsquo;ve come across a vendor (I&rsquo;m looking at you, Adobe) that seems to be incapable of distributing their software in a useful manner. Or maybe you&rsquo;ve got your own scripts or software that you need to get installed on the machines that you look after &ndash; either way, you&rsquo;re going to want to build a package.</p>

<p>You&rsquo;ve got a few options &ndash; Iceberg, Packages, Composer, you&rsquo;ve even got Package Maker. However, my personal choice is The Luggage. It has a few advantages over the alternatives:</p>

<ul>
<li><strong>It&rsquo;s all text files:</strong> You&rsquo;re building software distributions, you should be checking the files in to build the packages into version control, such as Git. Text files are ideal for checking into version control.</li>
<li><strong>It&rsquo;s free:</strong> if it costs nothing, there&rsquo;s no reason it can&rsquo;t be installed on everyone&rsquo;s machine.</li>
<li><strong>It&rsquo;s (still) all text files:</strong> Want to see what will be in the package without any extra work? Crack open the Makefile and you can see straight away what will be in the package.</li>
<li><strong>The Luggage has a metric buttload of shortcuts built in:</strong> it does the hard work, so you don&rsquo;t have to.</li>
<li><strong>It&rsquo;s repeatable:</strong> Have you ever tried to talk someone through a series of windows and buttons to get the same result as you&rsquo;re getting? Every time you run The Luggage, you will get the same result.</li>
<li><strong>It&rsquo;s (really, still) all text files:</strong> It&rsquo;s the most precise tool I&rsquo;ve used &ndash; you only package exactly what you need, no cruft is left behind.</li>
<li><strong>Your workflow is limited only by your imagination:</strong> Seriously, you can do pretty much anything you can think of. We&rsquo;ll be going through more advanced workflows in future posts, but let&rsquo;s get started with using The Luggage.<!--more--></li>
</ul>


<h2>Getting set up</h2>

<p>We&rsquo;re going to grab the current version of The Luggage from the git repository. If you don&rsquo;t have git, you can install the Command Line Tools from within <a href="https://itunes.apple.com/gb/app/xcode/id497799835?mt=12">Xcode&rsquo;s</a> preferences if you don&rsquo;t have it. If you don&rsquo;t have Xcode, and the Command Line Tools installed, very little is going to work, so go and install it. It&rsquo;s ok, I&rsquo;ll wait.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/unixorn/luggage.git
</span></code></pre></td></tr></table></div></figure>


<p>Now we are going to use The Luggage to install itself (oooh, meta). You&rsquo;ll be asked for your password, as it will need to perform some tasks as root.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/luggage
</span><span class='line'><span class="nv">$ </span>make bootstrap_files
</span></code></pre></td></tr></table></div></figure>


<h2>Your first Makefile</h2>

<p>Now you&rsquo;ve got everything set up, we&rsquo;re going to write our first Makefile. We&rsquo;re going to make a package to deploy Nate Walck&rsquo;s awesome <a href="https://github.com/natewalck/Scripts/blob/master/scriptRunner.py">scriptRunner.py</a>. Everything prefaced with a <code>$</code> should be typed into your Terminal window.</p>

<p>First we&rsquo;re going to grab the repository from GitHub:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/natewalck/Scripts.git natewalck-scripts
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re going to make a directory to work in for our package and copy scriptRunner.py into it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src
</span><span class='line'><span class="nv">$ </span>mkdir -p ~/src/scriptRunnerPkg
</span><span class='line'><span class="nv">$ </span>cp ~/src/natewalck-scripts/scriptRunner.py ~/src/scriptRunnerPkg/scriptRunner.py
</span></code></pre></td></tr></table></div></figure>


<p>So far so good. Now for the actual Makefile. Create a file in your favourite editor (I recommend <a href="http://macromates.com/download">TextMate 2</a>), save it as Makefile in <code>~/src/scriptRunnerPkg</code> and put in the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">USE_PKGBUILD</span><span class="o">=</span>1
</span><span class='line'>include /usr/local/share/luggage/luggage.make
</span><span class='line'><span class="nv">TITLE</span><span class="o">=</span>scriptRunnerPkg
</span><span class='line'><span class="nv">REVERSE_DOMAIN</span><span class="o">=</span>com.grahamgilbert
</span><span class='line'><span class="nv">PAYLOAD</span><span class="o">=</span><span class="se">\</span>
</span><span class='line'>  pack-scriptRunner
</span><span class='line'>
</span><span class='line'>pack-scriptRunner: l_usr_local_bin
</span><span class='line'>  @sudo <span class="k">${</span><span class="nv">CP</span><span class="k">}</span> ./scriptRunner.py <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/usr/local/bin/scriptRunner.py
</span><span class='line'>  @sudo chmod 755 <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/usr/local/bin/scriptRunner.py
</span><span class='line'>  @sudo chown root:wheel <span class="k">${</span><span class="nv">WORK_D</span><span class="k">}</span>/usr/local/bin/scriptRunner.py
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go through this line by line. First, we&rsquo;re overloading a default variable. Back in the day, The Luggage used Package Maker to perform the actual build of the package. This has been deprecated by Apple, replaced with pkgbuild and productbuild. We&rsquo;re just telling The Luggage to go straight ahead and use pkgbuild.</p>

<p>We&rsquo;re then including the main Makefile, which contains all of the pre-built work that we can extend with our own Makefiles.</p>

<p><code>TITLE</code> and <code>REVERSE_DOMAIN</code> are exactly that &ndash; the title and reverse domain of the package.</p>

<p>Finally, we&rsquo;re specifying what our payload is going to consist of &ndash; in this case, just scriptRunner. Line 8 is using the foundation that The Luggage has already built &ndash; installing software into <code>/usr/local/bin</code> is pretty standard, so we don&rsquo;t need to reinvent the wheel here &ndash; we just need to tell The Luggage what to do with the one file we&rsquo;re installing, it will work out the rest.</p>

<h3>An important note on Makefiles</h3>

<p>Makefiles are really picky about formatting and spacing &ndash; if you get strange errors, make sure you are using tab characters rather than spaces for example. and make sure you&rsquo;ve not missed off a colon or a back-slash anywhere.</p>

<h2>Prepare the build!</h2>

<p>We&rsquo;re ready to build. Let&rsquo;s do it. No need to run this as sudo, The Luggage will ask for your password if it needs it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/scriptRunnerPkg
</span><span class='line'>make pkg
</span></code></pre></td></tr></table></div></figure>


<p>If everything has gone well, some text will scroll into your Terminal window and you&rsquo;ll be left with a package sitting in <code>~/src/scriptRunnerPkg</code>.</p>

<p>That&rsquo;s all well and good, but we need a LaunchAgent to run the script when someone logs in. Save the following in <code>~/src/scriptRunnerPkg</code> and name it <code>com.grahamgilbert.scriptrunner.plist</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;?xml <span class="nv">version</span><span class="o">=</span><span class="s2">&quot;1.0&quot;</span> <span class="nv">encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span>?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC <span class="s2">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="s2">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;
</span><span class='line'>&lt;plist <span class="nv">version</span><span class="o">=</span><span class="s2">&quot;1.0&quot;</span>&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>  &lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>  &lt;string&gt;com.grahamgilbert.scriptrunner&lt;/string&gt;
</span><span class='line'>  &lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>  &lt;array&gt;
</span><span class='line'>      &lt;string&gt;/usr/local/bin/scriptRunner.py&lt;/string&gt;
</span><span class='line'>      &lt;string&gt;--once&lt;/string&gt;
</span><span class='line'>      &lt;string&gt;/Library/Management/scriptRunner/once&lt;/string&gt;
</span><span class='line'>      &lt;string&gt;--every&lt;/string&gt;
</span><span class='line'>      &lt;string&gt;/Library/Management/scriptRunner/every&lt;/string&gt;
</span><span class='line'>  &lt;/array&gt;
</span><span class='line'>  &lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>  &lt;<span class="nb">true</span>/&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This will tell scriptRunner.py to run everything in <code>/Library/Management/scriptRunner/once</code> once per use and everything in <code>/Library/Management/scriptRunner/every</code> each and every single time the user logs in.</p>

<p>That&rsquo;s nice, but how do we get it into our package? Change the payload section to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PAYLOAD</span><span class="o">=</span><span class="se">\</span>
</span><span class='line'>  pack-scriptRunner<span class="se">\</span>
</span><span class='line'>  pack-Library-LaunchAgents-com.grahamgilbert.scriptrunner.plist
</span></code></pre></td></tr></table></div></figure>


<p>And now rebuild the package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/scriptRunnerPkg
</span><span class='line'>make pkg
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! As putting a plist into <code>/Library/LaunchAgents</code> is as common as a BSOD on Vista, it&rsquo;s built right into The Luggage. A list of most of the available payload additions can be found on <a href="https://github.com/unixorn/luggage/wiki">the wiki</a> &ndash; this isn&rsquo;t everything though. Have a nose through <code>/usr/local/share/luggage/luggage.make</code> to see everything you can do.</p>

<p>This is obviously a working solution, but there are many manual steps needed if we are sharing our code with others. We&rsquo;ll look into automating some of the steps and deploying a script that scriptRunner.py can work with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buildCrankPkg]]></title>
    <link href="http://grahamgilbert.com/blog/2013/07/17/buildcrankpkg/"/>
    <updated>2013-07-17T16:31:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/07/17/buildcrankpkg</id>
    <content type="html"><![CDATA[<p>In my <a href="http://grahamgilbert.com/blog/2013/07/12/using-crankd-to-react-to-network-events/">last post</a> I promised a tool I&rsquo;ve been working on to automate the building of a package for crankd.</p>

<p><a href="https://github.com/grahamgilbert/buildCrankPkg">buildCrankPkg</a> is a small script that will:</p>

<ul>
<li>Pull down the latest version of crankd (or use a local or remote repository if you specify one)</li>
<li>Build a package that includes crankd and your custom settings and scripts.</li>
</ul>


<p>I&rsquo;ve included two examples, one that implements calling Munki and Puppet as detailed in the last post, and one to run a Casper policy.</p>

<p>If you&rsquo;re happy with what crankd does and using the command line, head on over to the <a href="https://github.com/grahamgilbert/buildCrankPkg">repository</a> and enjoy. If you need a bit more help to get started, read on.<!--more--></p>

<h2>Tutorial</h2>

<p>First off, you&rsquo;re going to need to get the buildCrankPkg repository.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/src
</span><span class='line'>git clone https://github.com/grahamgilbert/buildCrankPkg.git
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;re left with three directories that you need to fill:</p>

<ul>
<li><code>crankd</code>: You will be putting your custom code in here.</li>
<li><code>Preferences</code>: Just a plist that will call our custom code.</li>
<li><code>LaunchDaemons</code>: A LaunchDaemon to run crankd &ndash; an example that should be fine is already there.</li>
</ul>


<p>Assuming you cloned the <code>buildCrankPkg</code> repository to <code>~/src/buildCrankPkg</code>, save the following as <code>~/src/buildCrankPkg/crankd/CrankTools.py</code> (or copy the example). The only change between this one and the <code>CrankTools.py</code> from last time is that we&rsquo;re calling the JAMF binary to run a Casper policy (I know, the horror, I do actually use Casper occasionally). Our trigger&rsquo;s name is NetworkTrigger &ndash; the line you&rsquo;d need to customise to change this is <code>28</code>.</p>

<figure class='code'><figcaption><span>CrankTools.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    CrankTools.py</span>
</span><span class='line'><span class="c">#        The OnNetworkLoad method is called from crankd on a network state change, all other</span>
</span><span class='line'><span class="c">#            methods assist it. Modified from Gary Larizza&#39;s script (https://gist.github.com/glarizza/626169).</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    Last Revised - 10/07/2013</span>
</span><span class='line'>
</span><span class='line'><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;Graham Gilbert (graham@grahamgilbert.com)&#39;</span>
</span><span class='line'><span class="n">__version__</span> <span class="o">=</span> <span class="s">&#39;0.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">syslog</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'>
</span><span class='line'><span class="n">syslog</span><span class="o">.</span><span class="n">openlog</span><span class="p">(</span><span class="s">&quot;CrankD&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CrankTools</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;The main CrankTools class needed for our crankd config plist&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">policyRun</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Checks for an active network connection and calls the jamf binary if it finds one.</span>
</span><span class='line'><span class="sd">            If the network is NOT active, it logs an error and exits</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments: None</span>
</span><span class='line'><span class="sd">        Returns:  Nothing</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;jamf&#39;</span><span class="p">,</span><span class="s">&#39;policy&#39;</span><span class="p">,</span><span class="s">&#39;-trigger&#39;</span><span class="p">,</span><span class="s">&#39;NetworkTrigger&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">LinkState</span><span class="p">(</span><span class="s">&#39;en1&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">callCmd</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">LinkState</span><span class="p">(</span><span class="s">&#39;en0&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">callCmd</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">syslog</span><span class="o">.</span><span class="n">syslog</span><span class="p">(</span><span class="n">syslog</span><span class="o">.</span><span class="n">LOG_ALERT</span><span class="p">,</span> <span class="s">&quot;Internet Connection Not Found, Puppet Run Exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">callCmd</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Simple utility function that calls a command via subprocess</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments: command - A list of arguments for the command</span>
</span><span class='line'><span class="sd">        Returns: Nothing</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">LinkState</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">interface</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;This utility returns the status of the passed interface.</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments:</span>
</span><span class='line'><span class="sd">            interface - Either en0 or en1, the BSD interface name of a Network Adapter</span>
</span><span class='line'><span class="sd">        Returns:</span>
</span><span class='line'><span class="sd">            status - The return code of the subprocess call</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">([</span><span class="s">&quot;ipconfig&quot;</span><span class="p">,</span> <span class="s">&quot;getifaddr&quot;</span><span class="p">,</span> <span class="n">interface</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">OnNetworkLoad</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Called from crankd directly on a Network State Change. We sleep for 10 seconds to ensure that</span>
</span><span class='line'><span class="sd">            an IP address has been cleared or attained, and then perform a Puppet run and a Munki run.</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments:</span>
</span><span class='line'><span class="sd">            *args and **kwargs - Catchall arguments coming from crankd</span>
</span><span class='line'><span class="sd">        Returns:  Nothing</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">policyRun</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">crank</span> <span class="o">=</span> <span class="n">CrankTools</span><span class="p">()</span>
</span><span class='line'>    <span class="n">crank</span><span class="o">.</span><span class="n">OnNetworkLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the preferences &ndash; no change from last time here, as we&rsquo;ve not changed the name of our class or method. This goes into <code>~/src/buildCrankPkg/Preferences/com.googlecode.pymacadmin.crankd.plist</code></p>

<figure class='code'><figcaption><span>com.googlecode.pymacadmin.crankd.plist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;key&gt;</span>SystemConfiguration<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>            <span class="nt">&lt;key&gt;</span>State:/Network/Global/IPv4<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>            <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>                <span class="nt">&lt;key&gt;</span>method<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;string&gt;</span>CrankTools<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;string&gt;</span>OnNetworkLoad<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One last step until we can build our package is the Launch Daemon &ndash; we&rsquo;re going to use the one that&rsquo;s included in the repository, as 99% of people won&rsquo;t need to change it.</p>

<h2>Prepare the build!</h2>

<p>Our package needs to have the version number of 2.1 and we&rsquo;re going to set the package&rsquo;s identifier to com.example.crankd</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/src/buildCrankPkg
</span><span class='line'>sudo ./buildCrankPkg.py  --version 2.1 --identifier com.example.crankd
</span></code></pre></td></tr></table></div></figure>


<p>Your package will be in <code>~/src/buildCrankPkg</code> waiting for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using crankd to react to network events]]></title>
    <link href="http://grahamgilbert.com/blog/2013/07/12/using-crankd-to-react-to-network-events/"/>
    <updated>2013-07-12T14:04:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/07/12/using-crankd-to-react-to-network-events</id>
    <content type="html"><![CDATA[<p>Updated 14/7/2013: After <a href="https://twitter.com/Sacrilicious/status/355756510535614464">Alister&rsquo;s suggestion</a>, the script now loops over network interfaces up to en19 (hopefully that&rsquo;s enough!).</p>

<p>So, you&rsquo;ve heard of this crankd thing, maybe even had a look at it, but have no idea how to get it going? You&rsquo;re in the right place. I&rsquo;m by no means an expert on it, having only been playing with it for less than a week, but I already have it running in production running the simple script below. My initial work, and therefore this post was inspired by Gary Larizza&rsquo;s <a href="http://web.archive.org/web/20120111031339/http://glarizza.posterous.com/using-crankd-to-react-to-network-events">two</a> <a href="http://garylarizza.com/blog/2011/12/31/using-the-google-macops-crankd-and-facter-code/">articles</a> on the subject.</p>

<h2>What is crankd?</h2>

<p>It&rsquo;s part of the <a href="https://github.com/acdha/pymacadmin">PyMacAdmin</a> set of tools that <a href="http://chris.improbable.org/">Chris Adams</a> and <a href="http://explanatorygap.net">Nigel Kersten</a> released a while ago. In a nutshell, it runs in the background via a LaunchDaemon and reacts to events on the Mac by running a script or a Python function, class or method. It has loads of events it knows about (application launches, power events, network events etc), but in this case I wanted to run something when there was a network change. Some of our machines never get turned off (and for some reason the Puppet Launch Daemon has crapped out), or aren&rsquo;t turned on long enough for Puppet or Munki to run. I wanted a script that would run every time the machine came back onto the network, checking if there was an active connection and run Puppet and Munki.</p>

<h2>What do I need to do?</h2>

<p>There are a few parts that we need to bring together to make this work:</p>

<ul>
<li>The crankd.py executable and the supporting files</li>
<li>A Launch Daemon to start the thing</li>
<li>A preferences file to tell crankd what to do</li>
<li>And finally, our custom code</li>
</ul>


<!--more-->


<h2>Get and install crankd</h2>

<p>First off, you need to grab the current code from GitHub.</p>

<p><code>
git clone https://github.com/acdha/pymacadmin.git
</code></p>

<p>Then <code>cd</code> into the pymacadmin directory you just cloned and run <code>install-crankd.sh</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/src/pymacadmin
</span><span class='line'>sudo ./install-crankd.sh
</span></code></pre></td></tr></table></div></figure>


<p>That will install the crankd.py executable and it&rsquo;s supporting files, now for the Launch Daemon to make it start at boot. You&rsquo;ll need to put the following into a file at <code>/Library/LaunchDaemons/com.googlecode.pymacadmin.crankd.plist</code>.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.googlecode.pymacadmin.crankd&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/local/sbin/crankd.py&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>And set the right ownership and permissions on the plist</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod 644 /Library/LaunchDaemons/com.googlecode.pymacadmin.crankd.plist
</span><span class='line'>sudo chown root:wheel /Library/LaunchDaemons/com.googlecode.pymacadmin.crankd.plist
</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s the basics. Now we need to tell crankd what events it should listen to and what it should do.</p>

<p>As we want to call the CrankTools class and the OnNetworkLoad method every time the network changes state, we need to do the following in <code>/Library/Preferences/com.googlecode.pymacadmin.crankd.plist</code>. To see what other events you can use with crankd, head on over to the <a href="https://github.com/acdha/pymacadmin/tree/master/examples/crankd/sample-of-events">GitHub repo</a>.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
    &lt;dict&gt;
        &lt;key&gt;SystemConfiguration&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;State:/Network/Global/IPv4&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;method&lt;/key&gt;
                    &lt;array&gt;
                        &lt;string&gt;CrankTools&lt;/string&gt;
                        &lt;string&gt;OnNetworkLoad&lt;/string&gt;
                    &lt;/array&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>Now for the actual Python code. This is very heavily inspired by <a href="http://garylarizza.com">Gary Larizza&rsquo;s</a> work. We&rsquo;re checking if either en0 or en1 has a valid network connection (as this event is for any network change &ndash; both connecting and disconnecting), and if there is a valid connection, run Puppet and then run Munki. This code could easily be modified to run anything you wanted to at the command line (for example a Casper policy). Put the following script in <code>/Library/Application Support/crankd/CrankTools.py</code>.</p>

<figure class='code'><figcaption><span>title:CrankTools.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    CrankTools.py</span>
</span><span class='line'><span class="c">#        The OnNetworkLoad method is called from crankd on a network state change, all other</span>
</span><span class='line'><span class="c">#            methods assist it. Modified from Gary Larizza&#39;s script (https://gist.github.com/glarizza/626169).</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    Last Revised - 10/07/2013</span>
</span><span class='line'>
</span><span class='line'><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;Graham Gilbert (graham@grahamgilbert.com)&#39;</span>
</span><span class='line'><span class="n">__version__</span> <span class="o">=</span> <span class="s">&#39;0.6&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">syslog</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'>
</span><span class='line'><span class="n">syslog</span><span class="o">.</span><span class="n">openlog</span><span class="p">(</span><span class="s">&quot;CrankD&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CrankTools</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;The main CrankTools class needed for our crankd config plist&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">puppetRun</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Checks for an active network connection and calls puppet if it finds one.</span>
</span><span class='line'><span class="sd">            If the network is NOT active, it logs an error and exits</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments: None</span>
</span><span class='line'><span class="sd">        Returns:  Nothing</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;/usr/bin/puppet&#39;</span><span class="p">,</span><span class="s">&#39;agent&#39;</span><span class="p">,</span><span class="s">&#39;-t&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">LinkState</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">callCmd</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">syslog</span><span class="o">.</span><span class="n">syslog</span><span class="p">(</span><span class="n">syslog</span><span class="o">.</span><span class="n">LOG_ALERT</span><span class="p">,</span> <span class="s">&quot;Internet Connection Not Found, Puppet Run Exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">munkiRun</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Checks for an active network connection and calls Munki if it finds one.</span>
</span><span class='line'><span class="sd">            If the network is NOT active, it logs an error and exits</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments: None</span>
</span><span class='line'><span class="sd">        Returns:  Nothing</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;/usr/local/munki/managedsoftwareupdate&#39;</span><span class="p">,</span><span class="s">&#39;--auto&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">LinkState</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">callCmd</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">syslog</span><span class="o">.</span><span class="n">syslog</span><span class="p">(</span><span class="n">syslog</span><span class="o">.</span><span class="n">LOG_ALERT</span><span class="p">,</span> <span class="s">&quot;Internet Connection Not Found, Munki Run Exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">callCmd</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Simple utility function that calls a command via subprocess</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments: command - A list of arguments for the command</span>
</span><span class='line'><span class="sd">        Returns: Nothing</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>        <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">LinkState</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;This utility returns the status of the passed interface.</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments:</span>
</span><span class='line'><span class="sd">            None</span>
</span><span class='line'><span class="sd">        Returns:</span>
</span><span class='line'><span class="sd">            status - The return code of the subprocess call</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">theState</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">interface</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">):</span>
</span><span class='line'>            <span class="n">interface</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">interface</span><span class="p">)</span>
</span><span class='line'>            <span class="n">adapter</span> <span class="o">=</span> <span class="s">&#39;en&#39;</span> <span class="o">+</span> <span class="n">interface</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;checking adapter &#39;</span><span class="o">+</span><span class="n">adapter</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">([</span><span class="s">&quot;ipconfig&quot;</span><span class="p">,</span> <span class="s">&quot;getifaddr&quot;</span><span class="p">,</span> <span class="n">adapter</span><span class="p">]):</span>
</span><span class='line'>                <span class="n">theState</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">theState</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">OnNetworkLoad</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Called from crankd directly on a Network State Change. We sleep for 10 seconds to ensure that</span>
</span><span class='line'><span class="sd">            an IP address has been cleared or attained, and then perform a Puppet run and a Munki run.</span>
</span><span class='line'><span class="sd">        ---</span>
</span><span class='line'><span class="sd">        Arguments:</span>
</span><span class='line'><span class="sd">            *args and **kwargs - Catchall arguments coming from crankd</span>
</span><span class='line'><span class="sd">        Returns:  Nothing</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">puppetRun</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">munkiRun</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">crank</span> <span class="o">=</span> <span class="n">CrankTools</span><span class="p">()</span>
</span><span class='line'>    <span class="n">crank</span><span class="o">.</span><span class="n">OnNetworkLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s ok, we&rsquo;re nearly there! You just need to set the right owner on <code>CrankTools.py</code> , load the Launch Daemon and we can get testing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chown root:wheel /Library/Application Support/crankd/CrankTools.py
</span><span class='line'>sudo launchctl load /Library/LaunchDaemons/com.googlecode.pymacadmin.crankd.plist`</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;re all set. Disconnect your network connection and re-connect. Put your Mac to sleep and wake it up. Each time, there should be a 10 second delay, then a Puppet run followed by a Munki run will happen.</p>

<p>If you&rsquo;ve modified <code>CrankTools.py</code>, you can test the changes by running the script directly.</p>

<h2>What&rsquo;s next?</h2>

<p>Obviously this is not a good way of deploying crankd &ndash; I&rsquo;ve got a method in the works that will build a package to install this (I currently deploy this with Puppet &ndash; I&rsquo;ll put in a pull request on <a href="https://github.com/glarizza/puppetlabs-crankd">Gary&rsquo;s module</a> with my changes when I get chance). I&rsquo;m also going to be doing more with crankd &ndash; possibly some application use monitoring, almost certainly some scripts fired off when a machine wakes and sleeps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Macs with Puppet at PSU 2013]]></title>
    <link href="http://grahamgilbert.com/blog/2013/05/24/managing-macs-with-puppet-at-psu-2013/"/>
    <updated>2013-05-24T13:56:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/05/24/managing-macs-with-puppet-at-psu-2013</id>
    <content type="html"><![CDATA[<p>For those of you who attended my talk yesterday at PSU MacAdmins on Managing Macs with Puppet, here are are my <a href="http://grahamgilbert.com/images/posts/2013-05-24/Managing_Macs_with_Puppet.pdf">slides</a> and all of the code and servers used are up on <a href="https://github.com/grahamgilbert/puppet_psu_2013">grahamgilbert/puppet_psu_2013 on GitHub</a>. Please comment, <a href="http://grahamgilbert.com/about">email me</a> or catch me on the <a href="http://twitter.com/grahamgilbert">twitter</a> if you have any questions about any of this. Hopefully the video will be up soon, so those of you who weren&rsquo;t there to laugh at the guy with the funny accent can see me dealing with internet fails and my obscure British sit-com references.</p>

<p><strong>Update:</strong> the video has now been posted.</p>

<iframe width="480" height="360" src="http://www.youtube.com/embed/GqerWmKU1Js" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One bootstrap package to rule them all]]></title>
    <link href="http://grahamgilbert.com/blog/2013/04/07/one-bootstrap-package-to-rule-them-all/"/>
    <updated>2013-04-07T15:36:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/04/07/one-bootstrap-package-to-rule-them-all</id>
    <content type="html"><![CDATA[<p>At work, we&rsquo;ve recently changed how we build our bootstrap package to having the main code that connects a Mac to our Puppet infrastructure pulled down from GitHub when the client boots up for the first time.</p>

<h2>Why?</h2>

<p>This might sound like madness to you. Why would anyone want to do this? We had two main issues to solve:</p>

<ul>
<li>I got sick of rebuilding our images every time our bootstrap script changed.</li>
<li>Our engineers got sick of downloading the latest version of our package every time they thin / no-imaged a Mac.</li>
</ul>


<p>Why would our script change so much? In our case, it is to install the latest versions of Puppet and Facter. This isn&rsquo;t strictly necessary, as we update Puppet and Facter with Munki, but occasionally there will be something in our Puppet config that requires a specific version &ndash; for example, when we started configuring usernames on 10.8 Macs with Puppet, the <code>salt</code> parameter was introduced. This required Puppet 3.0.2-ish or higher &ndash; which meant that any NetRestore image or old package that contained a version of Puppet lower than this would fail, and the engineer on site was in for a world of pain.</p>

<h2>Ok, I&rsquo;m convinced.</h2>

<p>I&rsquo;ve put an <a href="https://github.com/grahamgilbert/macscripts/tree/master/Puppet-Bootstrap">example up on GitHub</a>. This is a sanitised version of the bootstrap script we use at pebble.it. All we do in the script that gets deployed to the client is set the address of our Puppet server and then pull the rest of the script from GitHub &ndash; if you don&rsquo;t need to set any variables, you could do all of the work in the remote script.</p>

<p>So this can be used with all of the deployment methods we use at pebble.it (<a href="https://code.google.com/p/instadmg/">imaging</a>, <a href="http://managingosx.wordpress.com/2012/07/25/son-of-installlion-pkg/">createOSXinstallPkg</a> and no imaging), we do the actual work in a script that is triggered by a launch daemon, so we can be sure we&rsquo;re a) performing the work in a full OS X environment (we need Python to be available for our script) and that we&rsquo;re running it on the boot volume of the client Mac (we need the serial number, and this could be installed via Target Disk Mode when no-imaging.</p>

<p>So when the bootstrap script needs to be updated, rather than rebuilding the package and distributing it to engineers and baking it into images, the workflow becomes:</p>

<ol>
<li>Update script, push to GitHub.</li>
<li>Restore image with <a href="https://github.com/grahamgilbert/macscripts/tree/master/Puppet-Bootstrap">puppet_bootstrap.pkg</a> baked in or install the package manually.</li>
<li>Mac boots, downloads the latest version of <a href="https://github.com/grahamgilbert/macscripts/tree/master/Puppet-Install"><code>install_puppet.py</code></a>.</li>
<li><code>install_puppet.py</code> downloads and installs the correct versions of Puppet and Facter and configures Puppet.</li>
<li>Puppet downloads, installs and configures Munki along with all of the other configuration.</li>
<li>PROFIT</li>
</ol>


<p>This clearly isn&rsquo;t required or suitable for all types of script &ndash; but if you have a package that is frequently updated and you have staff installing it by hand, this is a relatively simple way to make sure they&rsquo;ve got the latest version at all times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facter 101]]></title>
    <link href="http://grahamgilbert.com/blog/2013/04/02/facter-101/"/>
    <updated>2013-04-02T10:11:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/04/02/facter-101</id>
    <content type="html"><![CDATA[<p>Facter is what gives Puppet it’s brains. It collects information about the computer it is run on and then passes it to the Puppet Master for use in manifests and can optionally be stored. I know, it doesn’t sound like the most earth shattering revelation of all time, but stop for a moment. Every time your current scripts need to taget a specific OS version or a machine with a certain bit of hardware, you need to code it directly into the script. If the method of extracting that information changes, you need to modify every single script that uses that method. With Facter, you&rsquo;re editing one file, which is always up to date on the client. Anyway, that&rsquo;s enough waffle from me. Let&rsquo;s get started.<!--more--></p>

<h2>Requirements</h2>

<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
<li><a href="http://downloads.vagrantup.com/">Vagrant</a></li>
<li>Either a Mac running 10.8 that you don’t mind wiping, or a Virtual Machine running in VMWare Fusion or similar.</li>
<li>Git (Install the Command Line Tools from within <a href="https://itunes.apple.com/gb/app/xcode/id497799835?mt=12">Xcode&rsquo;s</a> preferences if you don&rsquo;t have it).</li>
</ul>


<h2>Setup</h2>

<p>We need a Puppet Master &ndash; fortunately there’s one pre-built that has everything we need. Make sure you’ve installed everything in the requirements, and then open up your trusty Terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/src
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/grahamgilbert/vagrant-puppetmaster.git facter-101
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>facter-101
</span><span class='line'><span class="nv">$ </span>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>This will pull down the needed bits to get your own Puppet Master running and then <code>vagrant up</code> will start things going. If you get errors about Postgres, just issue a <code>vagrant reload</code></p>

<p>Now for your test Mac: I&rsquo;ve made a script to automate the process. If you <strong>don&rsquo;t</strong> have a DNS entry for your Puppet Master, and you&rsquo;re using the Vagrant setup described above, run this in your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -o /tmp/install_puppet.py https://raw.github.com/grahamgilbert/macscripts/master/Puppet-Install/install_puppet.py; sudo python /tmp/install_puppet.py --appendhosts
</span></code></pre></td></tr></table></div></figure>


<p>If you are using a different setup, please refer to the <a href="https://github.com/grahamgilbert/macscripts/tree/master/Puppet-Install">script&rsquo;s readme</a> for more information</p>

<h2>Learn some Facts</h2>

<p>On your client machine, run this in a Terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo facter
</span></code></pre></td></tr></table></div></figure>


<p>Your test Mac will churn away for a minute and then spit out a ton of information &ndash; you&rsquo;ll see everything from the uptime of the machine to the amount of RAM. Still not overly useful sitting on that one machine. We need this information somewhere central to make use of it.</p>

<p>We need to make one small change to <code>~/src/facter-101/puppet/manifests/site.pp</code> to get the puppet run working:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># comment out the next line by putting a hash in front of it</span>
</span><span class='line'><span class="c1"># import &quot;classes/*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is to stop Puppet complaining that there&rsquo;s nothing to import &ndash; which there isn&rsquo;t yet.</p>

<p> Assuming your Puppet Master is running, this is on your test Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo puppet agent -t
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll see a load of files being synced to your test Mac &ndash; these are custom Facts, plugins and assorted other goodies being pulled from the server. We&rsquo;ll get to using custom Facts in a moment. If you load up <a href="http://192.168.33.10:3000">http://192.168.33.10:3000</a> in your browser of choice, you&rsquo;ll see your client having checked into Puppet. Click on it&rsquo;s hostname and you&rsquo;ll be presented with a list of all of the available Facts for that machine.</p>

<p><a href="http://grahamgilbert.com/images/posts/2013-04-02/Puppet_Node_Manager.png"><img class="center" src="http://grahamgilbert.com/images/posts/2013-04-02/Puppet_Node_Manager.png" title="" ></a></p>

<p>That&rsquo;s all very nice, but what can we use it for?</p>

<h2>The Plan</h2>

<p>We&rsquo;re going to install some extra facts from the Puppet Forge onto our Master, and then write some code to target a specific set of machines. In our fictional world, every Mac with 4GB or more of RAM will be designated a &ldquo;design&rdquo; Mac. We&rsquo;ll install Firefox on those (that&rsquo;s a design app, right?).</p>

<p>First we&rsquo;ll install the extra Facts onto our Master from the Forge.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src/facter-101
</span><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'><span class="c"># You&#39;re on the Puppet Master now</span>
</span><span class='line'><span class="nv">$ </span>sudo puppet module install grahamgilbert/mac_facts
</span><span class='line'><span class="c"># Get out of the Puppet Master</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">exit</span>
</span><span class='line'><span class="c"># Restart the Puppet Master to pick up the new module</span>
</span><span class='line'><span class="nv">$ </span>vagrant reload
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;ll write a class that will:</p>

<ul>
<li>Test that the client machine is a Mac</li>
<li>Test that the client machine also has more than 4GB RAM</li>
<li>If both conditions are satisfied, will install Firefox.</li>
</ul>


<p>Create your <code>~/src/facter-101/puppet/manifests/classes/design.pp</code>and make it look like the following.</p>

<figure class='code'><figcaption><span>~/src/facter-101/puppet/manifests/classes/design.pp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">design</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="vg">$:</span><span class="ss">:operatingsystem</span> <span class="o">==</span> <span class="s2">&quot;Darwin&quot;</span> <span class="ow">and</span> <span class="vg">$:</span><span class="ss">:mac_memory_in_gb</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">{</span>
</span><span class='line'>      <span class="n">package</span> <span class="p">{</span> <span class="s1">&#39;Firefox&#39;</span><span class="p">:</span>
</span><span class='line'>          <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">installed</span><span class="p">,</span>
</span><span class='line'>          <span class="n">provider</span> <span class="o">=&gt;</span> <span class="n">appdmg</span><span class="p">,</span>
</span><span class='line'>          <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/19.0.2/mac/en-US/Firefox%2019.0.2.dmg&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puppet has a default node &ndash; all machines checking into the Master get anything that&rsquo;s declared in this node by default. Open up <code>~/src/facter-101/puppet/manifests/site.pp</code> and make it look like:</p>

<figure class='code'><figcaption><span>~/src/facter-101/puppet/manifests/site.pp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="s2">&quot;classes/*&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="n">default</span> <span class="p">{</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">design</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve added some classes, so the Puppet Master process needs to be restarted &ndash; rebooting the whole VM is probably quicker.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant reload
</span></code></pre></td></tr></table></div></figure>


<p>On your Test Mac, perform a Puppet run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo puppet agent -t
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://grahamgilbert.com/images/posts/2013-04-02/Firefox_Installed.png" title="" ></p>

<p>Depending on how much memory is in your test Mac, this might or might not do anything. Play with the $::mac_memory_in_gb value, starting high and then bringing it down to the amount of RAM in your test Mac &ndash; or if you are running your test Mac in a VM, you could also adjust the amount of memory assigned to it.</p>

<p>So that&rsquo;s Facter &ndash; you&rsquo;re not limited to using this with the default node, this technique can be used anywhere you write Puppet code. Try changing your design.pp file to look like the following &ndash; we&rsquo;re using Facter Facts directly within our manifest to write data to the test Mac.</p>

<figure class='code'><figcaption><span>~/src/facter-101/puppet/manifests/classes/design.pp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">design</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="vg">$:</span><span class="ss">:operatingsystem</span> <span class="o">==</span> <span class="s2">&quot;Darwin&quot;</span> <span class="ow">and</span> <span class="vg">$:</span><span class="ss">:mac_memory_in_gb</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">{</span>
</span><span class='line'>      <span class="n">package</span> <span class="p">{</span> <span class="s1">&#39;Firefox&#39;</span><span class="p">:</span>
</span><span class='line'>          <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">installed</span><span class="p">,</span>
</span><span class='line'>          <span class="n">provider</span> <span class="o">=&gt;</span> <span class="n">appdmg</span><span class="p">,</span>
</span><span class='line'>          <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/19.0.2/mac/en-US/Firefox%2019.0.2.dmg&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="s1">&#39;/tmp/mac_ver&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=&gt;</span> <span class="s2">&quot;This Mac is running ${::sp_os_version}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which gives us</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>less /tmp/mac_ver
</span><span class='line'>This Mac is running OS X 10.8.3 <span class="o">(</span>12D78<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very simple example of how you can use Facter to configure your machines. Facter can be used anywhere you&rsquo;d set a variable manually &ndash; the <a href="http://docs.puppetlabs.com/puppet/latest/reference/lang_conditional.html">Puppet documentation on Conditional Statements</a> is an excellent next step with dynamically assigning configuration to your machines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Puppet on OS X (Part 4)]]></title>
    <link href="http://grahamgilbert.com/blog/2013/03/05/getting-started-with-puppet-on-os-x-part-4/"/>
    <updated>2013-03-05T14:59:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/03/05/getting-started-with-puppet-on-os-x-part-4</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve made quite a bit of progress with our Puppet install. We&rsquo;ve already made Puppet do something useful with setting up an admin user, but let&rsquo;s get back to being lazy &ndash; let&rsquo;s get someone else to write the code.</p>

<p>Before reading this post, you really need to read <a href="http://grahamgilbert.com/blog/2013/01/25/getting-started-with-puppet-part-1/">part 1</a>, <a href="http://grahamgilbert.com/blog/2013/01/27/getting-started-with-puppet-on-os-x-part-2/">part 2</a> and <a href="http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3/">part 3</a> of the series.</p>

<p>Modules are little pre-built bits of Puppet code. They&rsquo;re a good example of Puppet&rsquo;s philosophy of convention over configuration &ndash; Puppet will assume your modules follow a set pattern. We&rsquo;ll be using two of the available folders in modules today: files and manifests. Files are static files that Puppet will copy over to our client machine, and manifests will contain the Puppet code we&rsquo;ve previously been putting into <code>/etc/puppet/manifests/site.pp</code> &ndash; whilst it&rsquo;s been easy to put code into this file, it can become unwieldy when you have a few nodes to manage.</p>

<p>There are also loads of pre-built modules on the <a href="http://forge.puppetlabs.com/">Puppet Forge</a> &ndash; it&rsquo;s one of these modules we&rsquo;ll be using today.<!--more--></p>

<p>Assuming you&rsquo;re still using the Vagrant-based Puppet Master from <a href="http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3/">part 3</a>, cd into the directory you&rsquo;ve cloned the repository to, issue a <code>vagrant up</code> command. Once you&rsquo;ve booted the VM, we need to SSH into it.</p>

<pre><code>vagrant ssh
</code></pre>

<p>Puppet provides a handy tool to manage modules &ndash; <code>puppet module</code>. To install the <a href="http://forge.puppetlabs.com/rcoleman/mac_profiles_handler">mac_profiles_handler by Ryan Coleman</a>, tap in:</p>

<pre><code>sudo puppet module install rcoleman/mac_profiles_handler
</code></pre>

<p>Pretty straightforward syntax there &ndash; the person who wrote the module comes before the slash, and the name of the module after it. You&rsquo;ll see some bumph about Puppet downloading the module, and if the author has specified any dependency on other modules, they&rsquo;ll be downloaded as well.</p>

<p>If you switch back to your Mac and look in the folder you cloned the vagrant-puppetmaster git repository into (mine is at <code>~/src/Mine/blog-post</code>), you&rsquo;ll see the module you just installed in the <code>puppet/modules</code> directory.</p>

<p><img src="http://grahamgilbert.com/images/posts/2013-03-05/mac_profiles_handler.png"></p>

<p>Feel free to have a nose around to get the general structure for what a Puppet module can look like. It&rsquo;s ok, I&rsquo;ll wait.</p>

<p>Time for us to make our own module. In <code>puppet/modules</code> create a folder called <code>my_super_module</code>. Within that, make <code>files</code> and <code>manifests</code> directories.</p>

<p><img src="http://grahamgilbert.com/images/posts/2013-03-05/my_super_module.png"></p>

<p>Next, grab <a href="http://grahamgilbert.com/images/posts/2013-03-05/com.grahamgilbert.vpn.mobileconfig">this simple configuration profile</a> I made. It configures a VPN connection &ndash; it&rsquo;s unsigned, so you can see what you&rsquo;re installing on your test Mac if you&rsquo;d like. Place this .mobileconfig file in <code>puppet/modules/my_super_module/files</code>. Or, if you&rsquo;d rather, you can make your own for something else &ndash; configuring WiFi is pretty handy &ndash; I made this one in two minutes using <a href="http://support.apple.com/kb/dl1465">iPhone Configuration Utility</a>, but you can also make them with Profile Manager (I would recommend making them unsigned though, but that&rsquo;s outside the scope of this article).</p>

<p>For the actual meat of our module, we need some Puppet code. In your favourite text editor (please remember, not TextEdit!), create <code>puppet/modules/my_super_module/init.pp</code>, and make it look like the following:</p>

<figure class='code'><figcaption><span>puppet/modules/my_super_module/init.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">my_super_module</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mac_profiles_handler</span><span class="o">::</span><span class="n">manage</span> <span class="p">{</span> <span class="s1">&#39;com.grahamgilbert.vpn&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">ensure</span>       <span class="o">=&gt;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>      <span class="n">file_source</span>  <span class="o">=&gt;</span> <span class="s1">&#39;puppet:///modules/my_super_module/com.grahamgilbert.vpn.mobileconfig&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few bits we&rsquo;ve not seen before here:</p>

<pre><code>ensure =&gt; present,
</code></pre>

<p>We&rsquo;re simply telling puppet that we want to make sure this profile is always installed. If it&rsquo;s missing, re-install it. If we set this to <code>ensure =&gt; absent</code>, we&rsquo;d be telling Puppet to remove the profile. If we wanted to simply update the profile, we&rsquo;d just replace the mobileconfig file (this module will be aware of the change and update the installed profile).</p>

<pre><code>file_source  =&gt; 'puppet:///modules/my_super_module/com.grahamgilbert.vpn.mobileconfig',
</code></pre>

<p>This is referring to the file in our module. The important bit is <code>puppet:///</code> with three slashes. That point to the server we&rsquo;re currently running on (and also makes our module portable to other servers). We don&rsquo;t need to do any other configuration to get Puppet serving this file now, as it expects to serve static files out of the <code>files</code> directory.</p>

<p>As we are using the built in web server for our Puppet Master, we need to restart the puppetmaster service to let it know about our new module. When you&rsquo;re on the Mac side, it&rsquo;s easiest just to reload the whole server:</p>

<pre><code>cd ~/src/wherever/your/code/is
vagrant reload
</code></pre>

<p>Time to test it. Fire up your test Mac or your VM (if you need to configure it, please look at the <a href="http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3/">last post</a>, I&rsquo;m assuming it&rsquo;s still set up), and perform a Puppet run:</p>

<pre><code>sudo puppet agent --test
</code></pre>

<p>Wait! Nothing happened. That&rsquo;s because we&rsquo;ve not told the Puppet Master to apply this particular module to our client Mac.</p>

<p>Make your <code>puppet/manifests/site.pp</code> look like this:</p>

<figure class='code'><figcaption><span>puppet/manifests/site.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node</span> <span class="n">puppetclient</span> <span class="p">{</span>
</span><span class='line'>    <span class="kp">include</span> <span class="n">my_super_module</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we&rsquo;re doing here is telling Puppet to include our module with the default settings (as we didn&rsquo;t make any settings that can be changed &ndash; once again, outside the scope of this post). Splitting your code into modules not only allows you to share them with others if you wish, but also means you only need to change your code once and have it affect all of your applicable nodes.</p>

<p>Anyway, save your <code>site.pp</code> and perform another run on your client:</p>

<pre><code>sudo puppet agent --test
</code></pre>

<p>And now you&rsquo;ll see something along the lines of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Info: Retrieving plugin
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/provider]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/provider/profile_manager]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/provider/profile_manager/osx.rb]/ensure: defined content as '{md5}48a098b58bf3fdf38f32a0261026fa59'
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/type]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/type/profile_manager.rb]/ensure: defined content as '{md5}578a75ebe7f9972c7f49f8c5d4e1ad43'
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/facter]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/facter/profiles.rb]/ensure: defined content as '{md5}54c12303c601579fb2282304363c8425'
</span><span class='line'>Info: Loading facts in /var/lib/puppet/lib/facter/profiles.rb
</span><span class='line'>Info: Caching catalog for puppetclient
</span><span class='line'>Info: Applying configuration version '1362471535'
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/File[/var/lib/puppet/mobileconfigs]/ensure: created
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/File[/var/lib/puppet/mobileconfigs/com.grahamgilbert.vpn]/ensure: defined content as '{md5}48232db3a25fd851d1b1c7ec7c9557c8'
</span><span class='line'>Info: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/File[/var/lib/puppet/mobileconfigs/com.grahamgilbert.vpn]: Scheduling refresh of Exec[remove-profile-com.grahamgilbert.vpn]
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/Exec[remove-profile-com.grahamgilbert.vpn]: Triggered 'refresh' from 1 events
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/Profile_manager[com.grahamgilbert.vpn]/ensure: created
</span><span class='line'>Info: Creating state file /var/lib/puppet/state/state.yaml
</span><span class='line'>Notice: Finished catalog run in 1.57 seconds</span></code></pre></td></tr></table></div></figure>


<p>And if you look in System Preferences, you&rsquo;ll see the Profiles icon has appeared, and that your profile has been installed.</p>

<p><img src="http://grahamgilbert.com/images/posts/2013-03-05/profiles.png"></p>

<p>And in the Network pane, your VPN connection has been configured:</p>

<p><img src="http://grahamgilbert.com/images/posts/2013-03-05/vpn.png"></p>

<p>Next time, we&rsquo;ll look at using Facter to make our code a little more intelligent. As ever, comments, corrections and general abuse is welcome.</p>

<p>(Not the abuse, that&rsquo;s not nice.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Puppet on OS X (Part 3)]]></title>
    <link href="http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3/"/>
    <updated>2013-02-24T14:59:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3</id>
    <content type="html"><![CDATA[<p>In this post, we’ll do something pretty much all Mac admins will need to do &ndash; set up their admin user. Bust first, a little housekeeping.</p>

<p>Before reading this post, you really need to read <a href="http://grahamgilbert.com/blog/2013/01/25/getting-started-with-puppet-part-1/">part 1</a>, <a href="http://grahamgilbert.com/blog/2013/01/27/getting-started-with-puppet-on-os-x-part-2/">part 2</a> and most importantly my post on <a href="http://grahamgilbert.com/blog/2013/02/13/building-a-test-puppet-master-with-vagrant/">building a Puppet Master with Vagrant</a>. The Puppet Labs provided VM won’t cut it here, we need the latest version of Puppet on our Master. If you are using the same Mac / OS X VM that was previously hooked up to the Puppet Master VM, you will need to run the following command on the client &ndash; don’t worry, it will get new certificates from your very own Puppet Master:</p>

<pre><code>sudo rm -rf /var/lib/puppet/ssl
</code></pre>

<p>Make sure your test Mac is pointing to the right server &ndash; unless you’ve changed your Vagrantfile, your Puppet Master’s IP address will be 192.168.33.10 &ndash; you will need to change your test Mac’s /etc/hosts file to reflect this change.</p>

<p><strong>Updates from the previous post:</strong> Since the last post was published, Puppet version 3.1 has been released &ndash; the main bonus to Mac users is that the Puppet user and group are now created, so the manual Puppet run command is a little shorter. What was this:</p>

<pre><code>sudo puppet agent --test --group 0
</code></pre>

<p>Can now be shortened to:</p>

<pre><code>sudo puppet agent --test
</code></pre>

<p>As the Puppet user and group now exist, you no longer need to run Puppet as root. This creates another issue (the Puppet user is visible at the login screen despite it not being able to log in), but we&rsquo;ll get around that in this article. Regardless, you want to install <a href="http://downloads.puppetlabs.com/mac/">Puppet 3.1</a>. Back to the main event.</p>

<p>First thing’s first, create your admin user. I’ve called mine “Local Administrator”, with a short name of “ladmin” and the very imaginative passord of “password”. Next open up a Terminal window on your puppetclient Mac and issue the following command:</p>

<pre><code>sudo puppet resource user ladmin
</code></pre>

<p>You’ll see output similar to this:</p>

<figure class='code'><figcaption><span>site.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="p">{</span> <span class="s1">&#39;ladmin&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>     <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">comment</span>    <span class="o">=&gt;</span> <span class="s1">&#39;Local Admin&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">gid</span>        <span class="o">=&gt;</span> <span class="s1">&#39;20&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">groups</span>     <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;_appserveradm&#39;</span><span class="p">,</span> <span class="s1">&#39;_appserverusr&#39;</span><span class="p">,</span> <span class="s1">&#39;_lpadmin&#39;</span><span class="p">,</span> <span class="s1">&#39;admin&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">home</span>       <span class="o">=&gt;</span> <span class="s1">&#39;/Users/ladmin&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">iterations</span> <span class="o">=&gt;</span> <span class="s1">&#39;21881&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">password</span>   <span class="o">=&gt;</span> <span class="s1">&#39;401e3aa796b3bfff2c8e929a003b727be1bd548aa0f0b0e131f0d11f3953162be210200a70872734a28be747a933e12e2458ffdcc60d209eab9e006a9f4042dc883148070e6e8ad05f4a5e5d44bd0ddfc9494482f0d16c9d5eb1de086183db1b89df9982d2856eeed431d65e03ff99177c3185aa61bc926b1a0020c49621ddd8&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">salt</span>       <span class="o">=&gt;</span> <span class="s1">&#39;0c3cd42b97d0b0df45542fcb5961a2920f2fd6204aa151bf08d762d9dd44fd0c&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">shell</span>      <span class="o">=&gt;</span> <span class="s1">&#39;/bin/bash&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">uid</span>        <span class="o">=&gt;</span> <span class="s1">&#39;502&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That looks suspiciously like Puppet code. Let&rsquo;s try it.</p>

<p>With the Vagrant based Puppet Master, the manifests file that previously lived at /etc/puppet/manifests is now located on your Mac at puppet/manifests (as is the modules folder, Vagrant takes care of linking it to the right place on the VM). Open up puppet/manifests/sites.pp in your favourite text editor (for the love of all that’s holy, please don’t use TextEdit. Try TextWrangler, or my current favourite <a href="http://www.chocolatapp.com/">Chocolat</a>).</p>

<figure class='code'><figcaption><span>site.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node</span> <span class="n">puppetclient</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">user</span> <span class="p">{</span> <span class="s1">&#39;ladmin&#39;</span><span class="p">:</span>
</span><span class='line'>          <span class="k">ensure</span>     <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">comment</span>    <span class="o">=&gt;</span> <span class="s1">&#39;Local Admin&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">gid</span>    <span class="o">=&gt;</span> <span class="s1">&#39;20&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">groups</span>     <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;_appserveradm&#39;</span><span class="p">,</span> <span class="s1">&#39;_appserverusr&#39;</span><span class="p">,</span> <span class="s1">&#39;_lpadmin&#39;</span><span class="p">,</span> <span class="s1">&#39;admin&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="n">home</span>       <span class="o">=&gt;</span> <span class="s1">&#39;/Users/ladmin&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">iterations</span> <span class="o">=&gt;</span> <span class="s1">&#39;21881&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">password</span>   <span class="o">=&gt;</span> <span class="s1">&#39;401e3aa796b3bfff2c8e929a003b727be1bd548aa0f0b0e131f0d11f3953162be210200a70872734a28be747a933e12e2458ffdcc60d209eab9e006a9f4042dc883148070e6e8ad05f4a5e5d44bd0ddfc9494482f0d16c9d5eb1de086183db1b89df9982d2856eeed431d65e03ff99177c3185aa61bc926b1a0020c49621ddd8&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">salt</span>       <span class="o">=&gt;</span> <span class="s1">&#39;0c3cd42b97d0b0df45542fcb5961a2920f2fd6204aa151bf08d762d9dd44fd0c&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">shell</span>      <span class="o">=&gt;</span> <span class="s1">&#39;/bin/bash&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">uid</span>        <span class="o">=&gt;</span> <span class="s1">&#39;502&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save it, and then back on your client perform a Puppet run:</p>

<pre><code>sudo puppet agent --test
</code></pre>

<p>Of course nothing has changed &ndash; that’s because your client’s configuration is how you have described it in site.pp. Try changing ladmin’s password in system preferences, then perform another Puppet run. You’ll see Puppet change the password right back.</p>

<p>Now we’ve got our Local Admin user working, it might be nice to hide it away from inquisitive users. The first step is to change our Local Admin’s UID to something lower than 500 &ndash; I like 404 (nerd joke), and then for good measure, we’ll move the home folder out of /Users and into /var.</p>

<figure class='code'><figcaption><span>site.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node</span> <span class="n">puppetclient</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">user</span> <span class="p">{</span> <span class="s1">&#39;ladmin&#39;</span><span class="p">:</span>
</span><span class='line'>          <span class="k">ensure</span>     <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">comment</span>    <span class="o">=&gt;</span> <span class="s1">&#39;Local Admin&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">gid</span>        <span class="o">=&gt;</span> <span class="s1">&#39;20&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">groups</span>     <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;_appserveradm&#39;</span><span class="p">,</span> <span class="s1">&#39;_appserverusr&#39;</span><span class="p">,</span> <span class="s1">&#39;_lpadmin&#39;</span><span class="p">,</span> <span class="s1">&#39;admin&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="n">home</span>       <span class="o">=&gt;</span> <span class="s1">&#39;/var/ladmin&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">iterations</span> <span class="o">=&gt;</span> <span class="s1">&#39;21881&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">password</span>   <span class="o">=&gt;</span> <span class="s1">&#39;401e3aa796b3bfff2c8e929a003b727be1bd548aa0f0b0e131f0d11f3953162be210200a70872734a28be747a933e12e2458ffdcc60d209eab9e006a9f4042dc883148070e6e8ad05f4a5e5d44bd0ddfc9494482f0d16c9d5eb1de086183db1b89df9982d2856eeed431d65e03ff99177c3185aa61bc926b1a0020c49621ddd8&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">salt</span>       <span class="o">=&gt;</span> <span class="s1">&#39;0c3cd42b97d0b0df45542fcb5961a2920f2fd6204aa151bf08d762d9dd44fd0c&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">shell</span>      <span class="o">=&gt;</span> <span class="s1">&#39;/bin/bash&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">uid</span>        <span class="o">=&gt;</span> <span class="s1">&#39;404&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That gets the home folder moved, now to actually hide the home folder. Add this just before the closing } (curly bracket) in your site.pp:</p>

<figure class='code'><figcaption><span>site.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">exec</span> <span class="p">{</span><span class="s1">&#39;Hide sub-500 users&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/bin/defaults write /Library/Preferences/com.apple.loginwindow Hide500Users -bool TRUE&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you perform a Puppet run, you’ll notice that your command is run every time, regardless of whether it needs to. We only really need to run that when we change our Local Admin user. To do that, we’ll change two lines. When the Admin User changes, we’ll send a signal to the exec, and we’ll change the exec to only run when it is told to.</p>

<figure class='code'><figcaption><span>site.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node</span> <span class="n">puppetclient</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">user</span> <span class="p">{</span> <span class="s1">&#39;ladmin&#39;</span><span class="p">:</span>
</span><span class='line'>          <span class="k">ensure</span>     <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">comment</span>    <span class="o">=&gt;</span> <span class="s1">&#39;Local Admin&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">gid</span>        <span class="o">=&gt;</span> <span class="s1">&#39;20&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">groups</span>     <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;_appserveradm&#39;</span><span class="p">,</span> <span class="s1">&#39;_appserverusr&#39;</span><span class="p">,</span> <span class="s1">&#39;_lpadmin&#39;</span><span class="p">,</span> <span class="s1">&#39;admin&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="n">home</span>       <span class="o">=&gt;</span> <span class="s1">&#39;/var/ladmin&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">iterations</span> <span class="o">=&gt;</span> <span class="s1">&#39;21881&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">password</span>   <span class="o">=&gt;</span> <span class="s1">&#39;401e3aa796b3bfff2c8e929a003b727be1bd548aa0f0b0e131f0d11f3953162be210200a70872734a28be747a933e12e2458ffdcc60d209eab9e006a9f4042dc883148070e6e8ad05f4a5e5d44bd0ddfc9494482f0d16c9d5eb1de086183db1b89df9982d2856eeed431d65e03ff99177c3185aa61bc926b1a0020c49621ddd8&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">salt</span>       <span class="o">=&gt;</span> <span class="s1">&#39;0c3cd42b97d0b0df45542fcb5961a2920f2fd6204aa151bf08d762d9dd44fd0c&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">shell</span>      <span class="o">=&gt;</span> <span class="s1">&#39;/bin/bash&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">uid</span>        <span class="o">=&gt;</span> <span class="s1">&#39;404&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">notify</span>     <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;Hide sub-500 users&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="nb">exec</span> <span class="p">{</span><span class="s1">&#39;Hide sub-500 users&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/bin/defaults write /Library/Preferences/com.apple.loginwindow Hide500Users -bool TRUE&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">refreshonly</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save it, and perform a Puppet run on your client.You’ll notice that the defaults command is now only run when Puppet needs to modify the user.</p>

<p>Next time, we’ll be taking a look at Modules &ndash; pre-built bits of Puppet code that you can plug into your workflow to save you re-inventing the wheel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a test Puppet Master with Vagrant]]></title>
    <link href="http://grahamgilbert.com/blog/2013/02/13/building-a-test-puppet-master-with-vagrant/"/>
    <updated>2013-02-13T08:27:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/02/13/building-a-test-puppet-master-with-vagrant</id>
    <content type="html"><![CDATA[<p>Puppet is awesome. Until you deploy some code that worked locally, but for some reason didn’t when you put it onto your Puppet Master. Whoops.</p>

<p>So, you need a testing setup. But Puppet can take a while to keep configuring. Which is where <a href="http://www.vagrantup.com">Vagrant</a> comes in. It it a tool which allows you to build virtual machines automatically (currently only with VirtualBox, but VMWare Fusion support is coming very soon). And the best part (for me, anyway) is that it uses Puppet to configure the VM (Puppet to configure your Puppet Master? All too meta for this time of the morning).</p>

<p>Anyway, that’s enough waffle &ndash; the Vagrant configuration is up on my <a href="https://github.com/grahamgilbert/vagrant-puppetmaster">GitHub</a>.</p>

<p>If you are following along with my series on getting started with Puppet on OS X, you can replace the Puppet Labs provided VM with this setup (which would be a good idea, as the Enterprise version is a few versions behind the Open Source version, missing some features when managing Macs).</p>

<p>This testing setup includes:</p>

<ul>
<li>A Puppet Master running using the built in web server (fine for testing, not enough poke for a production server)</li>
<li>Puppet Dashboard (we all love a GUI, right?)</li>
<li>PuppetDB (this will store data about your nodes, and then hooks into the Dashboard to display it)</li>
</ul>


<p>To get up and running quickly, you will need:</p>

<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
<li><a href="http://downloads.vagrantup.com/">Vagrant</a></li>
</ul>


<p>Once those are installed, cd into the directory where you keep your code (mine lives in ~/Documents/Code), clone the repo and then tell Vagrant to bring the VM up.</p>

<pre><code>cd ~/Documents/Code
git clone https://github.com/grahamgilbert/vagrant-puppetmaster.git
cd vagrant-puppetmaster
vagrant up
</code></pre>

<p>If you don’t have the base box Ubuntu box downloaded, Vagrant will pull it down for you and cache the clean VM for you. It will then make a copy, run the script that installs the latest version of Puppet, then run through the Puppet code that will configure the VM to be a Puppet Master for you. Once the VM is running, you can place your modules and manifests in <code>puppet/modules</code> and <code>puppet/manifests</code>, respectively. The dashboard is accessible at <a href="http://192.168.33.10:3000">http://192.168.33.10:3000</a>.</p>

<p><strong>This VM is not suitable for production.</strong> I’ve made several tweaks to the configuration that makes it easier to test your code, but would be a security risk if used on a production server. <strong>Only use this configuration for testing.</strong> We’re also installing everything onto one VM &ndash; you probably want to separate this out into at least two boxes in production, maybe even three if you have a large deployment. Like I said, the idea here is to quickly set up a testing environment that behaves like our production environment.</p>
]]></content>
  </entry>
  
</feed>
