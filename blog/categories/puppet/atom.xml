<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Puppet | graham gilbert]]></title>
  <link href="http://grahamgilbert.com/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2015-11-20T16:47:37+00:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Puppet Server in Docker Part 3: Hiera]]></title>
    <link href="http://grahamgilbert.com/blog/2015/07/18/running-puppet-server-in-docker-part-3-hiera/"/>
    <updated>2015-07-18T09:36:01+01:00</updated>
    <id>http://grahamgilbert.com/blog/2015/07/18/running-puppet-server-in-docker-part-3-hiera</id>
    <content type="html"><![CDATA[<p>In the previous <a href="http://grahamgilbert.com/blog/2015/06/22/running-puppet-server-in-docker/">two</a> <a href="http://grahamgilbert.com/blog/2015/06/24/running-puppet-server-in-docker-part-2-r10k/#comment-2143364638">parts</a>, we went over how to get a basic Puppet Server up and running in Docker and how to deploy your modules using r10k. This time we&rsquo;ll assign some configuration to our nodes using <a href="http://docs.puppetlabs.com/hiera/latest/">Hiera</a>.</p>

<p>For a full explanation of what Hiera is, see the Puppetlabs documentation, but essentially, you are using a series of directories and files that are named in a particular way, and then specifying which is the most speccific to your node.<!--more--></p>

<p>Let&rsquo;s get things set up. First off, you need to tell your server what order it should be looking things up in. Restart the Puppet Server container when you&rsquo;ve made the change. This is mine, yours will likely be different:</p>

<h2>``` yaml /usr/local/docker/puppetserver/puppet/hiera.yaml</h2>

<p>:backends:
  &ndash; yaml
:yaml:
  :datadir: /etc/puppet/environments/%{::environment}/hieradata/
:hierarchy:
  &ndash; &ldquo;certs/%{::clean_certname}&rdquo;
  &ndash; &ldquo;osfamily/%{::osfamily}&rdquo;
  &ndash; &ldquo;virtual/%{::osfamily}/%{::virtual}&rdquo;
  &ndash; &ldquo;virtual/%{::virtual}&rdquo;
  &ndash; common
```</p>

<p>From top to bottom:</p>

<ul>
<li>We&rsquo;re telling Hiera that we&rsquo;re using a yaml backend &ndash; you can in theory use anything to provide data to Hiera, but I&rsquo;ve only ever used yaml.</li>
<li>We&rsquo;re telling Hiera where to find the hierachy &ndash; we&rsquo;re keeping ours in our control repo, so we can make changes based on environment.</li>
<li>And finally, we&rsquo;re specifying our hierachy. Anything that looks like <code>%{::osfamily}</code> is a value from Facter. This means we can apply configuration dynamically based on the node&rsquo;s values from Facter. Did that mean nothing to you? <a href="http://docs.puppetlabs.com/hiera/latest/hierarchy.html">Go and read this page before carrying on.</a></li>
</ul>


<p>In your control repo, create the following files:</p>

<p><code>bash environment.conf
manifest = site.pp
modulepath = modules:site
</code></p>

<p><code>bash site.pp
hiera_include('classes')
</code></p>

<p>Woah, hold on &ndash; what just happened there? In three lines, we told Puppet where to find our <code>site.pp</code> file &ndash; the file that is read first during a Puppet run, and then in <code>site.pp</code> that is should include our classes from Hiera. Let&rsquo;s do that now. We&rsquo;re going to make our most general configuration &ndash; <code>common.yaml</code> that came at the bottom of <code>hiera.yaml</code> above.</p>

<h2>``` yaml hieradata/common.yaml</h2>

<p>classes:
  &ndash; puppet_run
&ldquo;puppet_run::server_name&rdquo;: puppet.example.com
```</p>

<p>We want all of our clients to run Puppet periodically &ndash; so we&rsquo;ve included the <code>puppet_run</code> class and have set the <code>puppet_run::server_name</code> variable. Where did we find that variable? All of a classes variables are <a href="https://github.com/grahamgilbert/puppet-puppet_run/blob/master/manifests/init.pp#L2">listed at the top of the file</a>.</p>

<p>But let&rsquo;s say we want Munki on all of our Macs. We don&rsquo;t want it being installed on Linux, so we need to be a bit more specific in our hierachy:</p>

<h2>``` yaml hieradata/osfamily/Darwin.yaml</h2>

<p>classes:
  &ndash; mac_admin::munki
  &ndash; mac_admin::munki::munkitools</p>

<p>mac_admin::munki::repourl: <a href="https://munki.example.com">https://munki.example.com</a>
mac_admin::munki::install_apple_updates: true
```</p>

<p>This will only be applied to nodes that have their <code>osfamily</code> fact equal to <code>Darwin</code>.</p>

<p>Now all of that is commited to your control git repository, all that remains is to deploy it on your Puppet Server:</p>

<p><code>bash
$ r10k deploy environment -pv
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Puppet Server in Docker Part 2: r10k]]></title>
    <link href="http://grahamgilbert.com/blog/2015/06/24/running-puppet-server-in-docker-part-2-r10k/"/>
    <updated>2015-06-24T14:49:31+01:00</updated>
    <id>http://grahamgilbert.com/blog/2015/06/24/running-puppet-server-in-docker-part-2-r10k</id>
    <content type="html"><![CDATA[<p>Last time we got our Puppet Server up and running &ndash; now we need to put some Puppet modules on it so we can use it.</p>

<p>To do that, we&rsquo;re going to use r10k. It&rsquo;s a tool that uses a control git repository that contains something called a puppetfile- a file that lists all of the puppet modules you want to use, either from the puppet forge or from git repositories. You may want to keep this module private by using a paid account on GitHub if your configuration contains secrets, but  it doesn&rsquo;t have to be &ndash; mine doesn&rsquo;t have anything particularly sensitive in, so here it is: <a href="https://github.com/grahamgilbert/personal-puppet">grahamgilbert/personal-puppet</a>. <!--more--></p>

<h2>The Control module</h2>

<p>Puppet recommends the use of environments &ndash; a way of separating your clients into groups &ndash; usually this is test and production groups. r10k uses git branches to determine which environments you have, so we&rsquo;re going to set up our repository. The default branch is called <code>master</code>, but we want ours to be called <code>production</code> &ndash; Github has some excellent <a href="https://help.github.com/articles/setting-the-default-branch/">documentation</a> on the subject. I recommend accepting GitHub&rsquo;s suggestion of putting a README in your repository so you can clone it right away.</p>

<h2>The Puppetfile</h2>

<p>Now we&rsquo;ve got our control repo set up, we can clone it so we can work on it.</p>

<p><code>
$ git clone https://github.com/yourusername/yourcontolrepo
</code></p>

<p>If you&rsquo;re familiar with Puppet, this will be familiar &ndash; an environment is what you would have once put at <code>/etc/puppet</code> &ndash; the only change is that you can override options on a per-environment basis by using <code>environment.conf</code>. In my control repo, I have a default manifest at the top of the environment rather than in <code>manifests</code> for example. (<a href="https://docs.puppetlabs.com/puppet/latest/reference/config_file_environment.html">more information</a>)</p>

<p>At its simplest, a Puppetfile is just a list of modules we want to use. As we&rsquo;re just starting off, we can use pre-built ones from GitHub and the forge. We&rsquo;re going to get Munki installed on a client, so we&rsquo;ll use my MacAdmin module. One thing to note is that r10k won&rsquo;t resolve dependencies for you, so be sure to specify any modules the module you need. A simple Puppetfile is below:</p>

<p>``` ruby
mod &lsquo;mac_admin&rsquo;,</p>

<pre><code>:git =&gt; 'https://github.com/grahamgilbert/puppet-mac_admin'
</code></pre>

<p>mod &lsquo;mac_profiles_handler&rsquo;,</p>

<pre><code>:git =&gt; 'https://github.com/keeleysam/rcoleman-mac_profiles_handler'
</code></pre>

<p>mod &lsquo;mac_facts&rsquo;,</p>

<pre><code>:git =&gt; 'https://github.com/grahamgilbert/grahamgilbert-mac_facts.git'
</code></pre>

<p>mod &lsquo;repository&rsquo;,</p>

<pre><code>:git =&gt; 'https://github.com/boxen/puppet-repository'
</code></pre>

<p>mod &lsquo;outset&rsquo;,</p>

<pre><code>:git =&gt; 'https://github.com/grahamgilbert/puppet-outset'
</code></pre>

<p>mod &lsquo;stdlib&rsquo;,</p>

<pre><code>:git =&gt; 'https://github.com/puppetlabs/puppetlabs-stdlib'
</code></pre>

<p>```</p>

<h2>Configuring r10k</h2>

<p>The next piece of the puzzle is to set up r10k to download our repository. I&rsquo;m running r10k directly on my Docker host, but this could easily be (and probably should be) put into a Docker container. First off, let&rsquo;s get r10k installed:</p>

<p><code>bash
$ gem install r10k
</code></p>

<p>r10k get&rsquo;s in configuration from <code>/etc/r1ok.yaml</code>, so let&rsquo;s create that:</p>

<p>``` yaml /etc/r10k.yaml</p>

<h1>The location to use for storing cached Git repos</h1>

<p>:cachedir: &lsquo;/var/cache/r10k&rsquo;</p>

<h1>A list of git repositories to create</h1>

<p>:sources:
  # This will clone the git repository and instantiate an environment per
  # branch in /etc/puppet/environments
  :personal-puppet:</p>

<pre><code>remote: 'https://github.com/yourusername/yourcontrolrepo'
basedir: '/usr/local/docker/puppetserver/puppet/environments'
</code></pre>

<p>```</p>

<h2>Puppet Conf</h2>

<p>The final piece of configuration for today will be to set our Puppet Server to use environments. Add the following to <code>/usr/local/docker/puppetserver/puppet/puppet.conf</code>:</p>

<p>``` ini
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
environmentpath=$confdir/environments
pluginsync=true</p>

<p>[master]</p>

<h1>These are needed when the puppetmaster is run by passenger</h1>

<h1>and can safely be removed if webrick is used.</h1>

<p>ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY
autosign = true
environmentpath = $confdir/environments</p>

<p>```</p>

<h2>Gimmie some modules</h2>

<p>We&rsquo;re ready to get some modules installed on the Puppet Server:</p>

<p><code>bash
$ r10k deploy environment -pv
</code></p>

<p>You&rsquo;ll see all of the modules you specified in your Puppetfile download theselves to the right place. But of course, we&rsquo;re not quite ready to use this for applying configuration to our Macs yet &ndash; we have modules, but we&rsquo;ve not applied the config to specific machines. In the next post we&rsquo;ll cover how we use Hiera to do this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Puppet Server in Docker]]></title>
    <link href="http://grahamgilbert.com/blog/2015/06/22/running-puppet-server-in-docker/"/>
    <updated>2015-06-22T12:29:55+01:00</updated>
    <id>http://grahamgilbert.com/blog/2015/06/22/running-puppet-server-in-docker</id>
    <content type="html"><![CDATA[<p>Back when I started using Puppet, configuring a Puppet Master could be pretty tricky as there were several moving parts (it was a Rack application, so needed to run behind something like <a href="https://www.phusionpassenger.com/">Passenger</a> if you had any number of clients). Thankfully, the new <a href="https://github.com/puppetlabs/puppet-server">Puppet Server</a> simplifies things massively &ndash; it&rsquo;s just one installation to get things working in a way that would be suitable for putting straight into production.</p>

<p>Over the next few posts, I&rsquo;ll take you through setting up the Puppet Server (running on Docker, naturally!), using r10k and git for managing your modules and using Hiera to configure your Macs &ndash; we&rsquo;ll apply some configuration to a Mac without writing a single line of Puppet code .</p>

<h1>Why?</h1>

<p>You might well be thinking &ldquo;why would I want to use Puppet?&rdquo; After all, you&rsquo;ve already got Munki. There are two main reasons I&rsquo;ve chosen to go back to using a Puppet Server in conjunction with Munki.</p>

<ol>
<li>It&rsquo;s nice to have a fallback. If I manage to do something stupid and nuke my Munki install, or my customers manage to do the same, I&rsquo;ve got some way of getting the machines back under control.</li>
<li>&ldquo;Free&rdquo; SSL certs &ndash; this might not be a priority now, but it gives you an easy to to secure your Munki repository later on (which we may cover in a later post).<!--more--></li>
</ol>


<h1>Let&rsquo;s get started</h1>

<p>First off, you&rsquo;re going to need a Linux server with Docker installed. Installing it is beyond the scope of this post, but I do recommend you head over to <a href="http://www.digitalocean.com/?refcode=ce1e0f3880e1">Digital Ocean</a> (disclaimer: referral link). They will get you up and running with a server with Docker pre-installed in under a minute for not much money.  I run mine on Ubuntu 14, but you can choose whichever flavour of Linux you prefer.</p>

<p>You will also need a DNS entry that points to your server&rsquo;s IP address. Whilst you could get away with fudging it by editing /etc/hosts, it&rsquo;s a lot of <a href="http://www.oxforddictionaries.com/definition/english/faff">faff</a>.</p>

<h1>Dockers, images and containers</h1>

<p>I&rsquo;ve already made a Docker image that has Puppet Server in it. Let&rsquo;s pull it down:</p>

<p><code>bash
$ docker pull grahamgilbert/puppetserver
</code></p>

<p>And fire it up:</p>

<p><code>
$ docker run -d --name=puppetserver \
-e PUPPETSERVER_JAVA_ARGS="-Xms384m -Xmx384m -XX:MaxPermSize=256m" \
-p 0.0.0.0:8140:8140 \
-h puppet.yourdomain.com \
grahamgilbert/puppetserver
</code></p>

<p>You will need to change the amount of memory assigned to the puppet server depending on how much memory is in your actual server before going to production but for now, 384mb will be fine as we&rsquo;re just setting things up.</p>

<p>BUT there are a few things that we need to persist otherwise our server won&rsquo;t be very useful. First off, let&rsquo;s attach to the container so we can have a look around:</p>

<p><code>
$ docker exec -t -i puppetserver bash
</code></p>

<p>You&rsquo;ll be looking at a bash prompt now. First off, check that <code>/etc/puppet</code> and <code>/etc/puppetserver</code> have <em>stuff</em> in them. What&rsquo;s in there isn&rsquo;t important at this stage. We also need to run the Puppet client on the server to move some supporting files in place. We first need to enable auto signing of certificates in <code>/etc/puppet/puppet.conf</code> (we&rsquo;ll cover this more later):</p>

<p>``` bash /etc/puppet/puppet.conf
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
templatedir=$confdir/templates</p>

<p>[master]</p>

<h1>These are needed when the puppetmaster is run by passenger</h1>

<h1>and can safely be removed if webrick is used.</h1>

<p>ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY
autosign = true
```</p>

<p>And then exit the container, stop it and start it up again:</p>

<p><code>bash
$ exit
$ docker stop puppetserver
$ docker start puppetserver
</code></p>

<p>Take a look at the container&rsquo;s logs &ndash; Puppet Server can take a few seconds to be ready, so look for the line that says it&rsquo;s ready to accept connections:</p>

<p><code>bash
$ docker logs puppetserver
</code></p>

<p>When it&rsquo;s ready, enter the container again and run the puppet agent.</p>

<p><code>bash
$ docker exec -t -i puppetserver bash
$ puppet agent -t
</code></p>

<p>Provided that ran with no errors, we can exit out of the container.</p>

<p><code>bash
$ exit
</code></p>

<p>We&rsquo;re now going to copy the parts we need to persist to the file system of the host machine &ndash; I like to keep my docker related things in <code>/usr/local/docker</code> but it&rsquo;s up to you.</p>

<p><code>
$ mkdir -p /usr/local/docker/puppetserver
</code></p>

<p>We&rsquo;re going to use <code>docker cp</code> to copy out of our container and onto our host filesystem. We want the configuration directories, any custom gems we install (required if we want to use modules such as <a href="https://github.com/dayglojesus/managedmac">managedmac</a>), as well as the SSL certificates and some other supporting files (these aren&rsquo;t technically required, but will save having to run <code>puppet agent -t</code> after the container starts every time we update).</p>

<p><code>bash
$ docker cp puppetserver:/etc/puppetserver /usr/local/docker/puppetserver/
$ docker cp puppetserver:/etc/puppet /usr/local/docker/puppetserver/
$ docker cp puppetserver:/var/lib/puppet/ssl /usr/local/docker/puppetserver/lib/
$ docker cp puppetserver:/var/lib/puppet/lib /usr/local/docker/puppetserver/lib/
$ docker cp puppetserver:/var/lib/puppet/jruby-gems /usr/local/docker/puppetserver/
</code></p>

<p>Now we&rsquo;re ready to run for real. Just a small piece of configuration to make our lives easier whilst we&rsquo;re testing &ndash; enabling auto signing of certificates. By default you will need to sign a certificate for each client that tries to connect to your puppet master. Eventually we will want to sign certificates using some sort of external inventory service (I like Sal, but there are also connectors for Web Help Desk), but for now we&rsquo;ll leave our configuration that tells Puppet to sign every certificate unconditionally.</p>

<p><code>bash
$ nano /usr/local/docker/puppetserver/puppet/puppet.conf
</code></p>

<p>And make sure your <code>puppet.conf</code> looks like:</p>

<p>``` bash /usr/local/docker/puppetserver/puppet/puppet.conf
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
pluginsync=true
[master]</p>

<h1>These are needed when the puppetmaster is run by passenger</h1>

<h1>and can safely be removed if webrick is used.</h1>

<p>ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY
autosign = true
```</p>

<p>Now all that remains is to fire up our final container and then we can hook up a client.</p>

<p>``` bash</p>

<h1>remove our old container</h1>

<p>$ docker rm -f puppetserver
$ docker run -d \
  &mdash;name=&ldquo;puppetserver&rdquo; \
  &mdash;restart=&ldquo;always&rdquo; \
  -v /usr/local/docker/puppetserver/puppet:/etc/puppet \
  -v /usr/local/docker/puppetserver/puppetserver:/etc/puppetserver \
  -v /usr/local/docker/puppetserver/lib/ssl:/var/lib/puppet/ssl \
  -v /usr/local/docker/puppetserver/jruby-gems:/var/lib/puppet/jruby-gems \
  -v /usr/local/docker/puppetserver/lib/lib:/var/lib/puppet/lib \
  -p 0.0.0.0:8140:8140 \
  -e PUPPETSERVER_JAVA_ARGS=&ldquo;-Xms384m -Xmx384m -XX:MaxPermSize=256m&rdquo; \
  -h puppet.yourdomain.com \
  grahamgilbert/puppetserver
```</p>

<p>Let&rsquo;s make sure it&rsquo;s finished starting up.</p>

<p><code>bash
$ docker logs -f puppetserver
</code></p>

<p>This works like tail would. Hit ctrl-c to exit once it says it&rsquo;s ready to go.</p>

<h1>Hook up a client</h1>

<p>You&rsquo;re going to need Puppet, Facter and Hiera on your client Mac. Head over <a href="http://downloads.puppetlabs.com/mac">http://downloads.puppetlabs.com/mac</a> and download and install the latest version of Puppet, Facter and Hiera.</p>

<p>If we just ran Puppet now, it would use the Mac&rsquo;s hostname as the certificate name (the unique identifier for the machine). If you have reliable hostnames, that will probably do you. I prefer to use the machine&rsquo;s serial number (lower case, because that&rsquo;s what Puppet likes). We&rsquo;ll automate this in a later post, but for now we can do it by hand:</p>

<p><code>bash /etc/puppet/puppet.conf
[main]
server=puppet.yourdomain.com
certname=abc123
</code></p>

<p>All that&rsquo;s left now is to run puppet on the client:</p>

<p><code>bash
$ puppet agent -t --waitforcert 20
</code></p>

<p>In a later post, we will look at how we can use r10k to manage our modules and use Hiera to configure our clients without touching a line of Puppet code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal Automation (Part 1)]]></title>
    <link href="http://grahamgilbert.com/blog/2014/07/26/personal-automation-part-1/"/>
    <updated>2014-07-26T11:27:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/07/26/personal-automation-part-1</id>
    <content type="html"><![CDATA[<p><a href="http://grahamgilbert.com/blog/2014/04/04/updating-boxen/">Earlier this year</a>, I professed my love of Boxen &ndash; the personal automation solution based on Puppet released by Github. Indeed, it served me well for quite some time, but I began to find myself spending more time fixing Boxen than actually getting things done. As Boxen was designed for internal use at Github, it set some things up how they liked them &ndash; which wasn&rsquo;t necesarily how I liked them. Sysadmins have similar needs to developers, but not exactly the same.</p>

<p>Then I updated Boxen. All of my modules were out of date, so I spent a good couple of hours updating all of them so they worked again. Ugh.</p>

<p>So I started looking at moving to my own solution. One of my major irritations when using Boxen was that it didn&rsquo;t really handle updating your apps &ndash; you got whatever version the module author decided to install and then you had to hope that there was an updatng mechanism built in. I&rsquo;ve said before that there is no better method of getting software onto your Mac then Munki, so the first decison was straightforward. The rest took a little thought.</p>

<h2>The six P&rsquo;s</h2>

<p>My first requirement was that I shouldn&rsquo;t need to run anything to get my configuration to apply. Boxen requires that you run the <code>boxen</code> command periodically across each of your Macs to get the configuration applied. This wasn&rsquo;t always practical. I needed something that would run in the background and keep itself up to date.</p>

<p>As I said before, I really disliked how Boxen installs software. Munki does a much better job, and AutoPkg makes it trivial to make sure you have the latest software version. Being a sysadmin, I need more than simple drag and drop apps and packages though &ndash; I make extensive use of <a href="http://brew.sh">Homebrew</a> to install command line tools like <a href="http://packer.io">Packer</a>, so I needed to come up with a way of installing these with Munki.</p>

<p>However, Munki isn&rsquo;t the best tool for managing my configuration. I&rsquo;ve been using Puppet to manage the Macs  I look after for nearly three years now, and I wanted to base my system on it as I&rsquo;ve already done a lot of the work with making OS X specific modules. I also wanted to use the modules made for Boxen as much as possible (some made too many assumptions about where they were running, so couldn&rsquo;t be re-used.</p>

<p>So to recap:</p>

<ul>
<li>Munki for software deployment.</li>
<li>Puppet must run in the background periodically</li>
<li>The configuration must update itself &ndash; I don&rsquo;t want to have to sync code across machines.</li>
<li>Where possible, re-use existing Puppet modules</li>
</ul>


<p>Over the next few posts, I&rsquo;ll go over the different parts of this solution, how I put it together and how you might be able to use this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Boxen]]></title>
    <link href="http://grahamgilbert.com/blog/2014/04/04/updating-boxen/"/>
    <updated>2014-04-04T07:54:26+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/04/04/updating-boxen</id>
    <content type="html"><![CDATA[<p>As you might know, I&rsquo;m a bit of a fan of <a href="https://www.youtube.com/watch?v=GqerWmKU1Js">Munki and Puppet</a> for managing the Macs I look after. Around a year ago, I really wanted to be able to automate my own setup across my own Macs the same way. I was forever finding that the particular git repository or app wasn&rsquo;t on the Mac I was working on. Then there came the time when I wanted to do a clean install &ndash; that was easily a day down the drain there!</p>

<h2>Automate all of the things</h2>

<p>Then <a href="https://boxen.github.com/">Boxen</a> was released &ndash; based on Puppet, but targeted at setting up individual&rsquo;s machines. I got on board just over a year ago, and haven&rsquo;t really looked back &ndash; manually installing an app on my Mac seems very strange now. I&rsquo;m not going to cover how to get started with Boxen, as there are <a href="http://lmgtfy.com/?q=getting+started+with+Boxen">many getting started guides out there</a> (however, <a href="http://garylarizza.com/blog/2013/02/15/puppet-plus-github-equals-laptop-love/">Gary Larizza&rsquo;s</a> is rather good).</p>

<p>There will come a time when you need to update the core part of Boxen. This happened to me when I clean installed 10.9 on my work laptop &ndash; all kinds of shit broke (somehow it managed to survive the upgrade process &ndash; go figure). I looked around, but couldn&rsquo;t really find a definitive guide, so here it is (it&rsquo;s shorter than this piece of rambling).</p>

<h2>Ok, stop talking</h2>

<p>As Boxen is made by GitHub, updating it is much like updating any other project on there that you&rsquo;ve made a fork of.  First we&rsquo;re going to add it as a remote repository:</p>

<p><code>bash
$ cd ~/src/our-boxen
$ git remote add upstream https://github.com/boxen/our-boxen.git
</code></p>

<p>Then we&rsquo;re going to fetch the stuff from the upstream repository:</p>

<p><code>bash
$ git fetch upstream
</code>
Now we&rsquo;re going to merge the updated repository with our own:</p>

<p><code>bash
$ git checkout master
$ git merge upstream/master
</code></p>

<p>If you haven&rsquo;t modified any of the core Boxen files (<code>Puppetfile</code>, <code>Gemfile</code> or <code>manifests/site.pp</code> in my case), you might get away without having to fix any conflicts (you can ignore any in <code>Puppetfile.lock</code> and <code>Gemfile.lock</code>, we&rsquo;ll deal with those next). I had conflicts as I had previously:</p>

<ul>
<li>Been stupid and tried to update Boxen by just changing the Puppet Module and Gem versions</li>
<li>Edited <code>site.pp</code> as I didn&rsquo;t want Nginx or node.js installed</li>
<li>Been dumb and put my custom Puppet modules in the wrong place in my <code>Puppetfile</code></li>
</ul>


<p>None of these were particularly arduous to fix, but annoying none the less. If you find you have loads, you might want to run:</p>

<p><code>bash
$ git mergetool
</code></p>

<p>The next step is to update your Puppet modules and RubyGems. First delete <code>Puppetfile.lock</code> and <code>Gemfile.lock</code>. Now go back to your trusty Terminal and:</p>

<p><code>bash
$ bundle install --without development
$ bundle exec librarian-puppet install --clean
</code></p>

<p>At this point, you might want to go through the custom modules you&rsquo;ve added to your <code>Puppetfile</code> and update those, although this is by no means required &ndash; some apps I&rsquo;ve installed through Boxen don&rsquo;t have a built in updater, so Boxen is more convenient than hunting for installers on various vendor&rsquo;s websites. Once your modules are up to date in your <code>Puppetfile</code>,  you&rsquo;re done! You can now get your Mac back to how you like it by issuing the usual:</p>

<p><code>bash
$ boxen
</code></p>
]]></content>
  </entry>
  
</feed>
