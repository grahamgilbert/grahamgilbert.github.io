<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Puppet | graham gilbert]]></title>
  <link href="http://grahamgilbert.com/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2014-02-18T07:12:18+00:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sal: The Munki Puppet]]></title>
    <link href="http://grahamgilbert.com/blog/2014/01/17/sal-the-munki-puppet/"/>
    <updated>2014-01-17T10:51:46+00:00</updated>
    <id>http://grahamgilbert.com/blog/2014/01/17/sal-the-munki-puppet</id>
    <content type="html"><![CDATA[<p>At <a href="http://pebbleit.com">pebble.it</a>, we always wanted to have an easy dashboard to look at to visualise the information we could collect from Puppet and Munki. We tried a few options, but didn&rsquo;t like any of them, so we made our own.</p>

<p>Say hi to Sal &ndash; the Munki Puppet. It&rsquo;s a multi-tenanted reporting solution for Munki and optionally, Facter.  You can find all of the details <a href="https://github.com/grahamgilbert/sal">over on GitHub</a>, including installation instructions and a package to send out to your clients.</p>

<p><img class="center" src="/images/posts/2014-01-17/Sal.png"></p>

<p>There is a plugin system built in to Sal, and over the next few days I will have a couple of posts covering how to make your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[buildCrankPkg]]></title>
    <link href="http://grahamgilbert.com/blog/2013/07/17/buildcrankpkg/"/>
    <updated>2013-07-17T16:31:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/07/17/buildcrankpkg</id>
    <content type="html"><![CDATA[<p>In my <a href="http://grahamgilbert.com/blog/2013/07/12/using-crankd-to-react-to-network-events/">last post</a> I promised a tool I&rsquo;ve been working on to automate the building of a package for crankd.</p>

<p><a href="https://github.com/grahamgilbert/buildCrankPkg">buildCrankPkg</a> is a small script that will:</p>

<ul>
<li>Pull down the latest version of crankd (or use a local or remote repository if you specify one)</li>
<li>Build a package that includes crankd and your custom settings and scripts.</li>
</ul>


<p>I&rsquo;ve included two examples, one that implements calling Munki and Puppet as detailed in the last post, and one to run a Casper policy.</p>

<p>If you&rsquo;re happy with what crankd does and using the command line, head on over to the <a href="https://github.com/grahamgilbert/buildCrankPkg">repository</a> and enjoy. If you need a bit more help to get started, read on.<!--more--></p>

<h2>Tutorial</h2>

<p>First off, you&rsquo;re going to need to get the buildCrankPkg repository.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/src
</span><span class='line'>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/grahamgilbert/buildCrankPkg.git&quot;</span>&gt;https://github.com/grahamgilbert/buildCrankPkg.git&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;re left with three directories that you need to fill:</p>

<ul>
<li><code>crankd</code>: You will be putting your custom code in here.</li>
<li><code>Preferences</code>: Just a plist that will call our custom code.</li>
<li><code>LaunchDaemons</code>: A LaunchDaemon to run crankd &ndash; an example that should be fine is already there.</li>
</ul>


<p>Assuming you cloned the <code>buildCrankPkg</code> repository to <code>~/src/buildCrankPkg</code>, save the following as <code>~/src/buildCrankPkg/crankd/CrankTools.py</code> (or copy the example). The only change between this one and the <code>CrankTools.py</code> from last time is that we&rsquo;re calling the JAMF binary to run a Casper policy (I know, the horror, I do actually use Casper occasionally). Our trigger&rsquo;s name is NetworkTrigger &ndash; the line you&rsquo;d need to customise to change this is <code>28</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CrankTools.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">CrankTools</span><span class="o">.</span><span class="n">py</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">OnNetworkLoad</span> <span class="n">method</span> <span class="ow">is</span> <span class="n">called</span> <span class="kn">from</span> <span class="nn">crankd</span> <span class="nn">on</span> <span class="nn">a</span> <span class="nn">network</span> <span class="nn">state</span> <span class="nn">change</span><span class="p">,</span> <span class="nb">all</span> <span class="n">other</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">methods</span> <span class="n">assist</span> <span class="n">it</span><span class="o">.</span> <span class="n">Modified</span> <span class="kn">from</span> <span class="nn">Gary</span> <span class="nn">Larizza</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">script</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://gist.github.com/glarizza/626169&quot;</span><span class="o">&gt;</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">gist</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">glarizza</span><span class="o">/</span><span class="mi">626169</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">)</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Last</span> <span class="n">Revised</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mi">10</span><span class="o">/</span><span class="mo">07</span><span class="o">/</span><span class="mi">2013</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">author</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Graham</span> <span class="n">Gilbert</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x67;&amp;#114;&amp;#x61;&amp;#104;&amp;#x61;&amp;#x6d;&amp;#64;&amp;#103;&amp;#114;&amp;#x61;&amp;#x68;&amp;#97;&amp;#109;&amp;#x67;&amp;#x69;&amp;#108;&amp;#x62;&amp;#x65;&amp;#114;&amp;#116;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c">#103;&amp;#x72;&amp;#x61;&amp;#x68;&amp;#97;&amp;#109;&amp;#x40;&amp;#x67;&amp;#114;&amp;#x61;&amp;#x68;&amp;#x61;&amp;#109;&amp;#103;&amp;#105;&amp;#108;&amp;#x62;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#46;&amp;#99;&amp;#x6f;&amp;#109;&lt;/a&gt;)&amp;rsquo;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">version</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">0.2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">syslog</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">syslog</span><span class="o">.</span><span class="n">openlog</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">CrankD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">CrankTools</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;The main CrankTools class needed for our crankd config plist&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">policyRun</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Checks for an active network connection and calls the jamf binary if it finds one.</span>
</span><span class='line'><span class="sd">        If the network is NOT active, it logs an error and exits</span>
</span><span class='line'><span class="sd">    ---</span>
</span><span class='line'><span class="sd">    Arguments: None</span>
</span><span class='line'><span class="sd">    Returns:  Nothing</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;jamf&#39;</span><span class="p">,</span><span class="s">&#39;policy&#39;</span><span class="p">,</span><span class="s">&#39;-trigger&#39;</span><span class="p">,</span><span class="s">&#39;NetworkTrigger&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">LinkState</span><span class="p">(</span><span class="s">&#39;en1&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">callCmd</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">LinkState</span><span class="p">(</span><span class="s">&#39;en0&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">callCmd</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">syslog</span><span class="o">.</span><span class="n">syslog</span><span class="p">(</span><span class="n">syslog</span><span class="o">.</span><span class="n">LOG_ALERT</span><span class="p">,</span> <span class="s">&quot;Internet Connection Not Found, Puppet Run Exiting...&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">callCmd</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Simple utility function that calls a command via subprocess</span>
</span><span class='line'><span class="sd">    ---</span>
</span><span class='line'><span class="sd">    Arguments: command - A list of arguments for the command</span>
</span><span class='line'><span class="sd">    Returns: Nothing</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">LinkState</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">interface</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;This utility returns the status of the passed interface.</span>
</span><span class='line'><span class="sd">    ---</span>
</span><span class='line'><span class="sd">    Arguments:</span>
</span><span class='line'><span class="sd">        interface - Either en0 or en1, the BSD interface name of a Network Adapter</span>
</span><span class='line'><span class="sd">    Returns:</span>
</span><span class='line'><span class="sd">        status - The return code of the subprocess call</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">([</span><span class="s">&quot;ipconfig&quot;</span><span class="p">,</span> <span class="s">&quot;getifaddr&quot;</span><span class="p">,</span> <span class="n">interface</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">OnNetworkLoad</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Called from crankd directly on a Network State Change. We sleep for 10 seconds to ensure that</span>
</span><span class='line'><span class="sd">        an IP address has been cleared or attained, and then perform a Puppet run and a Munki run.</span>
</span><span class='line'><span class="sd">    ---</span>
</span><span class='line'><span class="sd">    Arguments:</span>
</span><span class='line'><span class="sd">        *args and **kwargs - Catchall arguments coming from crankd</span>
</span><span class='line'><span class="sd">    Returns:  Nothing</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">policyRun</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">main</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">crank</span> <span class="o">=</span> <span class="n">CrankTools</span><span class="p">()</span>
</span><span class='line'><span class="n">crank</span><span class="o">.</span><span class="n">OnNetworkLoad</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now for the preferences &ndash; no change from last time here, as we&rsquo;ve not changed the name of our class or method. This goes into <code>~/src/buildCrankPkg/Preferences/com.googlecode.pymacadmin.crankd.plist</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>com.googlecode.pymacadmin.crankd.plist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span> encoding=<span class="ni">&amp;ldquo;</span>UTF-8<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE plist PUBLIC <span class="ni">&amp;ldquo;&amp;ndash;</span>//Apple//DTD PLIST 1.0//EN<span class="ni">&amp;rdquo;</span> <span class="ni">&amp;ldquo;</span><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span><span class="nt">&gt;</span>http://www.apple.com/DTDs/PropertyList-1.0.dtd<span class="nt">&lt;/a&gt;</span><span class="ni">&amp;rdquo;</span>&gt;
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>dict<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>key<span class="ni">&amp;gt;</span>SystemConfiguration<span class="ni">&amp;lt;</span>/key<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>dict<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>key<span class="ni">&amp;gt;</span>State:/Network/Global/IPv4<span class="ni">&amp;lt;</span>/key<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>dict<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>key<span class="ni">&amp;gt;</span>method<span class="ni">&amp;lt;</span>/key<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>array<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>string<span class="ni">&amp;gt;</span>CrankTools<span class="ni">&amp;lt;</span>/string<span class="ni">&amp;gt;</span>
</span><span class='line'>                    <span class="ni">&amp;lt;</span>string<span class="ni">&amp;gt;</span>OnNetworkLoad<span class="ni">&amp;lt;</span>/string<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>/array<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/dict<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/dict<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/dict<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One last step until we can build our package is the Launch Daemon &ndash; we&rsquo;re going to use the one that&rsquo;s included in the repository, as 99% of people won&rsquo;t need to change it.</p>

<h2>Prepare the build!</h2>

<p>Our package needs to have the version number of 2.1 and we&rsquo;re going to set the package&rsquo;s identifier to com.example.crankd</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/src/buildCrankPkg
</span><span class='line'>sudo ./buildCrankPkg.py  &amp;mdash;version 2.1 &amp;mdash;identifier com.example.crankd
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Your package will be in <code>~/src/buildCrankPkg</code> waiting for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Macs with Puppet at PSU 2013]]></title>
    <link href="http://grahamgilbert.com/blog/2013/05/24/managing-macs-with-puppet-at-psu-2013/"/>
    <updated>2013-05-24T13:56:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/05/24/managing-macs-with-puppet-at-psu-2013</id>
    <content type="html"><![CDATA[<p>For those of you who attended my talk yesterday at PSU MacAdmins on Managing Macs with Puppet, here are are my <a href="/images/posts/2013-05-24/Managing_Macs_with_Puppet.pdf">slides</a> and all of the code and servers used are up on <a href="https://github.com/grahamgilbert/puppet_psu_2013">grahamgilbert/puppet_psu_2013 on GitHub</a>. Please comment, <a href="/about">email me</a> or catch me on the <a href="http://twitter.com/grahamgilbert">twitter</a> if you have any questions about any of this. Hopefully the video will be up soon, so those of you who weren&rsquo;t there to laugh at the guy with the funny accent can see me dealing with internet fails and my obscure British sit-com references.</p>

<p><strong>Update:</strong> the video has now been posted.</p>

<iframe width="480" height="360" src="http://www.youtube.com/embed/GqerWmKU1Js" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facter 101]]></title>
    <link href="http://grahamgilbert.com/blog/2013/04/02/facter-101/"/>
    <updated>2013-04-02T10:11:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/04/02/facter-101</id>
    <content type="html"><![CDATA[<p>Facter is what gives Puppet it’s brains. It collects information about the computer it is run on and then passes it to the Puppet Master for use in manifests and can optionally be stored. I know, it doesn’t sound like the most earth shattering revelation of all time, but stop for a moment. Every time your current scripts need to taget a specific OS version or a machine with a certain bit of hardware, you need to code it directly into the script. If the method of extracting that information changes, you need to modify every single script that uses that method. With Facter, you&rsquo;re editing one file, which is always up to date on the client. Anyway, that&rsquo;s enough waffle from me. Let&rsquo;s get started.<!--more--></p>

<h2>Requirements</h2>

<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
<li><a href="http://downloads.vagrantup.com/">Vagrant</a></li>
<li>Either a Mac running 10.8 that you don’t mind wiping, or a Virtual Machine running in VMWare Fusion or similar.</li>
<li>Git (Install the Command Line Tools from within <a href="https://itunes.apple.com/gb/app/xcode/id497799835?mt=12">Xcode&rsquo;s</a> preferences if you don&rsquo;t have it).</li>
</ul>


<h2>Setup</h2>

<p>We need a Puppet Master &ndash; fortunately there’s one pre-built that has everything we need. Make sure you’ve installed everything in the requirements, and then open up your trusty Terminal:</p>

<p><code>bash
$ mkdir ~/src
$ git clone https://github.com/grahamgilbert/vagrant-puppetmaster.git facter-101
$ cd facter-101
$ vagrant up
</code></p>

<p>This will pull down the needed bits to get your own Puppet Master running and then <code>vagrant up</code> will start things going. If you get errors about Postgres, just issue a <code>vagrant reload</code></p>

<p>Now for your test Mac: I&rsquo;ve made a script to automate the process. If you <strong>don&rsquo;t</strong> have a DNS entry for your Puppet Master, and you&rsquo;re using the Vagrant setup described above, run this in your terminal:</p>

<p><code>bash
$ curl -o /tmp/install_puppet.py https://raw.github.com/grahamgilbert/macscripts/master/Puppet-Install/install_puppet.py; sudo python /tmp/install_puppet.py --appendhosts
</code></p>

<p>If you are using a different setup, please refer to the <a href="https://github.com/grahamgilbert/macscripts/tree/master/Puppet-Install">script&rsquo;s readme</a> for more information</p>

<h2>Learn some Facts</h2>

<p>On your client machine, run this in a Terminal</p>

<p><code>bash
$ sudo facter
</code></p>

<p>Your test Mac will churn away for a minute and then spit out a ton of information &ndash; you&rsquo;ll see everything from the uptime of the machine to the amount of RAM. Still not overly useful sitting on that one machine. We need this information somewhere central to make use of it.</p>

<p>We need to make one small change to <code>~/src/facter-101/puppet/manifests/site.pp</code> to get the puppet run working:</p>

<p>``` ruby</p>

<h1>comment out the next line by putting a hash in front of it</h1>

<h1>import &ldquo;classes/*&rdquo;</h1>

<p>```</p>

<p>This is to stop Puppet complaining that there&rsquo;s nothing to import &ndash; which there isn&rsquo;t yet.</p>

<p> Assuming your Puppet Master is running, this is on your test Mac:</p>

<p><code>bash
sudo puppet agent -t
</code></p>

<p>You&rsquo;ll see a load of files being synced to your test Mac &ndash; these are custom Facts, plugins and assorted other goodies being pulled from the server. We&rsquo;ll get to using custom Facts in a moment. If you load up <a href="http://192.168.33.10:3000">http://192.168.33.10:3000</a> in your browser of choice, you&rsquo;ll see your client having checked into Puppet. Click on it&rsquo;s hostname and you&rsquo;ll be presented with a list of all of the available Facts for that machine.</p>

<p><a href="/images/posts/2013-04-02/Puppet_Node_Manager.png"><img class="center" src="/images/posts/2013-04-02/Puppet_Node_Manager.png" title="" ></a></p>

<p>That&rsquo;s all very nice, but what can we use it for?</p>

<h2>The Plan</h2>

<p>We&rsquo;re going to install some extra facts from the Puppet Forge onto our Master, and then write some code to target a specific set of machines. In our fictional world, every Mac with 4GB or more of RAM will be designated a &ldquo;design&rdquo; Mac. We&rsquo;ll install Firefox on those (that&rsquo;s a design app, right?).</p>

<p>First we&rsquo;ll install the extra Facts onto our Master from the Forge.</p>

<p>``` bash
$ cd ~/src/facter-101
$ vagrant ssh</p>

<h1>You&rsquo;re on the Puppet Master now</h1>

<p>$ sudo puppet module install grahamgilbert/mac_facts</p>

<h1>Get out of the Puppet Master</h1>

<p>$ exit</p>

<h1>Restart the Puppet Master to pick up the new module</h1>

<p>$ vagrant reload
```</p>

<p>Now we&rsquo;ll write a class that will:</p>

<ul>
<li>Test that the client machine is a Mac</li>
<li>Test that the client machine also has more than 4GB RAM</li>
<li>If both conditions are satisfied, will install Firefox.</li>
</ul>


<p>Create your <code>~/src/facter-101/puppet/manifests/classes/design.pp</code>and make it look like the following.</p>

<p>``` ruby ~/src/facter-101/puppet/manifests/classes/design.pp
class design {</p>

<pre><code>if $::operatingsystem == "Darwin" and $::mac_memory_in_gb &gt;= 4{
    package { 'Firefox':
        ensure =&gt; installed,
        provider =&gt; appdmg,
        source =&gt; "http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/19.0.2/mac/en-US/Firefox%2019.0.2.dmg",
    }
}
</code></pre>

<p>}
```</p>

<p>Puppet has a default node &ndash; all machines checking into the Master get anything that&rsquo;s declared in this node by default. Open up <code>~/src/facter-101/puppet/manifests/site.pp</code> and make it look like:</p>

<p>``` ruby ~/src/facter-101/puppet/manifests/site.pp
import &ldquo;classes/*&rdquo;</p>

<p>node default {</p>

<pre><code>include design
</code></pre>

<p>}
```</p>

<p>We&rsquo;ve added some classes, so the Puppet Master process needs to be restarted &ndash; rebooting the whole VM is probably quicker.</p>

<p><code>bash
$ vagrant reload
</code></p>

<p>On your Test Mac, perform a Puppet run.</p>

<p><code>bash
$ sudo puppet agent -t
</code></p>

<p><img class="center" src="/images/posts/2013-04-02/Firefox_Installed.png" title="" ></p>

<p>Depending on how much memory is in your test Mac, this might or might not do anything. Play with the $::mac_memory_in_gb value, starting high and then bringing it down to the amount of RAM in your test Mac &ndash; or if you are running your test Mac in a VM, you could also adjust the amount of memory assigned to it.</p>

<p>So that&rsquo;s Facter &ndash; you&rsquo;re not limited to using this with the default node, this technique can be used anywhere you write Puppet code. Try changing your design.pp file to look like the following &ndash; we&rsquo;re using Facter Facts directly within our manifest to write data to the test Mac.</p>

<p>``` ruby ~/src/facter-101/puppet/manifests/classes/design.pp
class design {</p>

<pre><code>if $::operatingsystem == "Darwin" and $::mac_memory_in_gb &gt;= 4{
    package { 'Firefox':
        ensure =&gt; installed,
        provider =&gt; appdmg,
        source =&gt; "http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/19.0.2/mac/en-US/Firefox%2019.0.2.dmg",
    }
}

file { '/tmp/mac_ver': 
    content =&gt; "This Mac is running ${::sp_os_version}",
}
</code></pre>

<p>}
```</p>

<p>Which gives us</p>

<p><code>bash
$ less /tmp/mac_ver
This Mac is running OS X 10.8.3 (12D78)
</code></p>

<p>This is a very simple example of how you can use Facter to configure your machines. Facter can be used anywhere you&rsquo;d set a variable manually &ndash; the <a href="http://docs.puppetlabs.com/puppet/latest/reference/lang_conditional.html">Puppet documentation on Conditional Statements</a> is an excellent next step with dynamically assigning configuration to your machines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Puppet on OS X (Part 4)]]></title>
    <link href="http://grahamgilbert.com/blog/2013/03/05/getting-started-with-puppet-on-os-x-part-4/"/>
    <updated>2013-03-05T14:59:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/03/05/getting-started-with-puppet-on-os-x-part-4</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve made quite a bit of progress with our Puppet install. We&rsquo;ve already made Puppet do something useful with setting up an admin user, but let&rsquo;s get back to being lazy &ndash; let&rsquo;s get someone else to write the code.</p>

<p>Before reading this post, you really need to read <a href="http://grahamgilbert.com/blog/2013/01/25/getting-started-with-puppet-part-1/">part 1</a>, <a href="http://grahamgilbert.com/blog/2013/01/27/getting-started-with-puppet-on-os-x-part-2/">part 2</a> and <a href="http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3/">part 3</a> of the series.</p>

<p>Modules are little pre-built bits of Puppet code. They&rsquo;re a good example of Puppet&rsquo;s philosophy of convention over configuration &ndash; Puppet will assume your modules follow a set pattern. We&rsquo;ll be using two of the available folders in modules today: files and manifests. Files are static files that Puppet will copy over to our client machine, and manifests will contain the Puppet code we&rsquo;ve previously been putting into <code>/etc/puppet/manifests/site.pp</code> &ndash; whilst it&rsquo;s been easy to put code into this file, it can become unwieldy when you have a few nodes to manage.</p>

<p>There are also loads of pre-built modules on the <a href="http://forge.puppetlabs.com/">Puppet Forge</a> &ndash; it&rsquo;s one of these modules we&rsquo;ll be using today.<!--more--></p>

<p>Assuming you&rsquo;re still using the Vagrant-based Puppet Master from <a href="http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3/">part 3</a>, cd into the directory you&rsquo;ve cloned the repository to, issue a <code>vagrant up</code> command. Once you&rsquo;ve booted the VM, we need to SSH into it.</p>

<pre><code>vagrant ssh
</code></pre>

<p>Puppet provides a handy tool to manage modules &ndash; <code>puppet module</code>. To install the <a href="http://forge.puppetlabs.com/rcoleman/mac_profiles_handler">mac_profiles_handler by Ryan Coleman</a>, tap in:</p>

<pre><code>sudo puppet module install rcoleman/mac_profiles_handler
</code></pre>

<p>Pretty straightforward syntax there &ndash; the person who wrote the module comes before the slash, and the name of the module after it. You&rsquo;ll see some bumph about Puppet downloading the module, and if the author has specified any dependency on other modules, they&rsquo;ll be downloaded as well.</p>

<p>If you switch back to your Mac and look in the folder you cloned the vagrant-puppetmaster git repository into (mine is at <code>~/src/Mine/blog-post</code>), you&rsquo;ll see the module you just installed in the <code>puppet/modules</code> directory.</p>

<p><img src="/images/posts/2013-03-05/mac_profiles_handler.png"></p>

<p>Feel free to have a nose around to get the general structure for what a Puppet module can look like. It&rsquo;s ok, I&rsquo;ll wait.</p>

<p>Time for us to make our own module. In <code>puppet/modules</code> create a folder called <code>my_super_module</code>. Within that, make <code>files</code> and <code>manifests</code> directories.</p>

<p><img src="/images/posts/2013-03-05/my_super_module.png"></p>

<p>Next, grab <a href="/images/posts/2013-03-05/com.grahamgilbert.vpn.mobileconfig">this simple configuration profile</a> I made. It configures a VPN connection &ndash; it&rsquo;s unsigned, so you can see what you&rsquo;re installing on your test Mac if you&rsquo;d like. Place this .mobileconfig file in <code>puppet/modules/my_super_module/files</code>. Or, if you&rsquo;d rather, you can make your own for something else &ndash; configuring WiFi is pretty handy &ndash; I made this one in two minutes using <a href="http://support.apple.com/kb/dl1465">iPhone Configuration Utility</a>, but you can also make them with Profile Manager (I would recommend making them unsigned though, but that&rsquo;s outside the scope of this article).</p>

<p>For the actual meat of our module, we need some Puppet code. In your favourite text editor (please remember, not TextEdit!), create <code>puppet/modules/my_super_module/init.pp</code>, and make it look like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>puppet/modules/my_super_module/init.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">my_super_module</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;mac_profiles_handler::manage { &#39;com.grahamgilbert.vpn&#39;:</span>
</span><span class='line'><span class="sr">  ensure       =&amp;gt; present,</span>
</span><span class='line'><span class="sr">  file_source  =&amp;gt; &#39;puppet:/</span><span class="o">//</span><span class="n">modules</span><span class="o">/</span><span class="n">my_super_module</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="n">grahamgilbert</span><span class="o">.</span><span class="n">vpn</span><span class="o">.</span><span class="n">mobileconfig</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are a few bits we&rsquo;ve not seen before here:</p>

<pre><code>ensure =&gt; present,
</code></pre>

<p>We&rsquo;re simply telling puppet that we want to make sure this profile is always installed. If it&rsquo;s missing, re-install it. If we set this to <code>ensure =&gt; absent</code>, we&rsquo;d be telling Puppet to remove the profile. If we wanted to simply update the profile, we&rsquo;d just replace the mobileconfig file (this module will be aware of the change and update the installed profile).</p>

<pre><code>file_source  =&gt; 'puppet:///modules/my_super_module/com.grahamgilbert.vpn.mobileconfig',
</code></pre>

<p>This is referring to the file in our module. The important bit is <code>puppet:///</code> with three slashes. That point to the server we&rsquo;re currently running on (and also makes our module portable to other servers). We don&rsquo;t need to do any other configuration to get Puppet serving this file now, as it expects to serve static files out of the <code>files</code> directory.</p>

<p>As we are using the built in web server for our Puppet Master, we need to restart the puppetmaster service to let it know about our new module. When you&rsquo;re on the Mac side, it&rsquo;s easiest just to reload the whole server:</p>

<pre><code>cd ~/src/wherever/your/code/is
vagrant reload
</code></pre>

<p>Time to test it. Fire up your test Mac or your VM (if you need to configure it, please look at the <a href="http://grahamgilbert.com/blog/2013/02/24/getting-started-with-puppet-on-os-x-part-3/">last post</a>, I&rsquo;m assuming it&rsquo;s still set up), and perform a Puppet run:</p>

<pre><code>sudo puppet agent --test
</code></pre>

<p>Wait! Nothing happened. That&rsquo;s because we&rsquo;ve not told the Puppet Master to apply this particular module to our client Mac.</p>

<p>Make your <code>puppet/manifests/site.pp</code> look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>puppet/manifests/site.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node</span> <span class="n">puppetclient</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include my_super_module</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>All we&rsquo;re doing here is telling Puppet to include our module with the default settings (as we didn&rsquo;t make any settings that can be changed &ndash; once again, outside the scope of this post). Splitting your code into modules not only allows you to share them with others if you wish, but also means you only need to change your code once and have it affect all of your applicable nodes.</p>

<p>Anyway, save your <code>site.pp</code> and perform another run on your client:</p>

<pre><code>sudo puppet agent --test
</code></pre>

<p>And now you&rsquo;ll see something along the lines of:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Info: Retrieving plugin
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/provider]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/provider/profile_manager]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/provider/profile_manager/osx.rb]/ensure: defined content as &lsquo;{md5}48a098b58bf3fdf38f32a0261026fa59&rsquo;
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/type]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/puppet/type/profile_manager.rb]/ensure: defined content as &lsquo;{md5}578a75ebe7f9972c7f49f8c5d4e1ad43&rsquo;
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/facter]/ensure: created
</span><span class='line'>Notice: /File[/var/lib/puppet/lib/facter/profiles.rb]/ensure: defined content as &lsquo;{md5}54c12303c601579fb2282304363c8425&rsquo;
</span><span class='line'>Info: Loading facts in /var/lib/puppet/lib/facter/profiles.rb
</span><span class='line'>Info: Caching catalog for puppetclient
</span><span class='line'>Info: Applying configuration version &lsquo;1362471535&rsquo;
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/File[/var/lib/puppet/mobileconfigs]/ensure: created
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/File[/var/lib/puppet/mobileconfigs/com.grahamgilbert.vpn]/ensure: defined content as &lsquo;{md5}48232db3a25fd851d1b1c7ec7c9557c8&rsquo;
</span><span class='line'>Info: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/File[/var/lib/puppet/mobileconfigs/com.grahamgilbert.vpn]: Scheduling refresh of Exec[remove-profile-com.grahamgilbert.vpn]
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/Exec[remove-profile-com.grahamgilbert.vpn]: Triggered &lsquo;refresh&rsquo; from 1 events
</span><span class='line'>Notice: /Stage[main]/My_super_module/Mac_profiles_handler::Manage[com.grahamgilbert.vpn]/Profile_manager[com.grahamgilbert.vpn]/ensure: created
</span><span class='line'>Info: Creating state file /var/lib/puppet/state/state.yaml
</span><span class='line'>Notice: Finished catalog run in 1.57 seconds</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And if you look in System Preferences, you&rsquo;ll see the Profiles icon has appeared, and that your profile has been installed.</p>

<p><img src="/images/posts/2013-03-05/profiles.png"></p>

<p>And in the Network pane, your VPN connection has been configured:</p>

<p><img src="/images/posts/2013-03-05/vpn.png"></p>

<p>Next time, we&rsquo;ll look at using Facter to make our code a little more intelligent. As ever, comments, corrections and general abuse is welcome.</p>

<p>(Not the abuse, that&rsquo;s not nice.)</p>
]]></content>
  </entry>
  
</feed>
