<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | graham gilbert]]></title>
  <link href="http://grahamgilbert.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2014-06-30T14:08:56+01:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ZNC: An IRC Bouncer]]></title>
    <link href="http://grahamgilbert.com/blog/2013/10/13/znc-an-irc-bouncer/"/>
    <updated>2013-10-13T08:35:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2013/10/13/znc-an-irc-bouncer</id>
    <content type="html"><![CDATA[<p>Yes,  it&rsquo;s true. The most interesting conversations in the Mac admin world take place using technology from the 1980&rsquo;s &ndash; <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a> (##osx-server on <a href="http://freenode.net/">freenode</a>). Those of you who know me will know that I&rsquo;m borderline OCD. In this instance, my major annoyance was that I&rsquo;d only get half of the conversation and I&rsquo;d miss private messages when I had to put my laptop to sleep. I needed to somehow keep a persistient conenction to IRC without having to sit infront of my computer 24/7.</p>

<p>I&rsquo;d heard of IRC bouncers before &ndash; an app that runs on a server, saving the messages in the rooms you specify for you until you are able to read them, but always assumed they were much more difficult to set up than it turned out to be.</p>

<p>This is set up on a box running Ubuntu 12.04, with port 6666 opened on your firewall and forwarded to the box if you want to access it from outside the network. Mine is running on an <a href="http://aws.amazon.com/free/">Amazon EC2 Micro instance</a> &ndash; available for free for one year if you don&rsquo;t already have a server to run it on.</p>

<p>Right, let&rsquo;s get started. All of these commands are to be run as your normal user (<code>graham</code> in this case &ndash; <strong>not root</strong>). First we&rsquo;re going to enable backports in Ubuntu. I like editing text files in <code>nano</code> so I&rsquo;m going to install that first, but feel free to use Vi or whatever you like.</p>

<p><code>bash
$ sudo apt-get install -y nano
$ sudo nano /etc/apt/sources.list
</code></p>

<p>Find the two backports lines commented out (lines 44-45 on my test box) and unomment them.</p>

<p><code>bash
deb http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
</code></p>

<p>If you are using nano, hit <code>CTRL+O</code> and press return to save it, then <code>CTRL-X</code> to exit.</p>

<p>To install ZNC, issue the following command:</p>

<p><code>bash
$ sudo apt-get update
$ sudo apt-get install -y znc/precise-backports znc-dbg/precise-backports znc-dev/precise-backports znc-extra/precise-backports znc-perl/precise-backports znc-python/precise-backports znc-tcl/precise-backports
</code></p>

<!-- more -->


<p>Thankfully there is a easy wizard to follow to configure ZNC. Below is a transcript of my settings, but feel free to adjust them to your tastes (make sure you are running this as your normal user, not sudo/root). Do not be scared by the masses of text, you have to type in very little.</p>

<p><code>
$ znc --makeconf
[ ok ] Checking for list of available modules...
[ ** ] Building new config
[ ** ]
[ ** ] First let's start with some global settings...
[ ** ]
[ ?? ] What port would you like ZNC to listen on? (1025 to 65535): 6666
[ ?? ] Would you like ZNC to listen using SSL? (yes/no) [no]: yes
[ ** ] Unable to locate pem file: [/home/graham/.znc/znc.pem]
[ ?? ] Would you like to create a new pem file now? (yes/no) [yes]: yes
[ ok ] Writing Pem file [/home/graham/.znc/znc.pem]...
[ ?? ] Would you like ZNC to listen using ipv6? (yes/no) [yes]: no
[ ?? ] Listen Host (Blank for all ips):
[ ok ] Verifying the listener...
[ ** ]
[ ** ] -- Global Modules --
[ ** ]
[ ** ] +-----------+----------------------------------------------------------+
[ ** ] | Name      | Description                                              |
[ ** ] +-----------+----------------------------------------------------------+
[ ** ] | partyline | Internal channels and queries for users connected to znc |
[ ** ] | webadmin  | Web based administration module                          |
[ ** ] +-----------+----------------------------------------------------------+
[ ** ] And 12 other (uncommon) modules. You can enable those later.
[ ** ]
[ ?? ] Load global module &lt;partyline&gt;? (yes/no) [no]:
[ ?? ] Load global module &lt;webadmin&gt;? (yes/no) [no]:
[ ** ]
[ ** ] Now we need to set up a user...
[ ** ]
[ ?? ] Username (AlphaNumeric): grahamgilbert
[ ?? ] Enter Password:
[ ?? ] Confirm Password:
[ ?? ] Would you like this user to be an admin? (yes/no) [yes]: yes
[ ?? ] Nick [grahamgilbert]:
[ ?? ] Alt Nick [grahamgilbert_]:
[ ?? ] Ident [grahamgilbert]:
[ ?? ] Real Name [Got ZNC?]: Graham Gilbert
[ ?? ] Bind Host (optional):
[ ?? ] Number of lines to buffer per channel [50]: 1000
[ ?? ] Would you like to clear channel buffers after replay? (yes/no) [yes]: yes
[ ?? ] Default channel modes [+stn]:
[ ** ]
[ ** ] -- User Modules --
[ ** ]
[ ** ] +--------------+------------------------------------------------------------------------------------------+
[ ** ] | Name         | Description                                                                              |
[ ** ] +--------------+------------------------------------------------------------------------------------------+
[ ** ] | chansaver    | Keep config up-to-date when user joins/parts                                             |
[ ** ] | controlpanel | Dynamic configuration through IRC. Allows editing only yourself if you're not ZNC admin. |
[ ** ] | perform      | Keeps a list of commands to be executed when ZNC connects to IRC.                        |
[ ** ] +--------------+------------------------------------------------------------------------------------------+
[ ** ] And 22 other (uncommon) modules. You can enable those later.
[ ** ]
[ ?? ] Load module &lt;chansaver&gt;? (yes/no) [no]: yes
[ ?? ] Load module &lt;controlpanel&gt;? (yes/no) [no]:
[ ?? ] Load module &lt;perform&gt;? (yes/no) [no]:
[ ** ]
[ ?? ] Would you like to set up a network? (yes/no) [no]: yes
[ ?? ] Network (e.g. `freenode' or `efnet'): freenode
[ ** ]
[ ** ] -- Network Modules --
[ ** ]
[ ** ] +-------------+-------------------------------------------------------------------------------------------------+
[ ** ] | Name        | Description                                                                                     |
[ ** ] +-------------+-------------------------------------------------------------------------------------------------+
[ ** ] | chansaver   | Keep config up-to-date when user joins/parts                                                    |
[ ** ] | keepnick    | Keep trying for your primary nick                                                               |
[ ** ] | kickrejoin  | Autorejoin on kick                                                                              |
[ ** ] | nickserv    | Auths you with NickServ                                                                         |
[ ** ] | perform     | Keeps a list of commands to be executed when ZNC connects to IRC.                               |
[ ** ] | simple_away | This module will automatically set you away on IRC while you are disconnected from the bouncer. |
[ ** ] +-------------+-------------------------------------------------------------------------------------------------+
[ ** ] And 17 other (uncommon) modules. You can enable those later.
[ ** ]
[ ?? ] Load module &lt;chansaver&gt;? (yes/no) [no]: yes
[ ?? ] Load module &lt;keepnick&gt;? (yes/no) [no]: no
[ ?? ] Load module &lt;kickrejoin&gt;? (yes/no) [no]: no
[ ?? ] Load module &lt;nickserv&gt;? (yes/no) [no]: no
[ ?? ] Load module &lt;perform&gt;? (yes/no) [no]: no
[ ?? ] Load module &lt;simple_away&gt;? (yes/no) [no]: yes
[ ** ]
[ ** ] -- IRC Servers --
[ ** ] Only add servers from the same IRC network.
[ ** ] If a server from the list can't be reached, another server will be used.
[ ** ]
[ ?? ] IRC server (host only): irc.freenode.net
[ ?? ] [irc.freenode.net] Port (1 to 65535) [6667]:
[ ?? ] [irc.freenode.net] Password (probably empty):
[ ?? ] Does this server use SSL? (yes/no) [no]:
[ ** ]
[ ?? ] Would you like to add another server for this IRC network? (yes/no) [no]:
[ ** ]
[ ** ] -- Channels --
[ ** ]
[ ?? ] Would you like to add a channel for ZNC to automatically join? (yes/no) [yes]: yes
[ ?? ] Channel name: ##osx-server
[ ?? ] Would you like to add another channel? (yes/no) [no]: no
[ ?? ] Would you like to set up another network? (yes/no) [no]: no
[ ** ]
[ ?? ] Would you like to set up another user? (yes/no) [no]: no
[ ok ] Writing config [/home/vagrant/.znc/configs/znc.conf]...
[ ** ]
[ ** ] To connect to this ZNC you need to connect to it as your IRC server
[ ** ] using the port that you supplied.  You have to supply your login info
[ ** ] as the IRC server password like this: user/network:pass.
[ ** ]
[ ** ] Try something like this in your IRC client...
[ ** ] /server &lt;znc_server_ip&gt; +6666 grahamgilbert:&lt;pass&gt;
[ ** ] And this in your browser...
[ ** ] https://&lt;znc_server_ip&gt;:6666/
[ ** ]
[ ?? ] Launch ZNC now? (yes/no) [yes]: no
</code></p>

<p>Still with me? One last thing to do &ndash; make sure ZNC starts and keeps running. We&rsquo;ll use Upstart (hat-tip to <a href="https://twitter.com/natewalck/status/389345376811356160">@natewalck</a>).</p>

<p><code>bash
$ sudo nano /etc/init/znc.conf
</code></p>

<p>And pop in the following, replacing <code>sudo -u graham</code> with your own username.</p>

<p>```</p>

<h1>znc &ndash; IRC Bouncer</h1>

<p>description &ldquo;IRC Bouncer&rdquo;</p>

<p>start on runlevel [2345]</p>

<p>stop on runlevel [016]</p>

<p>respawn
respawn limit 15 5</p>

<p>script
  exec sudo -u graham /usr/bin/znc
end script
```</p>

<p>Then finally start it up:</p>

<p><code>bash
$ sudo start znc
</code></p>

<p>Configuring each IRC client is different, but for Textual (my prefered client), it&rsquo;s pretty straightforward. Go to the Server menu and choose Add Server. Make the settings look like below, obviously replaing the hostname and password with the ones you chose.</p>

<p><img class="center" src="/images/posts/2013-10-13/textual_settings.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web server on Linode part 1]]></title>
    <link href="http://grahamgilbert.com/blog/2012/01/01/web-server-on-linode-part-1/"/>
    <updated>2012-01-01T20:23:03+00:00</updated>
    <id>http://grahamgilbert.com/blog/2012/01/01/web-server-on-linode-part-1</id>
    <content type="html"><![CDATA[<p>Recently, I was tasked with moving a client&rsquo;s web server from a box in their office, to something a little more robust when they put something up there that caused the server to go nuts (30 mb/s nuts!).</p>

<p>The main goals were:</p>

<ul>
<li>Fast, scalable web server</li>
<li>Multiple FTP users for the client&rsquo;s web team to modify the site</li>
<li>Integrates with their existing CrashPlan PROe backup system.</li>
<li>Use GUI&rsquo;s as much as possible for admin so lower level techs could make changes on the server.</li>
</ul>


<p>After considering several options, we decided to go with Linode. I&rsquo;ve had great success hosting my own site with them, and as we had full access to the box, we could install anything we wanted &ndash; including CrashPlan.<!--more--></p>

<p>So, first things first. Get yourself a Linode account. Start off with the cheapest 512 account and work your way upwards if you need the horsepower. Once you&rsquo;ve got your account, pick your data centre, and get your VM up and running. We usually go for Ubuntu 10.04 LTS as you&rsquo;ll find the most support online for that.</p>

<p>Now you&rsquo;ve got your Ubuntu Linode up and running, let&rsquo;s get the web server up and running (mostly borrowed from the Linode Library).</p>

<p>It&rsquo;s much easier if you set up an A record for your new VM, so for the purposes of this, we&rsquo;ll call our new VM linode.example.com.</p>

<p>The code-type font is stuff your should be putting into your terminal window, one line at a time (but to be honest, if I have to tell you that, maybe this isn&rsquo;t the right thing to be following&hellip;)</p>

<p>Set the hostname<br/>
<code>bash
echo "linode.example.com" &gt; /etc/hostname
</code></p>

<p>Get everything up to date:<br/>
<code>bash
apt-get update
apt-get upgrade
apt-get install php5 apache2 mysql-server
</code></p>

<p>Bash in your chosen MySQL root password when you&rsquo;re prompted, and you&rsquo;re done.</p>

<p>That&rsquo;s all you need for the most basic web server, but I&rsquo;m a Mac admin, I quite like having a GUI if I can, so let&rsquo;s get one installed. I quite like webmin, but it&rsquo;s not quite a straightforward as we&rsquo;d like.</p>

<p>First install the dependencies:<br/>
<code>bash
apt-get install perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl libmd5-perl apt-show-versions libapt-pkg-perl
</code></p>

<p>You&rsquo;ll notice there&rsquo;s a failure there, so we&rsquo;ll have to hunt that down ourselves. Grab the latest version from: <a href="http://mirrors.kernel.org/ubuntu/pool/universe/libm/libmd5-perl/">http://mirrors.kernel.org/ubuntu/pool/universe/libm/libmd5-perl/</a></p>

<p><code>bash
cd /tmp
wget http://mirrors.kernel.org/ubuntu/pool/universe/libm/libmd5-perl/libmd5-perl_2.03-1_all.deb
dpkg -i libmd5-perl_2.03-1_all.deb
</code></p>

<p>Now to grab the latest version of Webmin:
<code>bash
wget http://prdownloads.sourceforge.net/webadmin/webmin_1.570_all.deb
dpkg -i webmin_1.570_all.deb
</code></p>

<p>Now you should be able to log into webmin with your root username and password at <a href="https://linode.example.com:10000">https://linode.example.com:10000</a></p>

<p>I&rsquo;m not going to tell you how to set up Apache &ndash; there&rsquo;s plenty enough on the internet. It&rsquo;s easy with Webmin, the Apache defaults are reasonably sensible. Just make a directory for your web files, and point a new virtual host at the directory. If you get stuck, a good tutorial can be found at <a href="http://doxfer.webmin.com/Webmin/Name-BasedVirtualHosting">http://doxfer.webmin.com/Webmin/Name-BasedVirtualHosting</a></p>

<p>We&rsquo;re nearly done with this part, just a little housekeeping to do. First, a little cleaning up of the MySQL install. Accept the defaults that this script offers:
<code>bash
mysql_secure_installation
</code></p>

<p>If you&rsquo;re going to be running something like Wordpress, chances are you&rsquo;re going to want your server to send emails.
<code>bash
apt-get install exim4
dpkg-reconfigure exim4-config
</code></p>

<p>In the configuration wizard, choose Internet Site for the first option, bash in your Linode&rsquo;s hostname (it should already be there &ndash; if it&rsquo;s not check you&rsquo;ve set the hostname correctly), and make sure that your server will only accept SMTP connections from itself by putting 127.0.0.1 in the next box. In the box asking which domains to accept relays for, enter your Linode&rsquo;s hostname and localhost. Leave the relay domains and relay machines fields blank, and select No when asked about keeping DNS queries down. On the next question on how to store incoming mail, choose whatever you want as you won&rsquo;t be getting any incoming mail here. Finally, accept the default &ldquo;non-split&rdquo; part for how to store the configuration file.</p>

<p>For a little security through obscurity, I like to change the port that webmin listens on as well. Log in, go to Webmin &ndash;> Webmin Configuration &ndash;> Ports and Addresses, and change the listening port to something of your choosing.</p>

<p>Whilst you&rsquo;re there, you might want to change the port that SSH is on as well. In Webmin, you&rsquo;ll want to be looking at Servers &ndash;> SSH Server &ndash;> Networking</p>

<p>Finally, I like to disable the root user. First add your own user (give the user a password etc), then add them to the admin group (the user&rsquo;s in this group are automatically added to sudoers).
<code>bash
adduser myuser
adduser myuser admin
</code></p>

<p>Now log in as your new user and make sure you can sudo &ndash; once that&rsquo;s working, you can disable the root user:
<code>bash
sudo passwd -l root
</code></p>

<p>Assuming everything is working up to this point, change the DNS for your site to point to your new Linode, sit back and congratulate yourself for giving yourself one less physical box to worry about.</p>

<p>You&rsquo;ve now got a basic webserver up and running on Linode with a GUI to manage the server. Next time, we&rsquo;ll go over setting up an FTP server with virtual users (with a GUI!), and backing up the server with CrashPlan PROe, including performing a full dump of the mysql databases every night so they&rsquo;re backed up properly.</p>
]]></content>
  </entry>
  
</feed>
