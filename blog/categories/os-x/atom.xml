<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS X | graham gilbert]]></title>
  <link href="http://grahamgilbert.com/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2014-07-27T12:34:22+01:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Personal Automation: Munki (Part 2)]]></title>
    <link href="http://grahamgilbert.com/blog/2014/07/27/personal-automation-munki-part-2/"/>
    <updated>2014-07-27T11:21:37+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/07/27/personal-automation-munki-part-2</id>
    <content type="html"><![CDATA[<p>The first step to getting any Mac set up is to get some software onto it. I&rsquo;m not going to cover how to set up <a href="https://code.google.com/p/munki/wiki/GettingStartedWithMunki">Munki</a> or <a href="https://github.com/autopkg/autopkg/wiki/Getting-Started">AutoPkg</a> &ndash; there are lots of other places for that information.</p>

<p>As a sysadmin, I&rsquo;m forever testing things. Rather than destroy my own machine, I like to do this in Virtual Machines. My preferred virtualisation solution is VMware Fusion, but unfortunately it&rsquo;s not very easy to deploy out of the box. You need to do a little bit of work to get it into a package that you can import into Munki, but fortunately the process is <a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=2058680">well documented on VMware&rsquo;s site</a>.</p>

<p>The next piece of &lsquo;non standard&rsquo; software I need is <a href="http://brew.sh">Homebrew</a>. The installation method listed on their site is to run a terminal command as the current user. The first part of this is obviously fine &ndash; Munki has several methods to run scripts (payload free packages, nopkg), but it runs everything as root. Fortunately, as I&rsquo;m deploying my own machine, I can make some assumptions about where Homebrew will be installed. The first assumption I can make is that there will only be one user on the machine, and the second is that I&rsquo;m going to be logged in most of the time (as my laptop is encrypted, it&rsquo;s either off or logged in).</p>

<p>I&rsquo;m going to utilise a <code>nopkg</code> pkginfo file to perform the installation. The first part of our script to install Homebrew is to make sure that a user (me!) is logged in. Homebrew doesn&rsquo;t like being owned by root, so first we need to make sure that there is a user logged in.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;CURRENT_USER<span class="o">=</span>&lt;code&gt;/bin/ls -l /dev/console | /usr/bin/awk <span class="s1">&#39;{ print $3 }&#39;</span>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> &amp;ldquo;<span class="nv">$CURRENT_USER</span>&amp;rdquo; <span class="o">==</span> &amp;lsquo;root&amp;rsquo; <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# this can<span class="err">&#39;</span>t run at the login window, we need the current user
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So now we know that there&rsquo;s a user logged in, and who that user is. Time to install Homebrew as the current user.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /usr/local
</span><span class='line'>mkdir -p /usr/local/homebrew
</span><span class='line'>mkdir -p /usr/local/bin
</span><span class='line'>chown <span class="nv">$CURRENT_USER</span>:&lt;em&gt;developer /usr/local/homebrew
</span><span class='line'>chown <span class="nv">$CURRENT_USER</span>:&lt;/em&gt;developer /usr/local/bin&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;download and install homebrew&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;su <span class="nv">$CURRENT_USER</span> -c &amp;ldquo;/bin/bash -o pipefail -c &amp;lsquo;/usr/bin/curl -skSfL &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/mxcl/homebrew/tarball/master&quot;</span>&gt;https://github.com/mxcl/homebrew/tarball/master&lt;/a&gt; | <span class="o">(</span><span class="nb">cd</span> /usr/local ; /usr/bin/tar xz -m &amp;mdash;strip 1 -C homebrew; ln -s /usr/local/homebrew/bin/brew /usr/local/bin/brew<span class="o">)</span>&amp;rsquo;&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As we&rsquo;re using a <code>nopkg</code> with Munki rather than a payload free package, we&rsquo;ve not left any receipts, so Munki doesn&rsquo;t know if Homebrew is installed. We&rsquo;re going to use an installs array to tell Munki what to look for when determining whether Homebrew is installed or not.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;key&gt;</span>installs<span class="nt">&lt;/key&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>array<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>dict<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>key<span class="ni">&amp;gt;</span>path<span class="ni">&amp;lt;</span>/key<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>string<span class="ni">&amp;gt;</span>/usr/local/bin/brew<span class="ni">&amp;lt;</span>/string<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>key<span class="ni">&amp;gt;</span>type<span class="ni">&amp;lt;</span>/key<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>string<span class="ni">&amp;gt;</span>file<span class="ni">&amp;lt;</span>/string<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/dict<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/array<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You might be crying &ldquo;but Homebrew needs the Xcode Command Line Tools installed!&rdquo; &ndash; and you&rsquo;d be 100% correct. You have the option of importing the downloaded package into Munki, but I have adapted <a href="https://github.com/timsutton/osx-vm-templates/blob/master/scripts/xcode-cli-tools.sh">Tim Sutton&rsquo;s script</a> into a <code>nopkg</code>. To find out what&rsquo;s installed, I ran <a href="http://www.fernlightning.com/doku.php?id=software%3afseventer%3astart">fseventer</a> and chose a random file to act as my installs array. I&rsquo;ve posted the pkginfos for both the <a href="https://github.com/grahamgilbert/macscripts/blob/master/Munki/pkginfos/Xcode/XcodeCLITools-2014.07.15.plist">Xcode CLI tools</a> and all of the <a href="https://github.com/grahamgilbert/macscripts/tree/master/Munki/pkginfos/Homebrew">Homebrew installs</a> on Github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal Automation (Part 1)]]></title>
    <link href="http://grahamgilbert.com/blog/2014/07/26/personal-automation-part-1/"/>
    <updated>2014-07-26T11:27:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/07/26/personal-automation-part-1</id>
    <content type="html"><![CDATA[<p><a href="http://grahamgilbert.com/blog/2014/04/04/updating-boxen/">Earlier this year</a>, I professed my love of Boxen &ndash; the personal automation solution based on Puppet released by Github. Indeed, it served me well for quite some time, but I began to find myself spending more time fixing Boxen than actually getting things done. As Boxen was designed for internal use at Github, it set some things up how they liked them &ndash; which wasn&rsquo;t necesarily how I liked them. Sysadmins have similar needs to developers, but not exactly the same.</p>

<p>Then I updated Boxen. All of my modules were out of date, so I spent a good couple of hours updating all of them so they worked again. Ugh.</p>

<p>So I started looking at moving to my own solution. One of my major irritations when using Boxen was that it didn&rsquo;t really handle updating your apps &ndash; you got whatever version the module author decided to install and then you had to hope that there was an updatng mechanism built in. I&rsquo;ve said before that there is no better method of getting software onto your Mac then Munki, so the first decison was straightforward. The rest took a little thought.</p>

<h2>The six P&rsquo;s</h2>

<p>My first requirement was that I shouldn&rsquo;t need to run anything to get my configuration to apply. Boxen requires that you run the <code>boxen</code> command periodically across each of your Macs to get the configuration applied. This wasn&rsquo;t always practical. I needed something that would run in the background and keep itself up to date.</p>

<p>As I said before, I really disliked how Boxen installs software. Munki does a much better job, and AutoPkg makes it trivial to make sure you have the latest software version. Being a sysadmin, I need more than simple drag and drop apps and packages though &ndash; I make extensive use of <a href="http://brew.sh">Homebrew</a> to install command line tools like <a href="http://packer.io">Packer</a>, so I needed to come up with a way of installing these with Munki.</p>

<p>However, Munki isn&rsquo;t the best tool for managing my configuration. I&rsquo;ve been using Puppet to manage the Macs  I look after for nearly three years now, and I wanted to base my system on it as I&rsquo;ve already done a lot of the work with making OS X specific modules. I also wanted to use the modules made for Boxen as much as possible (some made too many assumptions about where they were running, so couldn&rsquo;t be re-used.</p>

<p>So to recap:</p>

<ul>
<li>Munki for software deployment.</li>
<li>Puppet must run in the background periodically</li>
<li>The configuration must update itself &ndash; I don&rsquo;t want to have to sync code across machines.</li>
<li>Where possible, re-use existing Puppet modules</li>
</ul>


<p>Over the next few posts, I&rsquo;ll go over the different parts of this solution, how I put it together and how you might be able to use this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automate yourself out of a job]]></title>
    <link href="http://grahamgilbert.com/blog/2014/07/10/automate-yourself-out-of-a-job/"/>
    <updated>2014-07-10T20:39:33+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/07/10/automate-yourself-out-of-a-job</id>
    <content type="html"><![CDATA[<p>A massive thanks to everyone who came to my talk today, and thanks to everyone who helped out with the Q&amp;A at the end. All of the code I used in the talk is <a href="https://github.com/grahamgilbert/automate_psu_2014">up on GitHub</a> and <a href="http://grahamgilbert.com/images/posts/2014-07-10/Automate_yourself_out_of_a_job.pdf">here are the slides</a>. Hopefully the video will convey how much fun it actually was &ndash; it could have been a disaster, so I&rsquo;m hugely grateful to everyone who contributed to the discussion at the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi tenanted Munki with Puppet and Sal]]></title>
    <link href="http://grahamgilbert.com/blog/2014/07/09/multi-tenanted-munki-with-puppet-and-sal/"/>
    <updated>2014-07-09T20:27:25+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/07/09/multi-tenanted-munki-with-puppet-and-sal</id>
    <content type="html"><![CDATA[<p>Thanks for everyone that came to my talk today, it was fun to finally show off what I&rsquo;ve been working on for the last year or so. I&rsquo;m sure the video will be up soon, but in the meantime, <a href="http://grahamgilbert.com/images/posts/2014-07-09/Multi_site_Munki.pdf">here are the slides from the talk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making packages with AutoPkg]]></title>
    <link href="http://grahamgilbert.com/blog/2014/06/30/making-packages-with-autopkg/"/>
    <updated>2014-06-30T10:12:10+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/06/30/making-packages-with-autopkg</id>
    <content type="html"><![CDATA[<p>Over the past few weeks, I&rsquo;ve had the same conversation over and over:
people telling me that once they get started using Munki, their next
step will be to start using AutoPkg. I gave each person the same
response: &ldquo;you&rsquo;re doing it wrong&rdquo;.</p>

<p>AutoPkg a has a reputation of being difficult to use. This is totally
unjustfied. You don&rsquo;t need to be using Munki for it to be useful, you
don&rsquo;t need to set it up to run automatically via Jenkins or a
LaunchDaemon. If you need to get software into a package,  AutoPkg is
the easiest way.</p>

<h2>Installing AutoPkg</h2>

<p>Head over to the <a href="https://github.com/autopkg/autopkg/releases/latest">releases page on AutoPkg&rsquo;s GitHub repository</a> and
download the latest version  (0.3.0 at the time of writing). It&rsquo;s an
Apple package, so double click it and get it installed. If you have Gate Keeper enabled, you&rsquo;ll need to right-click on the package and choose to install it from there, as it&rsquo;s not been signed.</p>

<h2>Recipes</h2>

<p>AutoPkg is useless without recipes. Fortunately, there are hundreds
that have already been made by the community.</p>

<p>We&rsquo;ll add the set of recipes maintained by AutoPkg&rsquo;s authors, which
contains some of the most common software. Open up a terminal window
and enter :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg repo-add &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/autopkg/recipes&quot;</span>&gt;https://github.com/autopkg/recipes&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll see AutoPkg downloading and adding the recipes to your Mac.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Attempting git clone&amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Adding /Users/grahamgilbert/Library/AutoPkg/RecipeRepos/com.github.autopkg.recipes to RECIPE_SEARCH_DIRS&amp;hellip;
</span><span class='line'>Updated search path:
</span><span class='line'>  &amp;lsquo;.&amp;rsquo;
</span><span class='line'>  &amp;lsquo;~/Library/AutoPkg/Recipes&amp;rsquo;
</span><span class='line'>  &amp;lsquo;/Library/AutoPkg/Recipes&amp;rsquo;
</span><span class='line'>  &amp;lsquo;/Users/vagrant/Library/AutoPkg/RecipeRepos/com.github.autopkg.recipes&amp;rsquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Using the thing</h2>

<p>Let&rsquo;s see what recipes we just added. Still in your terminal, enter:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg list-recipes
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll see a whole load of output like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Adium.download
</span><span class='line'>Adium.munki
</span><span class='line'>Adium.pkg
</span><span class='line'>AdobeAIR.pkg
</span><span class='line'>AdobeAcrobatPro9Update.download
</span><span class='line'>AdobeAcrobatPro9Update.munki
</span><span class='line'>AdobeAcrobatProXUpdate.download
</span><span class='line'>AdobeAcrobatProXUpdate.munki
</span><span class='line'>AdobeAir.munki
</span><span class='line'>AdobeFlashPlayer.download
</span><span class='line'>AdobeFlashPlayer.munki
</span><span class='line'>AdobeFlashPlayer.pkg
</span><span class='line'>AdobeFlashPlayerExtractPackage.munki
</span><span class='line'>&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The naming convention in AutoPKG is SoftwareName.output. For for
example, to run a recipe that downloads Google Chrome and adds it to
Munki, you would use the GoogleChrome.munki recipe, but if you just
wanted to download it an make a package, you&rsquo;d use the GoogleChrome.pkg recipe. It just so happens that making a package of Chrome is exactly what we want to do.</p>

<p>Back into your terminal and enter:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg run GoogleChrome.pkg
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The AutoPkg robot will churn away and you&rsquo;ll get some output similar to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Processing GoogleChrome.pkg&amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The following new items were downloaded:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/Users/grahamgilbert/Library/AutoPkg/Cache/com.github.autopkg.pkg.googlechrome/downloads/GoogleChrome.dmg
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The following packages were built:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Identifier               Version          Pkg path
</span><span class='line'>----------               -------          --------
</span><span class='line'>com.google.Chrome        35.0.1916.153    /Users/grahamgilbert/Library/AutoPkg/Cache/com.github.autopkg.pkg.googlechrome/GoogleChrome-35.0.1916.153.pkg
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And when it&rsquo;s all finished, you&rsquo;ll be left with a nice package that
you can use anywhere you&rsquo;d use finely crafted packages &ndash; ARD, AutoDMG or even Casper if you&rsquo;re that way inclined (although Allister Banks has been
working on a way of automating importing packages into the JSS &ndash; see
his <a href="http://tmblr.co/ZHT_Wy1J-Hk5I">recent talk</a> for more on that subject).</p>

<h2>Doing it all again</h2>

<p>What happens next time you want to build an updated package?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg run GoogleChrome.pkg
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Right?</p>

<p>Well, kinda.</p>

<p>What happens if Google changes the URL AutoPkg uses to download
Chrome? Fortunately we&rsquo;re using the community provided recipes, and if
something&rsquo;s broken they usually get fixed pretty quickly. We just need
to tell AutoPkg to update the installed recipes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg update-repo all
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then we&rsquo;re able to build our package safe in the knowledge that
someone else has done all of the hard work for us.</p>
]]></content>
  </entry>
  
</feed>
