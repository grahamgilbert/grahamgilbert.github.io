<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS X | graham gilbert]]></title>
  <link href="http://grahamgilbert.com/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2014-06-30T14:08:56+01:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making packages with AutoPkg]]></title>
    <link href="http://grahamgilbert.com/blog/2014/06/30/making-packages-with-autopkg/"/>
    <updated>2014-06-30T10:12:10+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/06/30/making-packages-with-autopkg</id>
    <content type="html"><![CDATA[<p>Over the past few weeks, I&rsquo;ve had the same conversation over and over:
people telling me that once they get started using Munki, their next
step will be to start using AutoPkg. I gave each person the same
response: &ldquo;you&rsquo;re doing it wrong&rdquo;.</p>

<p>AutoPkg a has a reputation of being difficult to use. This is totally
unjustfied. You don&rsquo;t need to be using Munki for it to be useful, you
don&rsquo;t need to set it up to run automatically via Jenkins or a
LaunchDaemon. If you need to get software into a package,  AutoPkg is
the easiest way.</p>

<h2>Installing AutoPkg</h2>

<p>Head over to the <a href="https://github.com/autopkg/autopkg/releases/latest">releases page on AutoPkg&rsquo;s GitHub repository</a> and
download the latest version  (0.3.0 at the time of writing). It&rsquo;s an
Apple package, so double click it and get it installed. If you have Gate Keeper enabled, you&rsquo;ll need to right-click on the package and choose to install it from there, as it&rsquo;s not been signed.</p>

<h2>Recipes</h2>

<p>AutoPkg is useless without recipes. Fortunately, there are hundreds
that have already been made by the community.</p>

<p>We&rsquo;ll add the set of recipes maintained by AutoPkg&rsquo;s authors, which
contains some of the most common software. Open up a terminal window
and enter :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg repo-add &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/autopkg/recipes&quot;</span>&gt;https://github.com/autopkg/recipes&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll see AutoPkg downloading and adding the recipes to your Mac.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Attempting git clone&amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Adding /Users/grahamgilbert/Library/AutoPkg/RecipeRepos/com.github.autopkg.recipes to RECIPE_SEARCH_DIRS&amp;hellip;
</span><span class='line'>Updated search path:
</span><span class='line'>  &amp;lsquo;.&amp;rsquo;
</span><span class='line'>  &amp;lsquo;~/Library/AutoPkg/Recipes&amp;rsquo;
</span><span class='line'>  &amp;lsquo;/Library/AutoPkg/Recipes&amp;rsquo;
</span><span class='line'>  &amp;lsquo;/Users/vagrant/Library/AutoPkg/RecipeRepos/com.github.autopkg.recipes&amp;rsquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Using the thing</h2>

<p>Let&rsquo;s see what recipes we just added. Still in your terminal, enter:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg list-recipes
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll see a whole load of output like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Adium.download
</span><span class='line'>Adium.munki
</span><span class='line'>Adium.pkg
</span><span class='line'>AdobeAIR.pkg
</span><span class='line'>AdobeAcrobatPro9Update.download
</span><span class='line'>AdobeAcrobatPro9Update.munki
</span><span class='line'>AdobeAcrobatProXUpdate.download
</span><span class='line'>AdobeAcrobatProXUpdate.munki
</span><span class='line'>AdobeAir.munki
</span><span class='line'>AdobeFlashPlayer.download
</span><span class='line'>AdobeFlashPlayer.munki
</span><span class='line'>AdobeFlashPlayer.pkg
</span><span class='line'>AdobeFlashPlayerExtractPackage.munki
</span><span class='line'>&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The naming convention in AutoPKG is SoftwareName.output. For for
example, to run a recipe that downloads Google Chrome and adds it to
Munki, you would use the GoogleChrome.munki recipe, but if you just
wanted to download it an make a package, you&rsquo;d use the GoogleChrome.pkg recipe. It just so happens that making a package of Chrome is exactly what we want to do.</p>

<p>Back into your terminal and enter:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg run GoogleChrome.pkg
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The AutoPkg robot will churn away and you&rsquo;ll get some output similar to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Processing GoogleChrome.pkg&amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The following new items were downloaded:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/Users/grahamgilbert/Library/AutoPkg/Cache/com.github.autopkg.pkg.googlechrome/downloads/GoogleChrome.dmg
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The following packages were built:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Identifier               Version          Pkg path
</span><span class='line'>----------               -------          --------
</span><span class='line'>com.google.Chrome        35.0.1916.153    /Users/grahamgilbert/Library/AutoPkg/Cache/com.github.autopkg.pkg.googlechrome/GoogleChrome-35.0.1916.153.pkg
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And when it&rsquo;s all finished, you&rsquo;ll be left with a nice package that
you can use anywhere you&rsquo;d use finely crafted packages &ndash; ARD, AutoDMG or even Casper if you&rsquo;re that way inclined (although Allister Banks has been
working on a way of automating importing packages into the JSS &ndash; see
his <a href="http://tmblr.co/ZHT_Wy1J-Hk5I">recent talk</a> for more on that subject).</p>

<h2>Doing it all again</h2>

<p>What happens next time you want to build an updated package?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg run GoogleChrome.pkg
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Right?</p>

<p>Well, kinda.</p>

<p>What happens if Google changes the URL AutoPkg uses to download
Chrome? Fortunately we&rsquo;re using the community provided recipes, and if
something&rsquo;s broken they usually get fixed pretty quickly. We just need
to tell AutoPkg to update the installed recipes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>autopkg update-repo
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then we&rsquo;re able to build our package safe in the knowledge that
someone else has done all of the hard work for us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first-boot-pkg]]></title>
    <link href="http://grahamgilbert.com/blog/2014/04/21/first-boot-pkg/"/>
    <updated>2014-04-21T09:01:24+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/04/21/first-boot-pkg</id>
    <content type="html"><![CDATA[<p>There are some packages that can&rsquo;t be deployed to an unbooted OS, such as when building an image with AutoDMG. If you are using Greg Neagle&rsquo;s <a href="http://managingosx.wordpress.com/2012/07/25/son-of-installlion-pkg/">createOSXinstallPkg</a>, the OS X installer environment doesn&rsquo;t have everything a full OS X install has. For times like this, you need to install the packages at first boot. For a long time, I&rsquo;ve used Rich Trouton&rsquo;s <a href="http://derflounder.wordpress.com/2014/04/17/first-boot-package-install-revisited/">First Boot Package Install</a>, however I found myself repeating things quite a bit and having a folder full of first boot packages.</p>

<p>So, I made my own. The main features of <a href="https://github.com/grahamgilbert/first-boot-pkg">first-boot-pkg</a> are:</p>

<ul>
<li>It is designed with scripting and automation in mind, with options able to be configured with a configuration plist or via options on the command line (or a mixture of both)</li>
<li>It will re-try failed packages a specified number of times (in case of Active Directory not being available, for example)</li>
<li>Will wait for the network to be available before installing (optional, can be disabled if desired just in case your package is going to let the Mac get onto the network)</li>
</ul>


<p><a href="/images/posts/2014-04-21/first-boot-pkg.png"><img class="center" src="/images/posts/2014-04-21/first-boot-pkg.png" width="578" height="433"></a></p>

<p>If you&rsquo;re happy with using Git, I&rsquo;d recommend just making a clone of the repository and doing a <code>git pull</code> to keep the script updated. If the thought of all those gits and pulls makes you run away, you can <a href="https://github.com/grahamgilbert/first-boot-pkg/archive/master.zip">download a zip</a> of the project.</p>

<p>This script makes use of Per Olofsson&rsquo;s <a href="https://github.com/MagerValp/LoginLog">LoginLog</a> for displaying the log file whilst the script is running, so massive thanks to him for releasing it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Boxen]]></title>
    <link href="http://grahamgilbert.com/blog/2014/04/04/updating-boxen/"/>
    <updated>2014-04-04T07:54:26+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/04/04/updating-boxen</id>
    <content type="html"><![CDATA[<p>As you might know, I&rsquo;m a bit of a fan of <a href="https://www.youtube.com/watch?v=GqerWmKU1Js">Munki and Puppet</a> for managing the Macs I look after. Around a year ago, I really wanted to be able to automate my own setup across my own Macs the same way. I was forever finding that the particular git repository or app wasn&rsquo;t on the Mac I was working on. Then there came the time when I wanted to do a clean install &ndash; that was easily a day down the drain there!</p>

<h2>Automate all of the things</h2>

<p>Then <a href="https://boxen.github.com/">Boxen</a> was released &ndash; based on Puppet, but targeted at setting up individual&rsquo;s machines. I got on board just over a year ago, and haven&rsquo;t really looked back &ndash; manually installing an app on my Mac seems very strange now. I&rsquo;m not going to cover how to get started with Boxen, as there are <a href="http://lmgtfy.com/?q=getting+started+with+Boxen">many getting started guides out there</a> (however, <a href="http://garylarizza.com/blog/2013/02/15/puppet-plus-github-equals-laptop-love/">Gary Larizza&rsquo;s</a> is rather good).</p>

<p>There will come a time when you need to update the core part of Boxen. This happened to me when I clean installed 10.9 on my work laptop &ndash; all kinds of shit broke (somehow it managed to survive the upgrade process &ndash; go figure). I looked around, but couldn&rsquo;t really find a definitive guide, so here it is (it&rsquo;s shorter than this piece of rambling).</p>

<h2>Ok, stop talking</h2>

<p>As Boxen is made by GitHub, updating it is much like updating any other project on there that you&rsquo;ve made a fork of.  First we&rsquo;re going to add it as a remote repository:</p>

<p><code>bash
$ cd ~/src/our-boxen
$ git remote add upstream https://github.com/boxen/our-boxen.git
</code></p>

<p>Then we&rsquo;re going to fetch the stuff from the upstream repository:</p>

<p><code>bash
$ git fetch upstream
</code>
Now we&rsquo;re going to merge the updated repository with our own:</p>

<p><code>bash
$ git checkout master
$ git merge upstream/master
</code></p>

<p>If you haven&rsquo;t modified any of the core Boxen files (<code>Puppetfile</code>, <code>Gemfile</code> or <code>manifests/site.pp</code> in my case), you might get away without having to fix any conflicts (you can ignore any in <code>Puppetfile.lock</code> and <code>Gemfile.lock</code>, we&rsquo;ll deal with those next). I had conflicts as I had previously:</p>

<ul>
<li>Been stupid and tried to update Boxen by just changing the Puppet Module and Gem versions</li>
<li>Edited <code>site.pp</code> as I didn&rsquo;t want Nginx or node.js installed</li>
<li>Been dumb and put my custom Puppet modules in the wrong place in my <code>Puppetfile</code></li>
</ul>


<p>None of these were particularly arduous to fix, but annoying none the less. If you find you have loads, you might want to run:</p>

<p><code>bash
$ git mergetool
</code></p>

<p>The next step is to update your Puppet modules and RubyGems. First delete <code>Puppetfile.lock</code> and <code>Gemfile.lock</code>. Now go back to your trusty Terminal and:</p>

<p><code>bash
$ bundle install --without development
$ bundle exec librarian-puppet install --clean
</code></p>

<p>At this point, you might want to go through the custom modules you&rsquo;ve added to your <code>Puppetfile</code> and update those, although this is by no means required &ndash; some apps I&rsquo;ve installed through Boxen don&rsquo;t have a built in updater, so Boxen is more convenient than hunting for installers on various vendor&rsquo;s websites. Once your modules are up to date in your <code>Puppetfile</code>,  you&rsquo;re done! You can now get your Mac back to how you like it by issuing the usual:</p>

<p><code>bash
$ boxen
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding to Active Directory with Munki]]></title>
    <link href="http://grahamgilbert.com/blog/2014/04/01/binding-to-active-directory-with-munki/"/>
    <updated>2014-04-01T20:15:39+01:00</updated>
    <id>http://grahamgilbert.com/blog/2014/04/01/binding-to-active-directory-with-munki</id>
    <content type="html"><![CDATA[<p>Many organisations need to bind their Macs to AD. There are quite a few options however, that need to be changed. It&rsquo;s quite  a straightforward process to automate this with Munki, although you do have a few options to consider.</p>

<p>First off, how are you going to deliver the actual bind script? You have the option of a <a href="https://code.google.com/p/munki/wiki/ManagingPrintersWithMunki#Alternate_Method_Using_nopkg">no-pkg pkginfo</a> file, with the script directly in the pkginfo plist. Whilst the script is now easily editable in the pkginfo, it does pose a security issue in that the catalog is kept in /Library/Managed Installs/catalogs, which will contain your script. Along with your AD bind account&rsquo;s details. Whoops!</p>

<h2>Prepare the Bind!</h2>

<p>My preferred way of deploying the bind script is with a payload-free package made with The Luggage. My bind script is nothing special, it was originally borrowed from DeployStudio. You can find the <a href="https://github.com/grahamgilbert/macscripts/blob/master/AD%20Bind/postinstall">script</a> and the <a href="https://github.com/grahamgilbert/macscripts/blob/master/AD%20Bind/Makefile">Makefile</a> on my <a href="https://github.com/grahamgilbert/macscripts/tree/master/AD%20Bind">macscripts repo</a>. If you need a primer on The Luggage, <a href="http://grahamgilbert.com/blog/2013/08/09/the-luggage-an-introduction/">I wrote about it in August 2013</a>. You just need to edit the variables at the top of the script to suit your environment and build the package.</p>

<p>So you&rsquo;ve got the machine bound to AD. Great. What happens if the binding doesn&rsquo;t go to plan? Or a well meaning tech manages to unbind the machine, but can&rsquo;t manage to re-bind it? Or even worse, the user manages to unbind it themselves? We need to make Munki check that the Mac is still bound to AD.</p>

<!--more-->


<h2>installcheck_script.sh</h2>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<h1>You need to change this.</h1>

<h1>The Domain we&rsquo;re supposed to be on</h1>

<p>DOMAIN=&ldquo;ad.company.com&rdquo;</p>

<h2>STOP EDITING</h2>

<h1>The version from dsconfigad</h1>

<p>ACTUAL_DOMAIN=<code>/usr/sbin/dsconfigad -show | /usr/bin/grep -i "Active Directory Domain" | /usr/bin/sed -n 's/[^.]*= //p'</code></p>

<p>if [ &ldquo;$ACTUAL_DOMAIN&rdquo; = &ldquo;$DOMAIN&rdquo; ]</p>

<pre><code>then
# We're on the right domain, no need to install
exit 1
</code></pre>

<p>else</p>

<pre><code># Domain isn't being returned from dsconfigad, need to install
exit 0
</code></pre>

<p>fi
```</p>

<p>You should save this as install <code>check_script.sh</code> in the same directory as your binding package. This script is querying the Active Directory domain the Mac is on and checking it&rsquo;s the one you want.</p>

<p>Simple.</p>

<p>Job done.</p>

<p>Right&hellip;?</p>

<h2>Not quite finished</h2>

<p>The main issue with using an <code>installcheck_script</code> is that we&rsquo;re bypassing every other mechanism that Munki uses to check if an item needs to be installed, which means that if we ever need to update our AD bind package and install it, or if the Mac was previously bound to AD, Munki will cheerfully ignore the package because as far as it&rsquo;s concerned, if it passes the installcheck_script, everything&rsquo;s fine and dandy.</p>

<h2>installcheck_script.sh take 2</h2>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<h1>You need to change these.</h1>

<h1>The Domain we&rsquo;re supposed to be on</h1>

<p>DOMAIN=&ldquo;ad.company.com&rdquo;</p>

<h1>The version of the package (today&rsquo;s date if created using the usual Luggage Makefile)</h1>

<p>PKG_VERSION=&ldquo;20140401&rdquo;</p>

<h1>The identifier of the package</h1>

<p>PKG_ID=&ldquo;com.grahamgilbert.ad-bind&rdquo;</p>

<h2>STOP EDITING</h2>

<h1>The version from dsconfigad</h1>

<p>ACTUAL_DOMAIN=<code>/usr/sbin/dsconfigad -show | /usr/bin/grep -i "Active Directory Domain" | /usr/bin/sed -n 's/[^.]*= //p'</code></p>

<h1>The version installed from pkgutil</h1>

<p>VERSION_INSTALLED=<code>/usr/sbin/pkgutil --pkg-info ${PKG_ID} | /usr/bin/grep version | /usr/bin/sed 's/^[^:]*: //'</code>
if [ &ldquo;$ACTUAL_DOMAIN&rdquo; = &ldquo;$DOMAIN&rdquo; ]</p>

<pre><code>then
# We're on the right domain, make sure we've got the right version of the package
if [ "$VERSION_INSTALLED" = "$PKG_VERSION" ]
then
    # Everything's ok, no need to install
    exit 1
else
    # Package is out of date, need to install
    exit 0
fi
</code></pre>

<p>else</p>

<pre><code># Domain isn't being returned from dsconfigad, need to install
exit 0
</code></pre>

<p>fi
```</p>

<p>This is a little more complicated, but not much. First off we&rsquo;re doing the same check as before, making sure we&rsquo;re actually bound to the domain. If we aren&rsquo;t, we obviously need to install the package, so that&rsquo;s the end of that. If we are bound, we next need to check which version of the package we have. As previously mentioned, Munki would usually do this for us, but by using the installcheck_script, we&rsquo;ve engaged the &ldquo;leave me alone, I know what the fuck I&rsquo;m doing&rdquo; mode in Munki, so we&rsquo;re implementing that check ourselves. If the version or package identifier don&rsquo;t match, we want our bind script installed, screw those other guys with their not-as-good-as-our-way of binding.</p>

<p>All that&rsquo;s left now is to <code>munkiimport</code> your package with your script as an <code>installcheck_script</code>:</p>

<p><code>bash
$ /usr/local/munki/munkiimport ad-bind.pkg --installcheck_script=installcheck_script.sh
</code></p>

<p>There you have it, how to keep a Mac bound to AD with Munki. You may wish to change some other settings later on (particularly if you have to do battle with a .local domain), but this will get you going with a basic AD bind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sal: The Munki Puppet]]></title>
    <link href="http://grahamgilbert.com/blog/2014/01/17/sal-the-munki-puppet/"/>
    <updated>2014-01-17T10:51:46+00:00</updated>
    <id>http://grahamgilbert.com/blog/2014/01/17/sal-the-munki-puppet</id>
    <content type="html"><![CDATA[<p>At <a href="http://pebbleit.com">pebble.it</a>, we always wanted to have an easy dashboard to look at to visualise the information we could collect from Puppet and Munki. We tried a few options, but didn&rsquo;t like any of them, so we made our own.</p>

<p>Say hi to Sal &ndash; the Munki Puppet. It&rsquo;s a multi-tenanted reporting solution for Munki and optionally, Facter.  You can find all of the details <a href="https://github.com/grahamgilbert/sal">over on GitHub</a>, including installation instructions and a package to send out to your clients.</p>

<p><img class="center" src="/images/posts/2014-01-17/Sal.png"></p>

<p>There is a plugin system built in to Sal, and over the next few days I will have a couple of posts covering how to make your own.</p>
]]></content>
  </entry>
  
</feed>
