<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Server | graham gilbert]]></title>
  <link href="http://grahamgilbert.com/blog/categories/server/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2014-05-19T12:01:03+01:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Profile Manager Enrollment Package]]></title>
    <link href="http://grahamgilbert.com/blog/2012/04/06/profile-manager-enrollment-package/"/>
    <updated>2012-04-06T10:38:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2012/04/06/profile-manager-enrollment-package</id>
    <content type="html"><![CDATA[<p>Over the past week or so, we had a need to enroll macs automagically with a Lion Profile Manager server. My first plan was to do what Charles Edge did in his recent <a href="http://krypted.com/mac-os-x/automating-profile-manager-enrollment-through-deploystudio/">blog post</a> and use DeployStudio. Then I remembered another post by Charles on <a href="http://krypted.com/iphone/profile-manager-and-profiles/">/usr/bin/profiles</a> and wondered if I could make a workflow that can be used throughout our deployment and system maintenance process &ndash; yup, the humble pkg, that can be popped into Munki for existing macs, installed with DeployStudio for imaging and pushed out with ARD if need be.</p>

<p><a href="https://github.com/grahamgilbert/Profile-Manager-Enrollment">Get the code from GitHub</a></p>

<p>Assuming you&rsquo;ve got <a href="https://github.com/unixorn/luggage">The Luggage</a> set up, first off you&rsquo;ll need your enrollment and trust profiles:</p>

<ol>
<li>Create a new enrollment profile</li>
<li>Give your enrollement profile a name</li>
<li>Download the trust profile</li>
<li>Download the enrollment profile</li>
</ol>


<p><a href="/images/posts/2012-04-06/profile_enrollment_and_trust-full.jpg"><img class="center" src="/images/posts/2012-04-06/profile_enrollment_and_trust-thumb.jpg"></a></p>

<p>If your attachments auto open, click cancel when you&rsquo;re asked if you want to install the profiles so they stay in ~/Downloads. Rename them to enroll.mobileconfig and trust.mobileconfig and pop them into the directory you cloned from GitHub. A quick <code>make pkg</code> and you&rsquo;ve got your package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Lion Recovery HD]]></title>
    <link href="http://grahamgilbert.com/blog/2012/02/01/making-a-lion-recovery-hd/"/>
    <updated>2012-02-01T17:30:35+00:00</updated>
    <id>http://grahamgilbert.com/blog/2012/02/01/making-a-lion-recovery-hd</id>
    <content type="html"><![CDATA[<p>So you&rsquo;ve lovingly crafted your never booted image in InstaDMG. It&rsquo;s fully up to date and lovely. And then you try to enable FileVault 2. As you have no Recovery HD, it&rsquo;s not going to happen.</p>

<p>I&rsquo;ve tried several methods to get around this, including taking an image of an existing Recovery HD. It worked (ish), but didn&rsquo;t feel right. Then I found this post on <a href="https://plus.google.com/113021614344742332063/posts/8D8FJjps5C6">google +</a>. I&rsquo;ve lovingly ripped off the method and put it into a package for deployment with DeployStudio, ARD, or anything else that can take normal packages. <a href="https://github.com/grahamgilbert/Make-Recovery-HD">You can download everything from my GitHub</a>, usage instructions are in the readme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Profile Manager]]></title>
    <link href="http://grahamgilbert.com/blog/2011/12/10/thoughts-on-profile-manager/"/>
    <updated>2011-12-10T20:45:29+00:00</updated>
    <id>http://grahamgilbert.com/blog/2011/12/10/thoughts-on-profile-manager</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve been using a 10.7 Server in the office since Lion was released, but it is only now that I&rsquo;m about to install an all Lion office, so will get the chance to use Profile Manager in a real install. Over the last few months, I&rsquo;ve noticed a couple of things:</p>

<ul>
<li><p>Don&rsquo;t bother using a self signed SSL certificate. Preferences will fail to push seemingly at random without a proper certificate. For what they cost, get over to Godaddy and buy yourself a cheap certificate and save yourself hours of head scratching.</p></li>
<li><p>On first glance, Profile Manager seems to be lacking load of options that we had in Workgroup Manager. Remember that your can upload your own plists, so we can still set all of the options that we could before.</p></li>
<li><p>I&rsquo;ve not been able to set Mobility preferences using Profile Manager, so have had to fall back to MCX for this as the client mac steadfastly refuses to use the settings I&rsquo;ve set in Profile Manager. If anyone has any ideas about this, I&rsquo;d love to hear them.</p></li>
<li><p>If you&rsquo;re using DeployStudio, your can cut out a load of post imaging faffing about with enrolling the mac by using an Enrolment Profile and then using the workflow item in DS to get the client talking to your server.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backing up Postres in Lion Server]]></title>
    <link href="http://grahamgilbert.com/blog/2011/11/29/backing-up-postres-in-lion-server/"/>
    <updated>2011-11-29T16:10:37+00:00</updated>
    <id>http://grahamgilbert.com/blog/2011/11/29/backing-up-postres-in-lion-server</id>
    <content type="html"><![CDATA[<p>Starting with Lion Server, a fair bit of data is now stored in Postgres databases. If you use Time Machine, you&rsquo;ll get this backed up properly for you. If you use a proper backup solution (I prefer CrashPlan), you won&rsquo;t get automated dumps. This script rectifies this, by dumping all of your Postgres data, and keeping 7 days worth.</p>

<p>You can grab the code, along with a pre-built pkg installer from <a href="https://github.com/grahamgilbert/Postgres-Backup-for-Lion-Server">GitHub</a>.</p>

<h3>Configuration</h3>

<p>By default, the script puts it&rsquo;s backups in /Backups/Postgres &ndash; if you wish to change it, you will need to edit line 3 of /usr/local/pgbackup/pgbackup.sh</p>

<p><code>bash
/usr/local/pgbackup/pgbackup.sh
FINAL_BACKUP_DIR=/path/where/you/want/things/kept
</code></p>

<p>The LaunchDaemon will trigger the script every night at 21:00. If you wish to change this, you will need to edit the CalendarStartInterval part of com.grahamgilbert.pgbackup.plist</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kerio Connect vs Web Services in Lion Server]]></title>
    <link href="http://grahamgilbert.com/blog/2011/11/22/kerio-connect-vs-web-services-in-lion-server/"/>
    <updated>2011-11-22T21:17:27+00:00</updated>
    <id>http://grahamgilbert.com/blog/2011/11/22/kerio-connect-vs-web-services-in-lion-server</id>
    <content type="html"><![CDATA[<h3>The problem</h3>

<p>Lion Server takes over every ethernet interface when you enable any web services (Web, Wiki, Profile Manager, basically anything!). This leaves us with two options: putting Kerio on a non-standard port and getting the users to type that in every time, or completely disabling apache and not using any of the good stuff that came with Lion Server. Or, we could work out a way to redirect users to the right port number when they hit mail.example.com</p>

<p>Enter Reverse Proxy. This takes the request for the mail.example.com virtual host, and redirects it to our custom HTTPS port (8843).</p>

<h3>How to do it</h3>

<p>The files you need are on my <a href="https://github.com/grahamgilbert/Lion_Kerio">GitHub</a>. Replace mail.example.com with the FQDN of your mail server.</p>

<ol>
<li>Set up your lion server first. Configure SSL certificates, OD and web services the way you like it.</li>
<li>Export your private key for the signed SSL certificate from the keychain.</li>
<li>Install Kerio Connect. Import the private key and your signed certificate.</li>
<li>Set Kerio to use only port 8800 for HTTP and 8843 for HTTP and HTTPS, respectively.</li>
<li>Set Kerio to bind it&rsquo;s services to All Interfaces rather than a specific IP address. (I&rsquo;ve found that services won&rsquo;t start when it&rsquo;s listening on all IPs, but will when it can listen to all &ndash; don&rsquo;t ask me why!)</li>
<li>In Server.app, configure mail.example.com in Web. Set it to use port 443, set the root folder to whatever you want (it won&rsquo;t be used).</li>
<li>In Hardware, set the virtual host you just created to use the right ssl cert.</li>
<li>In terminal: <code>cd /path/to/the/files/you/downloaded</code></li>
<li>In terminal again: <code>sudo cp httpd_kerio.conf /etc/apache2/httpd_kerio.conf</code></li>
<li>And again: <code>sudo cp webapps/com.grahamglbert.kerio.plist /etc/apache2/webapps/com.grahamglbert.kerio.plist</code></li>
<li>One last time: <code>sudo webappctl start com.grahamgilbert.kerio mail.example.com</code></li>
</ol>


<h3>What&rsquo;s happening</h3>

<p>By default, when you specify a vhost to use ssl in lion server, any requests to port 80 are redirected to 443. Once it&rsquo;s wrapped in ssl, it&rsquo;s redirected transparently to 8843, so the user is sent to the webmail login.
The plist file is the core of the webapp mechanism that was introduced with lion server. Within that all we&rsquo;re doing is importing the httpd_kerio.conf file (which just has a standard apache reverse proxy directive) and telling the app to always use ssl. The webappctl command is simply telling the webapp mechanism to load our plist and start it on the mail.example.com vhost.</p>

<h3>Known Issues</h3>

<h4>Entourage</h4>

<p>Entourage accounts will need to be reconfigured with the Kerio setup tool. They don&rsquo;t seem to like communicating with the server over port 443 when the reverse proxy is running &ndash; they will have issues sending email.</p>

<h4>Kerio Services</h4>

<p>The services in Kerio Admin will need to be set to run on All Interfaces rather than a set IP address, as they won&rsquo;t start on a specific address (it is unknown whether this is because of the reverse proxy / webapp process or if this is a general Lion issue). If the service has stopped, the webapp will need to be restarted:</p>

<pre><code>sudo webappctl stop com.grahamgilbert.kerio mail.example.com
sudo webappctl start com.grahamgilbert.kerio mail.example.com
</code></pre>
]]></content>
  </entry>
  
</feed>
