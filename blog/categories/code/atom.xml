<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | graham gilbert]]></title>
  <link href="http://grahamgilbert.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://grahamgilbert.com/"/>
  <updated>2015-01-04T15:14:50+00:00</updated>
  <id>http://grahamgilbert.com/</id>
  <author>
    <name><![CDATA[Graham Gilbert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a test Puppet Master with Vagrant]]></title>
    <link href="http://grahamgilbert.com/blog/2013/02/13/building-a-test-puppet-master-with-vagrant/"/>
    <updated>2013-02-13T08:27:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/02/13/building-a-test-puppet-master-with-vagrant</id>
    <content type="html"><![CDATA[<p>Puppet is awesome. Until you deploy some code that worked locally, but for some reason didn’t when you put it onto your Puppet Master. Whoops.</p>

<p>So, you need a testing setup. But Puppet can take a while to keep configuring. Which is where <a href="http://www.vagrantup.com">Vagrant</a> comes in. It it a tool which allows you to build virtual machines automatically (currently only with VirtualBox, but VMWare Fusion support is coming very soon). And the best part (for me, anyway) is that it uses Puppet to configure the VM (Puppet to configure your Puppet Master? All too meta for this time of the morning).</p>

<p>Anyway, that’s enough waffle &ndash; the Vagrant configuration is up on my <a href="https://github.com/grahamgilbert/vagrant-puppetmaster">GitHub</a>.</p>

<p>If you are following along with my series on getting started with Puppet on OS X, you can replace the Puppet Labs provided VM with this setup (which would be a good idea, as the Enterprise version is a few versions behind the Open Source version, missing some features when managing Macs).</p>

<p>This testing setup includes:</p>

<ul>
<li>A Puppet Master running using the built in web server (fine for testing, not enough poke for a production server)</li>
<li>Puppet Dashboard (we all love a GUI, right?)</li>
<li>PuppetDB (this will store data about your nodes, and then hooks into the Dashboard to display it)</li>
</ul>


<p>To get up and running quickly, you will need:</p>

<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
<li><a href="http://downloads.vagrantup.com/">Vagrant</a></li>
</ul>


<p>Once those are installed, cd into the directory where you keep your code (mine lives in ~/Documents/Code), clone the repo and then tell Vagrant to bring the VM up.</p>

<pre><code>cd ~/Documents/Code
git clone https://github.com/grahamgilbert/vagrant-puppetmaster.git
cd vagrant-puppetmaster
vagrant up
</code></pre>

<p>If you don’t have the base box Ubuntu box downloaded, Vagrant will pull it down for you and cache the clean VM for you. It will then make a copy, run the script that installs the latest version of Puppet, then run through the Puppet code that will configure the VM to be a Puppet Master for you. Once the VM is running, you can place your modules and manifests in <code>puppet/modules</code> and <code>puppet/manifests</code>, respectively. The dashboard is accessible at <a href="http://192.168.33.10:3000">http://192.168.33.10:3000</a>.</p>

<p><strong>This VM is not suitable for production.</strong> I’ve made several tweaks to the configuration that makes it easier to test your code, but would be a security risk if used on a production server. <strong>Only use this configuration for testing.</strong> We’re also installing everything onto one VM &ndash; you probably want to separate this out into at least two boxes in production, maybe even three if you have a large deployment. Like I said, the idea here is to quickly set up a testing environment that behaves like our production environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crypt: A FileVault 2 escrow solution]]></title>
    <link href="http://grahamgilbert.com/blog/2013/01/18/crypt-a-filevault-2-escrow-solution/"/>
    <updated>2013-01-18T08:05:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2013/01/18/crypt-a-filevault-2-escrow-solution</id>
    <content type="html"><![CDATA[<p>Although it&rsquo;s been blogged about over at <a href="http://afp548.com/2013/01/02/crypt-a-client-and-web-app-for-filevault-2-encryption-and-escrow/">afp548</a> and <a href="http://derflounder.wordpress.com/2012/12/31/first-look-at-crypt/">Rich Trouton&rsquo;s blog</a>, I&rsquo;d like to introduce you all to <a href="https://github.com/grahamgilbert/Crypt">Crypt</a>.</p>

<p><img class="center" src="/images/posts/2013-01-18/Crypt-Screenshot.png"></p>

<p>Crypt is a solution for enabling FileVault 2 on Macs running either 10.7 or 10.8 and securely storing those keys, using no outside infrastructure like other solutions do (Cauliflower Vest&rsquo;s requirement of Google App Engine). It&rsquo;s only requirement is a web server that can run a Django app (which is pretty much anything &ndash; the example setup uses Apache on Ubuntu 12, but you can use anything you want).</p>

<p>Crypt is made up of two parts: A <a href="https://github.com/grahamgilbert/Crypt-Server">web app</a>, which stores the recovery keys and a <a href="https://github.com/grahamgilbert/Crypt">client app</a> for enabling FileVault 2 on a Mac which then sends the recovery key to the server. The server has two user levels, so access to keys can be restricted, and all key access is logged for auditing.</p>

<p>We&rsquo;ve been using it at <a href="http://pebbleit.com">pebble.it</a> for a few weeks now and haven&rsquo;t found any issues during use, but please be aware that this is what I&rsquo;d call &ldquo;beta&rdquo; software. You might be happy using beta software in production, but that&rsquo;s up to you! I&rsquo;d welcome all feedback, both good and bad. Planned features include AD authentication and emails to admins when new requests come in. Please file bugs and feature requests over at <a href="https://github.com/grahamgilbert/Crypt">GitHub</a> so I can keep track of them all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacNamer]]></title>
    <link href="http://grahamgilbert.com/blog/2012/12/12/macnamer/"/>
    <updated>2012-12-12T11:05:00+00:00</updated>
    <id>http://grahamgilbert.com/blog/2012/12/12/macnamer</id>
    <content type="html"><![CDATA[<p>A few months ago, we decided to move away from DeployStudio for imaging our Macs to reduce the OS X footprint in the server room (a plain old NetRestore can be run from <a href="https://jamfnation.jamfsoftware.com/viewProduct.html?id=180&amp;view=info">NetSUS</a>). This left us with a problem &ndash; how are we going to name our Macs now (a task previously performed by DeployStudio)?</p>

<p>Enter <a href="https://github.com/grahamgilbert/macnamer">MacNamer</a>. It&rsquo;s usage and installation is detailled in the Readme file, please fork, try to break, file pull requests. This has been in production for several months at work, but I&rsquo;m sure someone will manage to make it break!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Mountain Lion Recovery HD]]></title>
    <link href="http://grahamgilbert.com/blog/2012/07/28/making-a-mountain-lion-recovery-hd/"/>
    <updated>2012-07-28T06:48:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2012/07/28/making-a-mountain-lion-recovery-hd</id>
    <content type="html"><![CDATA[<p><strong>Update:</strong> There&rsquo;s a better method over at <a href="http://afp548.com/2012/08/15/creating-a-10-8-recovery-hd-package-with-luggage/">afp548</a> that does this better. Use that!</p>

<p>A few months ago I made a package to create a Recovery HD on a freshly deployed Lion Mac. It&rsquo;s time to do the same for <a href="https://twitter.com/fordy/status/228218744177033216">Mountain Goat</a>.</p>

<p>In true Blue Peter style, you will need:</p>

<ul>
<li><a href="https://github.com/unixorn/luggage">The Luggage</a> (If you&rsquo;re having problems getting The Luggage working with the latest version of Xcode, please see <a href="https://groups.google.com/forum/#!topic/macenterprise/v4qRFnCutS4/discussion">this post on macenterprise</a></li>
<li>The <a href="https://github.com/grahamgilbert/recovery-hd-mountain-lion">GitHub Repo</a></li>
<li>A read only DMG of a never booted 10.8 Recovery HD</li>
<li>The <a href="http://support.apple.com/kb/DL1464">Lion Recovovery HD Update</a></li>
</ul>


<!--more-->


<h2>Getting a 10.8 Recovery HD DMG</h2>

<p>First you need the debug menu turned on in Disk Utility. Make sure Disk Utility is quit and put this into Terminal:
<code>defaults write com.apple.DiskUtility DUDebugMenuEnabled 1</code></p>

<p>Open up Disk Utility again, select the Recovery HD and choose New Image. In the resulting pop-up leave the name as Recovery HD and change the format to read-only. Save it, and put it in the folder you cloned the repo to.</p>

<p><img class="center" src="/images/posts/2012-07-26/Disk_Utility.jpg"></p>

<h2>Getting dmtest</h2>

<p>Open the Recovery HD Update from Apple and run:
<code>pkgutil --expand /Volumes/Mac\ OS\ X\ Lion\ Recovery\ HD\ Update/RecoveryHDUpdate.pkg ~/Desktop/RecoveryHDUpdate</code></p>

<p>Copy dmtest from ~/Desktop/RecoveryHDUpdate/RecoveryHDUpdate.pkg/Scripts/Tools to the folder your cloned the repo to &ndash; just a quick <code>make pkg</code> and you&rsquo;re finished.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profile Manager Enrollment Package]]></title>
    <link href="http://grahamgilbert.com/blog/2012/04/06/profile-manager-enrollment-package/"/>
    <updated>2012-04-06T10:38:00+01:00</updated>
    <id>http://grahamgilbert.com/blog/2012/04/06/profile-manager-enrollment-package</id>
    <content type="html"><![CDATA[<p>Over the past week or so, we had a need to enroll macs automagically with a Lion Profile Manager server. My first plan was to do what Charles Edge did in his recent <a href="http://krypted.com/mac-os-x/automating-profile-manager-enrollment-through-deploystudio/">blog post</a> and use DeployStudio. Then I remembered another post by Charles on <a href="http://krypted.com/iphone/profile-manager-and-profiles/">/usr/bin/profiles</a> and wondered if I could make a workflow that can be used throughout our deployment and system maintenance process &ndash; yup, the humble pkg, that can be popped into Munki for existing macs, installed with DeployStudio for imaging and pushed out with ARD if need be.</p>

<p><a href="https://github.com/grahamgilbert/Profile-Manager-Enrollment">Get the code from GitHub</a></p>

<p>Assuming you&rsquo;ve got <a href="https://github.com/unixorn/luggage">The Luggage</a> set up, first off you&rsquo;ll need your enrollment and trust profiles:</p>

<ol>
<li>Create a new enrollment profile</li>
<li>Give your enrollement profile a name</li>
<li>Download the trust profile</li>
<li>Download the enrollment profile</li>
</ol>


<p><a href="/images/posts/2012-04-06/profile_enrollment_and_trust-full.jpg"><img class="center" src="/images/posts/2012-04-06/profile_enrollment_and_trust-thumb.jpg"></a></p>

<p>If your attachments auto open, click cancel when you&rsquo;re asked if you want to install the profiles so they stay in ~/Downloads. Rename them to enroll.mobileconfig and trust.mobileconfig and pop them into the directory you cloned from GitHub. A quick <code>make pkg</code> and you&rsquo;ve got your package.</p>
]]></content>
  </entry>
  
</feed>
